// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"order/ent/ordermain"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// OrderMain is the model entity for the OrderMain schema.
type OrderMain struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// 订单号，系统生成
	OrderCode string `json:"order_code,omitempty"`
	// 订单状态0 等待sku解析 1待匹配物流 2待派单  3待拣货   4待核单 5待打包 6待发货 7已发货 21待取跟踪号 23待获取物流单
	OrderStatus int8 `json:"order_status,omitempty"`
	// 异常类型1物流 2sku 3地址 5利润 6缺货 7海外仓异常 8仓库异常 9物流单异常 10 采购异常 11其他异常 201派单 202代发截停
	ExceptionType int8 `json:"exception_type,omitempty"`
	// 订单号，店铺后台生成
	StoreOrderCode string `json:"store_order_code,omitempty"`
	// 订单店铺的平台
	Platform string `json:"platform,omitempty"`
	// 店铺名称
	ShopName string `json:"shop_name,omitempty"`
	// 收件人first name
	ShipFirstName string `json:"ship_first_name,omitempty"`
	// 收件人last name
	ShipLastName string `json:"ship_last_name,omitempty"`
	// 收件人公司名称
	ShipCompany string `json:"ship_company,omitempty"`
	// 收件人地址1
	ShipStreet1 string `json:"ship_street1,omitempty"`
	// 收件人地址2
	ShipStreet2 string `json:"ship_street2,omitempty"`
	// 收件人城市
	ShipCity string `json:"ship_city,omitempty"`
	// 收件人省/州
	ShipState string `json:"ship_state,omitempty"`
	// 收件人邮编
	ShipZip string `json:"ship_zip,omitempty"`
	// 收件人国家(这里国家全称)
	ShipCountry string `json:"ship_country,omitempty"`
	// 收件人国家简称(店铺管理有国家简称)
	ShipCountryCode string `json:"ship_country_code,omitempty"`
	// 收件人电话
	ShipPhone string `json:"ship_phone,omitempty"`
	// 传真
	ShipFax string `json:"ship_fax,omitempty"`
	// 收件人备注
	ShipRemark string `json:"ship_remark,omitempty"`
	// 收件人门牌号
	ShipHouse string `json:"ship_house,omitempty"`
	// 收件人证书号
	ShipCertificateCode string `json:"ship_certificate_code,omitempty"`
	// 订单用户email
	OrderUserEmail string `json:"order_user_email,omitempty"`
	// 客户名称或者唯一ID
	OrdersUserID string `json:"orders_user_id,omitempty"`
	// 订单货币
	Currency string `json:"currency,omitempty"`
	// 订单货币id
	CurrenciesID int32 `json:"currencies_id,omitempty"`
	// 订单货币当前汇率
	CurrencyRate float64 `json:"currency_rate,omitempty"`
	// 系统运输方式
	ShippingMethod string `json:"shipping_method,omitempty"`
	// 平台的原始运输方式
	ShippingMethodOrig string `json:"shipping_method_orig,omitempty"`
	// 运输方式中文名称(主要普源数据id问题)
	ShippingMethodName string `json:"shipping_method_name,omitempty"`
	// 订单总金额
	GrandTotal float64 `json:"grand_total,omitempty"`
	// 跟踪号(空单号）
	TrackNumber string `json:"track_number,omitempty"`
	// 真正的跟踪号
	FollowNumber string `json:"follow_number,omitempty"`
	// 支付时间
	DatePayment time.Time `json:"date_payment,omitempty"`
	// 交易号
	TransactionNumber string `json:"transaction_number,omitempty"`
	// 交易费用
	TransactionFee float64 `json:"transaction_fee,omitempty"`
	// 跟踪号(空单号）上传时间
	UpdateTrackTime time.Time `json:"update_track_time,omitempty"`
	// 真正的跟踪号上传时间
	UpdateFollowTime time.Time `json:"update_follow_time,omitempty"`
	// 订单运输成本
	ShippingCost float64 `json:"shipping_cost,omitempty"`
	// 订单附加运输成本
	ShippingCostExt float64 `json:"shipping_cost_ext,omitempty"`
	// 税号
	TaxesNumber string `json:"taxes_number,omitempty"`
	// 订单税费
	Tax float64 `json:"tax,omitempty"`
	// 平台优惠(lazada卖家平台优惠)
	OrderDiscount float64 `json:"order_discount,omitempty"`
	// 保险费用
	Insurance float64 `json:"insurance,omitempty"`
	// 订单重量
	OrderWeight float64 `json:"order_weight,omitempty"`
	// 订单创建类型:create手动创建，download系统下载
	OrderCretateType ordermain.OrderCretateType `json:"order_cretate_type,omitempty"`
	// 订单的类型 0普通单1 合并单 2拆分订单 3重寄订单 4内部订单 5补发单
	OrderType int8 `json:"order_type,omitempty"`
	// 订单店铺创建时间
	StoreCreatedAt time.Time `json:"store_created_at,omitempty"`
	// 关联(子)订单号
	SubOrdersCode string `json:"sub_orders_code,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 仓库id
	WarehouseID string `json:"warehouse_id,omitempty"`
	// 订单列表类型 默认0正常 1可合并 2作废 3合并被取消
	OrderListType int8 `json:"order_list_type,omitempty"`
	// 批次号
	OrderBatchNo string `json:"order_batch_no,omitempty"`
	// 店铺管理的店铺ID
	ShopID int32 `json:"shop_id,omitempty"`
	// 订单金额(不含运费)
	Subtotal float64 `json:"subtotal,omitempty"`
	// 订单运费(平台给的)
	ShippingFree float64 `json:"shipping_free,omitempty"`
	// 订单成本
	OrderCost float64 `json:"order_cost,omitempty"`
	// 订单利润
	OrderProfit float64 `json:"order_profit,omitempty"`
	// 发货时间
	ShipDate time.Time `json:"ship_date,omitempty"`
	// 佣金
	Commission float64 `json:"commission,omitempty"`
	// 截单状态 0:正式, 1作废成功, 2等待截单 21直发仓待作废 22直发仓待恢复
	InterceptState int8 `json:"intercept_state,omitempty"`
	// 派单时间
	SendOrderTime time.Time `json:"send_order_time,omitempty"`
	// 派单人,user表的staff_id
	SendOrderUser string `json:"send_order_user,omitempty"`
	// 1直发仓 2海外仓 3FBA订单
	ProviderType int8 `json:"provider_type,omitempty"`
	// 包装成本
	OrderPackCost float64 `json:"order_pack_cost,omitempty"`
	// 收款平台交易费
	PaymentFixCost float64 `json:"payment_fix_cost,omitempty"`
	// 是否是fba代发单 0 不是 | 1是
	IsFbaBehalf int8 `json:"is_fba_behalf,omitempty"`
	// 0=>未标记,3=>无需标记,1=>系统标记成功,101=>系统标记失败,2=>手工标记成功,201=>手工标记失败,5=>一次标记成功,4=>一次标记失败,7=>二次标记成功,8=>二次标记失败
	FulfillType int8 `json:"fulfill_type,omitempty"`
	// 标记异常 0 无异常 1失败异常
	FulfillException int8 `json:"fulfill_exception,omitempty"`
	// 欧盟IOSS编号
	IossNumber string `json:"ioss_number,omitempty"`
	// 仓库店铺id
	WarehouseShopID int32 `json:"warehouse_shop_id,omitempty"`
	// ebay销售记录编号和shopify订单和shopee包裹号
	SalesRecordNumber string `json:"sales_record_number,omitempty"`
	// 仓库单据
	TicketCode string `json:"ticket_code,omitempty"`
	// 海外仓状态
	OverseasWarehouseStatus string `json:"overseas_warehouse_status,omitempty"`
	// pp交易id
	PayPalID string `json:"pay_pal_id,omitempty"`
	// IsUpdate holds the value of the "is_update" field.
	IsUpdate int8 `json:"is_update,omitempty"`
	// 订单状态0 正常,1 停售订单
	OrderSaleState int8 `json:"order_sale_state,omitempty"`
	// 商品成本
	ProductCost float64 `json:"product_cost,omitempty"`
	// 头程成本
	HeadCost float64 `json:"head_cost,omitempty"`
	// 代发承运商,多个逗号分割
	CarrierCode string `json:"carrier_code,omitempty"`
	// 代缴代扣税金(amazon)
	WithheldTax float64 `json:"withheld_tax,omitempty"`
	// 其它费用(amazon)
	OtherFee float64 `json:"other_fee,omitempty"`
	// 关税
	EscrowTax float64 `json:"escrow_tax,omitempty"`
	// 商品增值税
	FinalProductVatTax float64 `json:"final_product_vat_tax,omitempty"`
	// 运费增值税
	FinalShippingVatTax float64 `json:"final_shipping_vat_tax,omitempty"`
	// FBA买家付的运费
	ShippingCharge float64 `json:"shipping_charge,omitempty"`
	// 卖家平台优惠(lazada平台优惠)
	VoucherPlatform float64 `json:"voucher_platform,omitempty"`
	// 第一次标记的最后有效期，只针对速卖通,Shopee
	OverTimeLeft time.Time `json:"over_time_left,omitempty"`
	// 运输补贴（shopee平台运输补贴）
	ShippingRebate float64 `json:"shipping_rebate,omitempty"`
	// 物流面单地址
	LabelList string `json:"label_list,omitempty"`
	// 销售总金额原币
	OutRealGrandTotal float64 `json:"out_real_grand_total,omitempty"`
	// 发票链接地址
	BillList string `json:"bill_list,omitempty"`
	// 销售总金额
	OutGrandTotal float64 `json:"out_grand_total,omitempty"`
	// 店铺id（逗号隔开，只有缺货匹配有这个字段）
	DeliverShop string `json:"deliver_shop,omitempty"`
	// 订单最终运输成本
	ShippingCostFinal float64 `json:"shipping_cost_final,omitempty"`
	// FBA订单预估尾程
	ShippingFreeAbout float64 `json:"shipping_free_about,omitempty"`
	// 订单创建状态 0 正常可以处理的订单1 待提交运营审核2 运营审核中3 财务审核中 4 驳回
	CreateOrderStatus int8 `json:"create_order_status,omitempty"`
	// 财务结算(推送时间)
	FinanceTime time.Time `json:"finance_time,omitempty"`
	// 是否QCC订单1 是 | 2 不是
	IsQcc int8 `json:"is_qcc,omitempty"`
	// 手工单订单驳回原因
	RejectReason string `json:"reject_reason,omitempty"`
	// 订单创建当地时间
	OrderLocalTime time.Time `json:"order_local_time,omitempty"`
	// 优惠码
	DiscountCode string `json:"discount_code,omitempty"`
	// 缺货状态: 0默认 1待补货 2未补货
	StockoutStatus int8 `json:"stockout_status,omitempty"`
	// 订单长
	OrderLength float64 `json:"order_length,omitempty"`
	// 订单宽
	OrderWidth float64 `json:"order_width,omitempty"`
	// 订单高
	OrderHeight float64 `json:"order_height,omitempty"`
	// 包裹三边1
	FirstSide float64 `json:"first_side,omitempty"`
	// 包裹三边2
	SecondSide float64 `json:"second_side,omitempty"`
	// 包裹三边3
	ThirdSide float64 `json:"third_side,omitempty"`
	// 订单计费重
	OrderFeeWeight float64 `json:"order_fee_weight,omitempty"`
	// 店铺负责人
	ShopManager string `json:"shop_manager,omitempty"`
	// 推送状态：0无面单 1待推送 2待同步 3已同步
	PushStatus int8 `json:"push_status,omitempty"`
	// 买家支付运费(shopee)
	BuyerPaidShippingFee float64 `json:"buyer_paid_shipping_fee,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderMain) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordermain.FieldCurrencyRate, ordermain.FieldGrandTotal, ordermain.FieldTransactionFee, ordermain.FieldShippingCost, ordermain.FieldShippingCostExt, ordermain.FieldTax, ordermain.FieldOrderDiscount, ordermain.FieldInsurance, ordermain.FieldOrderWeight, ordermain.FieldSubtotal, ordermain.FieldShippingFree, ordermain.FieldOrderCost, ordermain.FieldOrderProfit, ordermain.FieldCommission, ordermain.FieldOrderPackCost, ordermain.FieldPaymentFixCost, ordermain.FieldProductCost, ordermain.FieldHeadCost, ordermain.FieldWithheldTax, ordermain.FieldOtherFee, ordermain.FieldEscrowTax, ordermain.FieldFinalProductVatTax, ordermain.FieldFinalShippingVatTax, ordermain.FieldShippingCharge, ordermain.FieldVoucherPlatform, ordermain.FieldShippingRebate, ordermain.FieldOutRealGrandTotal, ordermain.FieldOutGrandTotal, ordermain.FieldShippingCostFinal, ordermain.FieldShippingFreeAbout, ordermain.FieldOrderLength, ordermain.FieldOrderWidth, ordermain.FieldOrderHeight, ordermain.FieldFirstSide, ordermain.FieldSecondSide, ordermain.FieldThirdSide, ordermain.FieldOrderFeeWeight, ordermain.FieldBuyerPaidShippingFee:
			values[i] = new(sql.NullFloat64)
		case ordermain.FieldID, ordermain.FieldOrderStatus, ordermain.FieldExceptionType, ordermain.FieldCurrenciesID, ordermain.FieldOrderType, ordermain.FieldOrderListType, ordermain.FieldShopID, ordermain.FieldInterceptState, ordermain.FieldProviderType, ordermain.FieldIsFbaBehalf, ordermain.FieldFulfillType, ordermain.FieldFulfillException, ordermain.FieldWarehouseShopID, ordermain.FieldIsUpdate, ordermain.FieldOrderSaleState, ordermain.FieldCreateOrderStatus, ordermain.FieldIsQcc, ordermain.FieldStockoutStatus, ordermain.FieldPushStatus:
			values[i] = new(sql.NullInt64)
		case ordermain.FieldOrderCode, ordermain.FieldStoreOrderCode, ordermain.FieldPlatform, ordermain.FieldShopName, ordermain.FieldShipFirstName, ordermain.FieldShipLastName, ordermain.FieldShipCompany, ordermain.FieldShipStreet1, ordermain.FieldShipStreet2, ordermain.FieldShipCity, ordermain.FieldShipState, ordermain.FieldShipZip, ordermain.FieldShipCountry, ordermain.FieldShipCountryCode, ordermain.FieldShipPhone, ordermain.FieldShipFax, ordermain.FieldShipRemark, ordermain.FieldShipHouse, ordermain.FieldShipCertificateCode, ordermain.FieldOrderUserEmail, ordermain.FieldOrdersUserID, ordermain.FieldCurrency, ordermain.FieldShippingMethod, ordermain.FieldShippingMethodOrig, ordermain.FieldShippingMethodName, ordermain.FieldTrackNumber, ordermain.FieldFollowNumber, ordermain.FieldTransactionNumber, ordermain.FieldTaxesNumber, ordermain.FieldOrderCretateType, ordermain.FieldSubOrdersCode, ordermain.FieldWarehouseID, ordermain.FieldOrderBatchNo, ordermain.FieldSendOrderUser, ordermain.FieldIossNumber, ordermain.FieldSalesRecordNumber, ordermain.FieldTicketCode, ordermain.FieldOverseasWarehouseStatus, ordermain.FieldPayPalID, ordermain.FieldCarrierCode, ordermain.FieldLabelList, ordermain.FieldBillList, ordermain.FieldDeliverShop, ordermain.FieldRejectReason, ordermain.FieldDiscountCode, ordermain.FieldShopManager:
			values[i] = new(sql.NullString)
		case ordermain.FieldDatePayment, ordermain.FieldUpdateTrackTime, ordermain.FieldUpdateFollowTime, ordermain.FieldStoreCreatedAt, ordermain.FieldUpdatedAt, ordermain.FieldCreatedAt, ordermain.FieldShipDate, ordermain.FieldSendOrderTime, ordermain.FieldOverTimeLeft, ordermain.FieldFinanceTime, ordermain.FieldOrderLocalTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderMain", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderMain fields.
func (om *OrderMain) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordermain.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			om.ID = int32(value.Int64)
		case ordermain.FieldOrderCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_code", values[i])
			} else if value.Valid {
				om.OrderCode = value.String
			}
		case ordermain.FieldOrderStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_status", values[i])
			} else if value.Valid {
				om.OrderStatus = int8(value.Int64)
			}
		case ordermain.FieldExceptionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exception_type", values[i])
			} else if value.Valid {
				om.ExceptionType = int8(value.Int64)
			}
		case ordermain.FieldStoreOrderCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_order_code", values[i])
			} else if value.Valid {
				om.StoreOrderCode = value.String
			}
		case ordermain.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				om.Platform = value.String
			}
		case ordermain.FieldShopName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shop_name", values[i])
			} else if value.Valid {
				om.ShopName = value.String
			}
		case ordermain.FieldShipFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_first_name", values[i])
			} else if value.Valid {
				om.ShipFirstName = value.String
			}
		case ordermain.FieldShipLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_last_name", values[i])
			} else if value.Valid {
				om.ShipLastName = value.String
			}
		case ordermain.FieldShipCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_company", values[i])
			} else if value.Valid {
				om.ShipCompany = value.String
			}
		case ordermain.FieldShipStreet1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_street1", values[i])
			} else if value.Valid {
				om.ShipStreet1 = value.String
			}
		case ordermain.FieldShipStreet2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_street2", values[i])
			} else if value.Valid {
				om.ShipStreet2 = value.String
			}
		case ordermain.FieldShipCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_city", values[i])
			} else if value.Valid {
				om.ShipCity = value.String
			}
		case ordermain.FieldShipState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_state", values[i])
			} else if value.Valid {
				om.ShipState = value.String
			}
		case ordermain.FieldShipZip:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_zip", values[i])
			} else if value.Valid {
				om.ShipZip = value.String
			}
		case ordermain.FieldShipCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_country", values[i])
			} else if value.Valid {
				om.ShipCountry = value.String
			}
		case ordermain.FieldShipCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_country_code", values[i])
			} else if value.Valid {
				om.ShipCountryCode = value.String
			}
		case ordermain.FieldShipPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_phone", values[i])
			} else if value.Valid {
				om.ShipPhone = value.String
			}
		case ordermain.FieldShipFax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_fax", values[i])
			} else if value.Valid {
				om.ShipFax = value.String
			}
		case ordermain.FieldShipRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_remark", values[i])
			} else if value.Valid {
				om.ShipRemark = value.String
			}
		case ordermain.FieldShipHouse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_house", values[i])
			} else if value.Valid {
				om.ShipHouse = value.String
			}
		case ordermain.FieldShipCertificateCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ship_certificate_code", values[i])
			} else if value.Valid {
				om.ShipCertificateCode = value.String
			}
		case ordermain.FieldOrderUserEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_user_email", values[i])
			} else if value.Valid {
				om.OrderUserEmail = value.String
			}
		case ordermain.FieldOrdersUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field orders_user_id", values[i])
			} else if value.Valid {
				om.OrdersUserID = value.String
			}
		case ordermain.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				om.Currency = value.String
			}
		case ordermain.FieldCurrenciesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currencies_id", values[i])
			} else if value.Valid {
				om.CurrenciesID = int32(value.Int64)
			}
		case ordermain.FieldCurrencyRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field currency_rate", values[i])
			} else if value.Valid {
				om.CurrencyRate = value.Float64
			}
		case ordermain.FieldShippingMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_method", values[i])
			} else if value.Valid {
				om.ShippingMethod = value.String
			}
		case ordermain.FieldShippingMethodOrig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_method_orig", values[i])
			} else if value.Valid {
				om.ShippingMethodOrig = value.String
			}
		case ordermain.FieldShippingMethodName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_method_name", values[i])
			} else if value.Valid {
				om.ShippingMethodName = value.String
			}
		case ordermain.FieldGrandTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field grand_total", values[i])
			} else if value.Valid {
				om.GrandTotal = value.Float64
			}
		case ordermain.FieldTrackNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field track_number", values[i])
			} else if value.Valid {
				om.TrackNumber = value.String
			}
		case ordermain.FieldFollowNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field follow_number", values[i])
			} else if value.Valid {
				om.FollowNumber = value.String
			}
		case ordermain.FieldDatePayment:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_payment", values[i])
			} else if value.Valid {
				om.DatePayment = value.Time
			}
		case ordermain.FieldTransactionNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_number", values[i])
			} else if value.Valid {
				om.TransactionNumber = value.String
			}
		case ordermain.FieldTransactionFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_fee", values[i])
			} else if value.Valid {
				om.TransactionFee = value.Float64
			}
		case ordermain.FieldUpdateTrackTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_track_time", values[i])
			} else if value.Valid {
				om.UpdateTrackTime = value.Time
			}
		case ordermain.FieldUpdateFollowTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_follow_time", values[i])
			} else if value.Valid {
				om.UpdateFollowTime = value.Time
			}
		case ordermain.FieldShippingCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_cost", values[i])
			} else if value.Valid {
				om.ShippingCost = value.Float64
			}
		case ordermain.FieldShippingCostExt:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_cost_ext", values[i])
			} else if value.Valid {
				om.ShippingCostExt = value.Float64
			}
		case ordermain.FieldTaxesNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field taxes_number", values[i])
			} else if value.Valid {
				om.TaxesNumber = value.String
			}
		case ordermain.FieldTax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tax", values[i])
			} else if value.Valid {
				om.Tax = value.Float64
			}
		case ordermain.FieldOrderDiscount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field order_discount", values[i])
			} else if value.Valid {
				om.OrderDiscount = value.Float64
			}
		case ordermain.FieldInsurance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field insurance", values[i])
			} else if value.Valid {
				om.Insurance = value.Float64
			}
		case ordermain.FieldOrderWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field order_weight", values[i])
			} else if value.Valid {
				om.OrderWeight = value.Float64
			}
		case ordermain.FieldOrderCretateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_cretate_type", values[i])
			} else if value.Valid {
				om.OrderCretateType = ordermain.OrderCretateType(value.String)
			}
		case ordermain.FieldOrderType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_type", values[i])
			} else if value.Valid {
				om.OrderType = int8(value.Int64)
			}
		case ordermain.FieldStoreCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field store_created_at", values[i])
			} else if value.Valid {
				om.StoreCreatedAt = value.Time
			}
		case ordermain.FieldSubOrdersCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_orders_code", values[i])
			} else if value.Valid {
				om.SubOrdersCode = value.String
			}
		case ordermain.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				om.UpdatedAt = value.Time
			}
		case ordermain.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				om.CreatedAt = value.Time
			}
		case ordermain.FieldWarehouseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field warehouse_id", values[i])
			} else if value.Valid {
				om.WarehouseID = value.String
			}
		case ordermain.FieldOrderListType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_list_type", values[i])
			} else if value.Valid {
				om.OrderListType = int8(value.Int64)
			}
		case ordermain.FieldOrderBatchNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_batch_no", values[i])
			} else if value.Valid {
				om.OrderBatchNo = value.String
			}
		case ordermain.FieldShopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shop_id", values[i])
			} else if value.Valid {
				om.ShopID = int32(value.Int64)
			}
		case ordermain.FieldSubtotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field subtotal", values[i])
			} else if value.Valid {
				om.Subtotal = value.Float64
			}
		case ordermain.FieldShippingFree:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_free", values[i])
			} else if value.Valid {
				om.ShippingFree = value.Float64
			}
		case ordermain.FieldOrderCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field order_cost", values[i])
			} else if value.Valid {
				om.OrderCost = value.Float64
			}
		case ordermain.FieldOrderProfit:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field order_profit", values[i])
			} else if value.Valid {
				om.OrderProfit = value.Float64
			}
		case ordermain.FieldShipDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ship_date", values[i])
			} else if value.Valid {
				om.ShipDate = value.Time
			}
		case ordermain.FieldCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field commission", values[i])
			} else if value.Valid {
				om.Commission = value.Float64
			}
		case ordermain.FieldInterceptState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field intercept_state", values[i])
			} else if value.Valid {
				om.InterceptState = int8(value.Int64)
			}
		case ordermain.FieldSendOrderTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field send_order_time", values[i])
			} else if value.Valid {
				om.SendOrderTime = value.Time
			}
		case ordermain.FieldSendOrderUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field send_order_user", values[i])
			} else if value.Valid {
				om.SendOrderUser = value.String
			}
		case ordermain.FieldProviderType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field provider_type", values[i])
			} else if value.Valid {
				om.ProviderType = int8(value.Int64)
			}
		case ordermain.FieldOrderPackCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field order_pack_cost", values[i])
			} else if value.Valid {
				om.OrderPackCost = value.Float64
			}
		case ordermain.FieldPaymentFixCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_fix_cost", values[i])
			} else if value.Valid {
				om.PaymentFixCost = value.Float64
			}
		case ordermain.FieldIsFbaBehalf:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_fba_behalf", values[i])
			} else if value.Valid {
				om.IsFbaBehalf = int8(value.Int64)
			}
		case ordermain.FieldFulfillType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fulfill_type", values[i])
			} else if value.Valid {
				om.FulfillType = int8(value.Int64)
			}
		case ordermain.FieldFulfillException:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fulfill_exception", values[i])
			} else if value.Valid {
				om.FulfillException = int8(value.Int64)
			}
		case ordermain.FieldIossNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ioss_number", values[i])
			} else if value.Valid {
				om.IossNumber = value.String
			}
		case ordermain.FieldWarehouseShopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field warehouse_shop_id", values[i])
			} else if value.Valid {
				om.WarehouseShopID = int32(value.Int64)
			}
		case ordermain.FieldSalesRecordNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sales_record_number", values[i])
			} else if value.Valid {
				om.SalesRecordNumber = value.String
			}
		case ordermain.FieldTicketCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_code", values[i])
			} else if value.Valid {
				om.TicketCode = value.String
			}
		case ordermain.FieldOverseasWarehouseStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overseas_warehouse_status", values[i])
			} else if value.Valid {
				om.OverseasWarehouseStatus = value.String
			}
		case ordermain.FieldPayPalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pay_pal_id", values[i])
			} else if value.Valid {
				om.PayPalID = value.String
			}
		case ordermain.FieldIsUpdate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_update", values[i])
			} else if value.Valid {
				om.IsUpdate = int8(value.Int64)
			}
		case ordermain.FieldOrderSaleState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_sale_state", values[i])
			} else if value.Valid {
				om.OrderSaleState = int8(value.Int64)
			}
		case ordermain.FieldProductCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field product_cost", values[i])
			} else if value.Valid {
				om.ProductCost = value.Float64
			}
		case ordermain.FieldHeadCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field head_cost", values[i])
			} else if value.Valid {
				om.HeadCost = value.Float64
			}
		case ordermain.FieldCarrierCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_code", values[i])
			} else if value.Valid {
				om.CarrierCode = value.String
			}
		case ordermain.FieldWithheldTax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field withheld_tax", values[i])
			} else if value.Valid {
				om.WithheldTax = value.Float64
			}
		case ordermain.FieldOtherFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field other_fee", values[i])
			} else if value.Valid {
				om.OtherFee = value.Float64
			}
		case ordermain.FieldEscrowTax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field escrow_tax", values[i])
			} else if value.Valid {
				om.EscrowTax = value.Float64
			}
		case ordermain.FieldFinalProductVatTax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field final_product_vat_tax", values[i])
			} else if value.Valid {
				om.FinalProductVatTax = value.Float64
			}
		case ordermain.FieldFinalShippingVatTax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field final_shipping_vat_tax", values[i])
			} else if value.Valid {
				om.FinalShippingVatTax = value.Float64
			}
		case ordermain.FieldShippingCharge:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_charge", values[i])
			} else if value.Valid {
				om.ShippingCharge = value.Float64
			}
		case ordermain.FieldVoucherPlatform:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field voucher_platform", values[i])
			} else if value.Valid {
				om.VoucherPlatform = value.Float64
			}
		case ordermain.FieldOverTimeLeft:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field over_time_left", values[i])
			} else if value.Valid {
				om.OverTimeLeft = value.Time
			}
		case ordermain.FieldShippingRebate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_rebate", values[i])
			} else if value.Valid {
				om.ShippingRebate = value.Float64
			}
		case ordermain.FieldLabelList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label_list", values[i])
			} else if value.Valid {
				om.LabelList = value.String
			}
		case ordermain.FieldOutRealGrandTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field out_real_grand_total", values[i])
			} else if value.Valid {
				om.OutRealGrandTotal = value.Float64
			}
		case ordermain.FieldBillList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bill_list", values[i])
			} else if value.Valid {
				om.BillList = value.String
			}
		case ordermain.FieldOutGrandTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field out_grand_total", values[i])
			} else if value.Valid {
				om.OutGrandTotal = value.Float64
			}
		case ordermain.FieldDeliverShop:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deliver_shop", values[i])
			} else if value.Valid {
				om.DeliverShop = value.String
			}
		case ordermain.FieldShippingCostFinal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_cost_final", values[i])
			} else if value.Valid {
				om.ShippingCostFinal = value.Float64
			}
		case ordermain.FieldShippingFreeAbout:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_free_about", values[i])
			} else if value.Valid {
				om.ShippingFreeAbout = value.Float64
			}
		case ordermain.FieldCreateOrderStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_order_status", values[i])
			} else if value.Valid {
				om.CreateOrderStatus = int8(value.Int64)
			}
		case ordermain.FieldFinanceTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finance_time", values[i])
			} else if value.Valid {
				om.FinanceTime = value.Time
			}
		case ordermain.FieldIsQcc:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_qcc", values[i])
			} else if value.Valid {
				om.IsQcc = int8(value.Int64)
			}
		case ordermain.FieldRejectReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reject_reason", values[i])
			} else if value.Valid {
				om.RejectReason = value.String
			}
		case ordermain.FieldOrderLocalTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field order_local_time", values[i])
			} else if value.Valid {
				om.OrderLocalTime = value.Time
			}
		case ordermain.FieldDiscountCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discount_code", values[i])
			} else if value.Valid {
				om.DiscountCode = value.String
			}
		case ordermain.FieldStockoutStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stockout_status", values[i])
			} else if value.Valid {
				om.StockoutStatus = int8(value.Int64)
			}
		case ordermain.FieldOrderLength:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field order_length", values[i])
			} else if value.Valid {
				om.OrderLength = value.Float64
			}
		case ordermain.FieldOrderWidth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field order_width", values[i])
			} else if value.Valid {
				om.OrderWidth = value.Float64
			}
		case ordermain.FieldOrderHeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field order_height", values[i])
			} else if value.Valid {
				om.OrderHeight = value.Float64
			}
		case ordermain.FieldFirstSide:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field first_side", values[i])
			} else if value.Valid {
				om.FirstSide = value.Float64
			}
		case ordermain.FieldSecondSide:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field second_side", values[i])
			} else if value.Valid {
				om.SecondSide = value.Float64
			}
		case ordermain.FieldThirdSide:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field third_side", values[i])
			} else if value.Valid {
				om.ThirdSide = value.Float64
			}
		case ordermain.FieldOrderFeeWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field order_fee_weight", values[i])
			} else if value.Valid {
				om.OrderFeeWeight = value.Float64
			}
		case ordermain.FieldShopManager:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shop_manager", values[i])
			} else if value.Valid {
				om.ShopManager = value.String
			}
		case ordermain.FieldPushStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field push_status", values[i])
			} else if value.Valid {
				om.PushStatus = int8(value.Int64)
			}
		case ordermain.FieldBuyerPaidShippingFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field buyer_paid_shipping_fee", values[i])
			} else if value.Valid {
				om.BuyerPaidShippingFee = value.Float64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderMain.
// Note that you need to call OrderMain.Unwrap() before calling this method if this OrderMain
// was returned from a transaction, and the transaction was committed or rolled back.
func (om *OrderMain) Update() *OrderMainUpdateOne {
	return (&OrderMainClient{config: om.config}).UpdateOne(om)
}

// Unwrap unwraps the OrderMain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (om *OrderMain) Unwrap() *OrderMain {
	_tx, ok := om.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderMain is not a transactional entity")
	}
	om.config.driver = _tx.drv
	return om
}

// String implements the fmt.Stringer.
func (om *OrderMain) String() string {
	var builder strings.Builder
	builder.WriteString("OrderMain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", om.ID))
	builder.WriteString("order_code=")
	builder.WriteString(om.OrderCode)
	builder.WriteString(", ")
	builder.WriteString("order_status=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderStatus))
	builder.WriteString(", ")
	builder.WriteString("exception_type=")
	builder.WriteString(fmt.Sprintf("%v", om.ExceptionType))
	builder.WriteString(", ")
	builder.WriteString("store_order_code=")
	builder.WriteString(om.StoreOrderCode)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(om.Platform)
	builder.WriteString(", ")
	builder.WriteString("shop_name=")
	builder.WriteString(om.ShopName)
	builder.WriteString(", ")
	builder.WriteString("ship_first_name=")
	builder.WriteString(om.ShipFirstName)
	builder.WriteString(", ")
	builder.WriteString("ship_last_name=")
	builder.WriteString(om.ShipLastName)
	builder.WriteString(", ")
	builder.WriteString("ship_company=")
	builder.WriteString(om.ShipCompany)
	builder.WriteString(", ")
	builder.WriteString("ship_street1=")
	builder.WriteString(om.ShipStreet1)
	builder.WriteString(", ")
	builder.WriteString("ship_street2=")
	builder.WriteString(om.ShipStreet2)
	builder.WriteString(", ")
	builder.WriteString("ship_city=")
	builder.WriteString(om.ShipCity)
	builder.WriteString(", ")
	builder.WriteString("ship_state=")
	builder.WriteString(om.ShipState)
	builder.WriteString(", ")
	builder.WriteString("ship_zip=")
	builder.WriteString(om.ShipZip)
	builder.WriteString(", ")
	builder.WriteString("ship_country=")
	builder.WriteString(om.ShipCountry)
	builder.WriteString(", ")
	builder.WriteString("ship_country_code=")
	builder.WriteString(om.ShipCountryCode)
	builder.WriteString(", ")
	builder.WriteString("ship_phone=")
	builder.WriteString(om.ShipPhone)
	builder.WriteString(", ")
	builder.WriteString("ship_fax=")
	builder.WriteString(om.ShipFax)
	builder.WriteString(", ")
	builder.WriteString("ship_remark=")
	builder.WriteString(om.ShipRemark)
	builder.WriteString(", ")
	builder.WriteString("ship_house=")
	builder.WriteString(om.ShipHouse)
	builder.WriteString(", ")
	builder.WriteString("ship_certificate_code=")
	builder.WriteString(om.ShipCertificateCode)
	builder.WriteString(", ")
	builder.WriteString("order_user_email=")
	builder.WriteString(om.OrderUserEmail)
	builder.WriteString(", ")
	builder.WriteString("orders_user_id=")
	builder.WriteString(om.OrdersUserID)
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(om.Currency)
	builder.WriteString(", ")
	builder.WriteString("currencies_id=")
	builder.WriteString(fmt.Sprintf("%v", om.CurrenciesID))
	builder.WriteString(", ")
	builder.WriteString("currency_rate=")
	builder.WriteString(fmt.Sprintf("%v", om.CurrencyRate))
	builder.WriteString(", ")
	builder.WriteString("shipping_method=")
	builder.WriteString(om.ShippingMethod)
	builder.WriteString(", ")
	builder.WriteString("shipping_method_orig=")
	builder.WriteString(om.ShippingMethodOrig)
	builder.WriteString(", ")
	builder.WriteString("shipping_method_name=")
	builder.WriteString(om.ShippingMethodName)
	builder.WriteString(", ")
	builder.WriteString("grand_total=")
	builder.WriteString(fmt.Sprintf("%v", om.GrandTotal))
	builder.WriteString(", ")
	builder.WriteString("track_number=")
	builder.WriteString(om.TrackNumber)
	builder.WriteString(", ")
	builder.WriteString("follow_number=")
	builder.WriteString(om.FollowNumber)
	builder.WriteString(", ")
	builder.WriteString("date_payment=")
	builder.WriteString(om.DatePayment.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("transaction_number=")
	builder.WriteString(om.TransactionNumber)
	builder.WriteString(", ")
	builder.WriteString("transaction_fee=")
	builder.WriteString(fmt.Sprintf("%v", om.TransactionFee))
	builder.WriteString(", ")
	builder.WriteString("update_track_time=")
	builder.WriteString(om.UpdateTrackTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_follow_time=")
	builder.WriteString(om.UpdateFollowTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("shipping_cost=")
	builder.WriteString(fmt.Sprintf("%v", om.ShippingCost))
	builder.WriteString(", ")
	builder.WriteString("shipping_cost_ext=")
	builder.WriteString(fmt.Sprintf("%v", om.ShippingCostExt))
	builder.WriteString(", ")
	builder.WriteString("taxes_number=")
	builder.WriteString(om.TaxesNumber)
	builder.WriteString(", ")
	builder.WriteString("tax=")
	builder.WriteString(fmt.Sprintf("%v", om.Tax))
	builder.WriteString(", ")
	builder.WriteString("order_discount=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderDiscount))
	builder.WriteString(", ")
	builder.WriteString("insurance=")
	builder.WriteString(fmt.Sprintf("%v", om.Insurance))
	builder.WriteString(", ")
	builder.WriteString("order_weight=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderWeight))
	builder.WriteString(", ")
	builder.WriteString("order_cretate_type=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderCretateType))
	builder.WriteString(", ")
	builder.WriteString("order_type=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderType))
	builder.WriteString(", ")
	builder.WriteString("store_created_at=")
	builder.WriteString(om.StoreCreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sub_orders_code=")
	builder.WriteString(om.SubOrdersCode)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(om.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(om.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("warehouse_id=")
	builder.WriteString(om.WarehouseID)
	builder.WriteString(", ")
	builder.WriteString("order_list_type=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderListType))
	builder.WriteString(", ")
	builder.WriteString("order_batch_no=")
	builder.WriteString(om.OrderBatchNo)
	builder.WriteString(", ")
	builder.WriteString("shop_id=")
	builder.WriteString(fmt.Sprintf("%v", om.ShopID))
	builder.WriteString(", ")
	builder.WriteString("subtotal=")
	builder.WriteString(fmt.Sprintf("%v", om.Subtotal))
	builder.WriteString(", ")
	builder.WriteString("shipping_free=")
	builder.WriteString(fmt.Sprintf("%v", om.ShippingFree))
	builder.WriteString(", ")
	builder.WriteString("order_cost=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderCost))
	builder.WriteString(", ")
	builder.WriteString("order_profit=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderProfit))
	builder.WriteString(", ")
	builder.WriteString("ship_date=")
	builder.WriteString(om.ShipDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("commission=")
	builder.WriteString(fmt.Sprintf("%v", om.Commission))
	builder.WriteString(", ")
	builder.WriteString("intercept_state=")
	builder.WriteString(fmt.Sprintf("%v", om.InterceptState))
	builder.WriteString(", ")
	builder.WriteString("send_order_time=")
	builder.WriteString(om.SendOrderTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("send_order_user=")
	builder.WriteString(om.SendOrderUser)
	builder.WriteString(", ")
	builder.WriteString("provider_type=")
	builder.WriteString(fmt.Sprintf("%v", om.ProviderType))
	builder.WriteString(", ")
	builder.WriteString("order_pack_cost=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderPackCost))
	builder.WriteString(", ")
	builder.WriteString("payment_fix_cost=")
	builder.WriteString(fmt.Sprintf("%v", om.PaymentFixCost))
	builder.WriteString(", ")
	builder.WriteString("is_fba_behalf=")
	builder.WriteString(fmt.Sprintf("%v", om.IsFbaBehalf))
	builder.WriteString(", ")
	builder.WriteString("fulfill_type=")
	builder.WriteString(fmt.Sprintf("%v", om.FulfillType))
	builder.WriteString(", ")
	builder.WriteString("fulfill_exception=")
	builder.WriteString(fmt.Sprintf("%v", om.FulfillException))
	builder.WriteString(", ")
	builder.WriteString("ioss_number=")
	builder.WriteString(om.IossNumber)
	builder.WriteString(", ")
	builder.WriteString("warehouse_shop_id=")
	builder.WriteString(fmt.Sprintf("%v", om.WarehouseShopID))
	builder.WriteString(", ")
	builder.WriteString("sales_record_number=")
	builder.WriteString(om.SalesRecordNumber)
	builder.WriteString(", ")
	builder.WriteString("ticket_code=")
	builder.WriteString(om.TicketCode)
	builder.WriteString(", ")
	builder.WriteString("overseas_warehouse_status=")
	builder.WriteString(om.OverseasWarehouseStatus)
	builder.WriteString(", ")
	builder.WriteString("pay_pal_id=")
	builder.WriteString(om.PayPalID)
	builder.WriteString(", ")
	builder.WriteString("is_update=")
	builder.WriteString(fmt.Sprintf("%v", om.IsUpdate))
	builder.WriteString(", ")
	builder.WriteString("order_sale_state=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderSaleState))
	builder.WriteString(", ")
	builder.WriteString("product_cost=")
	builder.WriteString(fmt.Sprintf("%v", om.ProductCost))
	builder.WriteString(", ")
	builder.WriteString("head_cost=")
	builder.WriteString(fmt.Sprintf("%v", om.HeadCost))
	builder.WriteString(", ")
	builder.WriteString("carrier_code=")
	builder.WriteString(om.CarrierCode)
	builder.WriteString(", ")
	builder.WriteString("withheld_tax=")
	builder.WriteString(fmt.Sprintf("%v", om.WithheldTax))
	builder.WriteString(", ")
	builder.WriteString("other_fee=")
	builder.WriteString(fmt.Sprintf("%v", om.OtherFee))
	builder.WriteString(", ")
	builder.WriteString("escrow_tax=")
	builder.WriteString(fmt.Sprintf("%v", om.EscrowTax))
	builder.WriteString(", ")
	builder.WriteString("final_product_vat_tax=")
	builder.WriteString(fmt.Sprintf("%v", om.FinalProductVatTax))
	builder.WriteString(", ")
	builder.WriteString("final_shipping_vat_tax=")
	builder.WriteString(fmt.Sprintf("%v", om.FinalShippingVatTax))
	builder.WriteString(", ")
	builder.WriteString("shipping_charge=")
	builder.WriteString(fmt.Sprintf("%v", om.ShippingCharge))
	builder.WriteString(", ")
	builder.WriteString("voucher_platform=")
	builder.WriteString(fmt.Sprintf("%v", om.VoucherPlatform))
	builder.WriteString(", ")
	builder.WriteString("over_time_left=")
	builder.WriteString(om.OverTimeLeft.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("shipping_rebate=")
	builder.WriteString(fmt.Sprintf("%v", om.ShippingRebate))
	builder.WriteString(", ")
	builder.WriteString("label_list=")
	builder.WriteString(om.LabelList)
	builder.WriteString(", ")
	builder.WriteString("out_real_grand_total=")
	builder.WriteString(fmt.Sprintf("%v", om.OutRealGrandTotal))
	builder.WriteString(", ")
	builder.WriteString("bill_list=")
	builder.WriteString(om.BillList)
	builder.WriteString(", ")
	builder.WriteString("out_grand_total=")
	builder.WriteString(fmt.Sprintf("%v", om.OutGrandTotal))
	builder.WriteString(", ")
	builder.WriteString("deliver_shop=")
	builder.WriteString(om.DeliverShop)
	builder.WriteString(", ")
	builder.WriteString("shipping_cost_final=")
	builder.WriteString(fmt.Sprintf("%v", om.ShippingCostFinal))
	builder.WriteString(", ")
	builder.WriteString("shipping_free_about=")
	builder.WriteString(fmt.Sprintf("%v", om.ShippingFreeAbout))
	builder.WriteString(", ")
	builder.WriteString("create_order_status=")
	builder.WriteString(fmt.Sprintf("%v", om.CreateOrderStatus))
	builder.WriteString(", ")
	builder.WriteString("finance_time=")
	builder.WriteString(om.FinanceTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_qcc=")
	builder.WriteString(fmt.Sprintf("%v", om.IsQcc))
	builder.WriteString(", ")
	builder.WriteString("reject_reason=")
	builder.WriteString(om.RejectReason)
	builder.WriteString(", ")
	builder.WriteString("order_local_time=")
	builder.WriteString(om.OrderLocalTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("discount_code=")
	builder.WriteString(om.DiscountCode)
	builder.WriteString(", ")
	builder.WriteString("stockout_status=")
	builder.WriteString(fmt.Sprintf("%v", om.StockoutStatus))
	builder.WriteString(", ")
	builder.WriteString("order_length=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderLength))
	builder.WriteString(", ")
	builder.WriteString("order_width=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderWidth))
	builder.WriteString(", ")
	builder.WriteString("order_height=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderHeight))
	builder.WriteString(", ")
	builder.WriteString("first_side=")
	builder.WriteString(fmt.Sprintf("%v", om.FirstSide))
	builder.WriteString(", ")
	builder.WriteString("second_side=")
	builder.WriteString(fmt.Sprintf("%v", om.SecondSide))
	builder.WriteString(", ")
	builder.WriteString("third_side=")
	builder.WriteString(fmt.Sprintf("%v", om.ThirdSide))
	builder.WriteString(", ")
	builder.WriteString("order_fee_weight=")
	builder.WriteString(fmt.Sprintf("%v", om.OrderFeeWeight))
	builder.WriteString(", ")
	builder.WriteString("shop_manager=")
	builder.WriteString(om.ShopManager)
	builder.WriteString(", ")
	builder.WriteString("push_status=")
	builder.WriteString(fmt.Sprintf("%v", om.PushStatus))
	builder.WriteString(", ")
	builder.WriteString("buyer_paid_shipping_fee=")
	builder.WriteString(fmt.Sprintf("%v", om.BuyerPaidShippingFee))
	builder.WriteByte(')')
	return builder.String()
}

// OrderMains is a parsable slice of OrderMain.
type OrderMains []*OrderMain

func (om OrderMains) config(cfg config) {
	for _i := range om {
		om[_i].config = cfg
	}
}
