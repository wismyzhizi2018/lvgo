// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"order/ent/ordermain"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderMainCreate is the builder for creating a OrderMain entity.
type OrderMainCreate struct {
	config
	mutation *OrderMainMutation
	hooks    []Hook
}

// SetOrderCode sets the "order_code" field.
func (omc *OrderMainCreate) SetOrderCode(s string) *OrderMainCreate {
	omc.mutation.SetOrderCode(s)
	return omc
}

// SetNillableOrderCode sets the "order_code" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderCode(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetOrderCode(*s)
	}
	return omc
}

// SetOrderStatus sets the "order_status" field.
func (omc *OrderMainCreate) SetOrderStatus(i int8) *OrderMainCreate {
	omc.mutation.SetOrderStatus(i)
	return omc
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderStatus(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetOrderStatus(*i)
	}
	return omc
}

// SetExceptionType sets the "exception_type" field.
func (omc *OrderMainCreate) SetExceptionType(i int8) *OrderMainCreate {
	omc.mutation.SetExceptionType(i)
	return omc
}

// SetStoreOrderCode sets the "store_order_code" field.
func (omc *OrderMainCreate) SetStoreOrderCode(s string) *OrderMainCreate {
	omc.mutation.SetStoreOrderCode(s)
	return omc
}

// SetNillableStoreOrderCode sets the "store_order_code" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableStoreOrderCode(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetStoreOrderCode(*s)
	}
	return omc
}

// SetPlatform sets the "platform" field.
func (omc *OrderMainCreate) SetPlatform(s string) *OrderMainCreate {
	omc.mutation.SetPlatform(s)
	return omc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillablePlatform(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetPlatform(*s)
	}
	return omc
}

// SetShopName sets the "shop_name" field.
func (omc *OrderMainCreate) SetShopName(s string) *OrderMainCreate {
	omc.mutation.SetShopName(s)
	return omc
}

// SetNillableShopName sets the "shop_name" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShopName(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShopName(*s)
	}
	return omc
}

// SetShipFirstName sets the "ship_first_name" field.
func (omc *OrderMainCreate) SetShipFirstName(s string) *OrderMainCreate {
	omc.mutation.SetShipFirstName(s)
	return omc
}

// SetNillableShipFirstName sets the "ship_first_name" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipFirstName(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipFirstName(*s)
	}
	return omc
}

// SetShipLastName sets the "ship_last_name" field.
func (omc *OrderMainCreate) SetShipLastName(s string) *OrderMainCreate {
	omc.mutation.SetShipLastName(s)
	return omc
}

// SetNillableShipLastName sets the "ship_last_name" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipLastName(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipLastName(*s)
	}
	return omc
}

// SetShipCompany sets the "ship_company" field.
func (omc *OrderMainCreate) SetShipCompany(s string) *OrderMainCreate {
	omc.mutation.SetShipCompany(s)
	return omc
}

// SetNillableShipCompany sets the "ship_company" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipCompany(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipCompany(*s)
	}
	return omc
}

// SetShipStreet1 sets the "ship_street1" field.
func (omc *OrderMainCreate) SetShipStreet1(s string) *OrderMainCreate {
	omc.mutation.SetShipStreet1(s)
	return omc
}

// SetNillableShipStreet1 sets the "ship_street1" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipStreet1(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipStreet1(*s)
	}
	return omc
}

// SetShipStreet2 sets the "ship_street2" field.
func (omc *OrderMainCreate) SetShipStreet2(s string) *OrderMainCreate {
	omc.mutation.SetShipStreet2(s)
	return omc
}

// SetNillableShipStreet2 sets the "ship_street2" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipStreet2(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipStreet2(*s)
	}
	return omc
}

// SetShipCity sets the "ship_city" field.
func (omc *OrderMainCreate) SetShipCity(s string) *OrderMainCreate {
	omc.mutation.SetShipCity(s)
	return omc
}

// SetNillableShipCity sets the "ship_city" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipCity(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipCity(*s)
	}
	return omc
}

// SetShipState sets the "ship_state" field.
func (omc *OrderMainCreate) SetShipState(s string) *OrderMainCreate {
	omc.mutation.SetShipState(s)
	return omc
}

// SetNillableShipState sets the "ship_state" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipState(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipState(*s)
	}
	return omc
}

// SetShipZip sets the "ship_zip" field.
func (omc *OrderMainCreate) SetShipZip(s string) *OrderMainCreate {
	omc.mutation.SetShipZip(s)
	return omc
}

// SetNillableShipZip sets the "ship_zip" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipZip(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipZip(*s)
	}
	return omc
}

// SetShipCountry sets the "ship_country" field.
func (omc *OrderMainCreate) SetShipCountry(s string) *OrderMainCreate {
	omc.mutation.SetShipCountry(s)
	return omc
}

// SetNillableShipCountry sets the "ship_country" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipCountry(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipCountry(*s)
	}
	return omc
}

// SetShipCountryCode sets the "ship_country_code" field.
func (omc *OrderMainCreate) SetShipCountryCode(s string) *OrderMainCreate {
	omc.mutation.SetShipCountryCode(s)
	return omc
}

// SetNillableShipCountryCode sets the "ship_country_code" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipCountryCode(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipCountryCode(*s)
	}
	return omc
}

// SetShipPhone sets the "ship_phone" field.
func (omc *OrderMainCreate) SetShipPhone(s string) *OrderMainCreate {
	omc.mutation.SetShipPhone(s)
	return omc
}

// SetNillableShipPhone sets the "ship_phone" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipPhone(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipPhone(*s)
	}
	return omc
}

// SetShipFax sets the "ship_fax" field.
func (omc *OrderMainCreate) SetShipFax(s string) *OrderMainCreate {
	omc.mutation.SetShipFax(s)
	return omc
}

// SetNillableShipFax sets the "ship_fax" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipFax(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipFax(*s)
	}
	return omc
}

// SetShipRemark sets the "ship_remark" field.
func (omc *OrderMainCreate) SetShipRemark(s string) *OrderMainCreate {
	omc.mutation.SetShipRemark(s)
	return omc
}

// SetNillableShipRemark sets the "ship_remark" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipRemark(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipRemark(*s)
	}
	return omc
}

// SetShipHouse sets the "ship_house" field.
func (omc *OrderMainCreate) SetShipHouse(s string) *OrderMainCreate {
	omc.mutation.SetShipHouse(s)
	return omc
}

// SetNillableShipHouse sets the "ship_house" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipHouse(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipHouse(*s)
	}
	return omc
}

// SetShipCertificateCode sets the "ship_certificate_code" field.
func (omc *OrderMainCreate) SetShipCertificateCode(s string) *OrderMainCreate {
	omc.mutation.SetShipCertificateCode(s)
	return omc
}

// SetNillableShipCertificateCode sets the "ship_certificate_code" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShipCertificateCode(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShipCertificateCode(*s)
	}
	return omc
}

// SetOrderUserEmail sets the "order_user_email" field.
func (omc *OrderMainCreate) SetOrderUserEmail(s string) *OrderMainCreate {
	omc.mutation.SetOrderUserEmail(s)
	return omc
}

// SetNillableOrderUserEmail sets the "order_user_email" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderUserEmail(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetOrderUserEmail(*s)
	}
	return omc
}

// SetOrdersUserID sets the "orders_user_id" field.
func (omc *OrderMainCreate) SetOrdersUserID(s string) *OrderMainCreate {
	omc.mutation.SetOrdersUserID(s)
	return omc
}

// SetCurrency sets the "currency" field.
func (omc *OrderMainCreate) SetCurrency(s string) *OrderMainCreate {
	omc.mutation.SetCurrency(s)
	return omc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableCurrency(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetCurrency(*s)
	}
	return omc
}

// SetCurrenciesID sets the "currencies_id" field.
func (omc *OrderMainCreate) SetCurrenciesID(i int32) *OrderMainCreate {
	omc.mutation.SetCurrenciesID(i)
	return omc
}

// SetNillableCurrenciesID sets the "currencies_id" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableCurrenciesID(i *int32) *OrderMainCreate {
	if i != nil {
		omc.SetCurrenciesID(*i)
	}
	return omc
}

// SetCurrencyRate sets the "currency_rate" field.
func (omc *OrderMainCreate) SetCurrencyRate(f float64) *OrderMainCreate {
	omc.mutation.SetCurrencyRate(f)
	return omc
}

// SetNillableCurrencyRate sets the "currency_rate" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableCurrencyRate(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetCurrencyRate(*f)
	}
	return omc
}

// SetShippingMethod sets the "shipping_method" field.
func (omc *OrderMainCreate) SetShippingMethod(s string) *OrderMainCreate {
	omc.mutation.SetShippingMethod(s)
	return omc
}

// SetNillableShippingMethod sets the "shipping_method" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShippingMethod(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShippingMethod(*s)
	}
	return omc
}

// SetShippingMethodOrig sets the "shipping_method_orig" field.
func (omc *OrderMainCreate) SetShippingMethodOrig(s string) *OrderMainCreate {
	omc.mutation.SetShippingMethodOrig(s)
	return omc
}

// SetNillableShippingMethodOrig sets the "shipping_method_orig" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShippingMethodOrig(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShippingMethodOrig(*s)
	}
	return omc
}

// SetShippingMethodName sets the "shipping_method_name" field.
func (omc *OrderMainCreate) SetShippingMethodName(s string) *OrderMainCreate {
	omc.mutation.SetShippingMethodName(s)
	return omc
}

// SetNillableShippingMethodName sets the "shipping_method_name" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShippingMethodName(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShippingMethodName(*s)
	}
	return omc
}

// SetGrandTotal sets the "grand_total" field.
func (omc *OrderMainCreate) SetGrandTotal(f float64) *OrderMainCreate {
	omc.mutation.SetGrandTotal(f)
	return omc
}

// SetNillableGrandTotal sets the "grand_total" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableGrandTotal(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetGrandTotal(*f)
	}
	return omc
}

// SetTrackNumber sets the "track_number" field.
func (omc *OrderMainCreate) SetTrackNumber(s string) *OrderMainCreate {
	omc.mutation.SetTrackNumber(s)
	return omc
}

// SetNillableTrackNumber sets the "track_number" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableTrackNumber(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetTrackNumber(*s)
	}
	return omc
}

// SetFollowNumber sets the "follow_number" field.
func (omc *OrderMainCreate) SetFollowNumber(s string) *OrderMainCreate {
	omc.mutation.SetFollowNumber(s)
	return omc
}

// SetNillableFollowNumber sets the "follow_number" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableFollowNumber(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetFollowNumber(*s)
	}
	return omc
}

// SetDatePayment sets the "date_payment" field.
func (omc *OrderMainCreate) SetDatePayment(t time.Time) *OrderMainCreate {
	omc.mutation.SetDatePayment(t)
	return omc
}

// SetTransactionNumber sets the "transaction_number" field.
func (omc *OrderMainCreate) SetTransactionNumber(s string) *OrderMainCreate {
	omc.mutation.SetTransactionNumber(s)
	return omc
}

// SetNillableTransactionNumber sets the "transaction_number" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableTransactionNumber(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetTransactionNumber(*s)
	}
	return omc
}

// SetTransactionFee sets the "transaction_fee" field.
func (omc *OrderMainCreate) SetTransactionFee(f float64) *OrderMainCreate {
	omc.mutation.SetTransactionFee(f)
	return omc
}

// SetNillableTransactionFee sets the "transaction_fee" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableTransactionFee(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetTransactionFee(*f)
	}
	return omc
}

// SetUpdateTrackTime sets the "update_track_time" field.
func (omc *OrderMainCreate) SetUpdateTrackTime(t time.Time) *OrderMainCreate {
	omc.mutation.SetUpdateTrackTime(t)
	return omc
}

// SetUpdateFollowTime sets the "update_follow_time" field.
func (omc *OrderMainCreate) SetUpdateFollowTime(t time.Time) *OrderMainCreate {
	omc.mutation.SetUpdateFollowTime(t)
	return omc
}

// SetShippingCost sets the "shipping_cost" field.
func (omc *OrderMainCreate) SetShippingCost(f float64) *OrderMainCreate {
	omc.mutation.SetShippingCost(f)
	return omc
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShippingCost(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetShippingCost(*f)
	}
	return omc
}

// SetShippingCostExt sets the "shipping_cost_ext" field.
func (omc *OrderMainCreate) SetShippingCostExt(f float64) *OrderMainCreate {
	omc.mutation.SetShippingCostExt(f)
	return omc
}

// SetNillableShippingCostExt sets the "shipping_cost_ext" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShippingCostExt(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetShippingCostExt(*f)
	}
	return omc
}

// SetTaxesNumber sets the "taxes_number" field.
func (omc *OrderMainCreate) SetTaxesNumber(s string) *OrderMainCreate {
	omc.mutation.SetTaxesNumber(s)
	return omc
}

// SetNillableTaxesNumber sets the "taxes_number" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableTaxesNumber(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetTaxesNumber(*s)
	}
	return omc
}

// SetTax sets the "tax" field.
func (omc *OrderMainCreate) SetTax(f float64) *OrderMainCreate {
	omc.mutation.SetTax(f)
	return omc
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableTax(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetTax(*f)
	}
	return omc
}

// SetOrderDiscount sets the "order_discount" field.
func (omc *OrderMainCreate) SetOrderDiscount(f float64) *OrderMainCreate {
	omc.mutation.SetOrderDiscount(f)
	return omc
}

// SetNillableOrderDiscount sets the "order_discount" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderDiscount(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOrderDiscount(*f)
	}
	return omc
}

// SetInsurance sets the "insurance" field.
func (omc *OrderMainCreate) SetInsurance(f float64) *OrderMainCreate {
	omc.mutation.SetInsurance(f)
	return omc
}

// SetNillableInsurance sets the "insurance" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableInsurance(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetInsurance(*f)
	}
	return omc
}

// SetOrderWeight sets the "order_weight" field.
func (omc *OrderMainCreate) SetOrderWeight(f float64) *OrderMainCreate {
	omc.mutation.SetOrderWeight(f)
	return omc
}

// SetNillableOrderWeight sets the "order_weight" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderWeight(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOrderWeight(*f)
	}
	return omc
}

// SetOrderCretateType sets the "order_cretate_type" field.
func (omc *OrderMainCreate) SetOrderCretateType(oct ordermain.OrderCretateType) *OrderMainCreate {
	omc.mutation.SetOrderCretateType(oct)
	return omc
}

// SetNillableOrderCretateType sets the "order_cretate_type" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderCretateType(oct *ordermain.OrderCretateType) *OrderMainCreate {
	if oct != nil {
		omc.SetOrderCretateType(*oct)
	}
	return omc
}

// SetOrderType sets the "order_type" field.
func (omc *OrderMainCreate) SetOrderType(i int8) *OrderMainCreate {
	omc.mutation.SetOrderType(i)
	return omc
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderType(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetOrderType(*i)
	}
	return omc
}

// SetStoreCreatedAt sets the "store_created_at" field.
func (omc *OrderMainCreate) SetStoreCreatedAt(t time.Time) *OrderMainCreate {
	omc.mutation.SetStoreCreatedAt(t)
	return omc
}

// SetSubOrdersCode sets the "sub_orders_code" field.
func (omc *OrderMainCreate) SetSubOrdersCode(s string) *OrderMainCreate {
	omc.mutation.SetSubOrdersCode(s)
	return omc
}

// SetNillableSubOrdersCode sets the "sub_orders_code" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableSubOrdersCode(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetSubOrdersCode(*s)
	}
	return omc
}

// SetUpdatedAt sets the "updated_at" field.
func (omc *OrderMainCreate) SetUpdatedAt(t time.Time) *OrderMainCreate {
	omc.mutation.SetUpdatedAt(t)
	return omc
}

// SetCreatedAt sets the "created_at" field.
func (omc *OrderMainCreate) SetCreatedAt(t time.Time) *OrderMainCreate {
	omc.mutation.SetCreatedAt(t)
	return omc
}

// SetWarehouseID sets the "warehouse_id" field.
func (omc *OrderMainCreate) SetWarehouseID(s string) *OrderMainCreate {
	omc.mutation.SetWarehouseID(s)
	return omc
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableWarehouseID(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetWarehouseID(*s)
	}
	return omc
}

// SetOrderListType sets the "order_list_type" field.
func (omc *OrderMainCreate) SetOrderListType(i int8) *OrderMainCreate {
	omc.mutation.SetOrderListType(i)
	return omc
}

// SetNillableOrderListType sets the "order_list_type" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderListType(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetOrderListType(*i)
	}
	return omc
}

// SetOrderBatchNo sets the "order_batch_no" field.
func (omc *OrderMainCreate) SetOrderBatchNo(s string) *OrderMainCreate {
	omc.mutation.SetOrderBatchNo(s)
	return omc
}

// SetNillableOrderBatchNo sets the "order_batch_no" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderBatchNo(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetOrderBatchNo(*s)
	}
	return omc
}

// SetShopID sets the "shop_id" field.
func (omc *OrderMainCreate) SetShopID(i int32) *OrderMainCreate {
	omc.mutation.SetShopID(i)
	return omc
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShopID(i *int32) *OrderMainCreate {
	if i != nil {
		omc.SetShopID(*i)
	}
	return omc
}

// SetSubtotal sets the "subtotal" field.
func (omc *OrderMainCreate) SetSubtotal(f float64) *OrderMainCreate {
	omc.mutation.SetSubtotal(f)
	return omc
}

// SetShippingFree sets the "shipping_free" field.
func (omc *OrderMainCreate) SetShippingFree(f float64) *OrderMainCreate {
	omc.mutation.SetShippingFree(f)
	return omc
}

// SetOrderCost sets the "order_cost" field.
func (omc *OrderMainCreate) SetOrderCost(f float64) *OrderMainCreate {
	omc.mutation.SetOrderCost(f)
	return omc
}

// SetNillableOrderCost sets the "order_cost" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderCost(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOrderCost(*f)
	}
	return omc
}

// SetOrderProfit sets the "order_profit" field.
func (omc *OrderMainCreate) SetOrderProfit(f float64) *OrderMainCreate {
	omc.mutation.SetOrderProfit(f)
	return omc
}

// SetNillableOrderProfit sets the "order_profit" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderProfit(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOrderProfit(*f)
	}
	return omc
}

// SetShipDate sets the "ship_date" field.
func (omc *OrderMainCreate) SetShipDate(t time.Time) *OrderMainCreate {
	omc.mutation.SetShipDate(t)
	return omc
}

// SetCommission sets the "commission" field.
func (omc *OrderMainCreate) SetCommission(f float64) *OrderMainCreate {
	omc.mutation.SetCommission(f)
	return omc
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableCommission(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetCommission(*f)
	}
	return omc
}

// SetInterceptState sets the "intercept_state" field.
func (omc *OrderMainCreate) SetInterceptState(i int8) *OrderMainCreate {
	omc.mutation.SetInterceptState(i)
	return omc
}

// SetNillableInterceptState sets the "intercept_state" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableInterceptState(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetInterceptState(*i)
	}
	return omc
}

// SetSendOrderTime sets the "send_order_time" field.
func (omc *OrderMainCreate) SetSendOrderTime(t time.Time) *OrderMainCreate {
	omc.mutation.SetSendOrderTime(t)
	return omc
}

// SetSendOrderUser sets the "send_order_user" field.
func (omc *OrderMainCreate) SetSendOrderUser(s string) *OrderMainCreate {
	omc.mutation.SetSendOrderUser(s)
	return omc
}

// SetProviderType sets the "provider_type" field.
func (omc *OrderMainCreate) SetProviderType(i int8) *OrderMainCreate {
	omc.mutation.SetProviderType(i)
	return omc
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableProviderType(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetProviderType(*i)
	}
	return omc
}

// SetOrderPackCost sets the "order_pack_cost" field.
func (omc *OrderMainCreate) SetOrderPackCost(f float64) *OrderMainCreate {
	omc.mutation.SetOrderPackCost(f)
	return omc
}

// SetNillableOrderPackCost sets the "order_pack_cost" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderPackCost(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOrderPackCost(*f)
	}
	return omc
}

// SetPaymentFixCost sets the "payment_fix_cost" field.
func (omc *OrderMainCreate) SetPaymentFixCost(f float64) *OrderMainCreate {
	omc.mutation.SetPaymentFixCost(f)
	return omc
}

// SetNillablePaymentFixCost sets the "payment_fix_cost" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillablePaymentFixCost(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetPaymentFixCost(*f)
	}
	return omc
}

// SetIsFbaBehalf sets the "is_fba_behalf" field.
func (omc *OrderMainCreate) SetIsFbaBehalf(i int8) *OrderMainCreate {
	omc.mutation.SetIsFbaBehalf(i)
	return omc
}

// SetNillableIsFbaBehalf sets the "is_fba_behalf" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableIsFbaBehalf(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetIsFbaBehalf(*i)
	}
	return omc
}

// SetFulfillType sets the "fulfill_type" field.
func (omc *OrderMainCreate) SetFulfillType(i int8) *OrderMainCreate {
	omc.mutation.SetFulfillType(i)
	return omc
}

// SetNillableFulfillType sets the "fulfill_type" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableFulfillType(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetFulfillType(*i)
	}
	return omc
}

// SetFulfillException sets the "fulfill_exception" field.
func (omc *OrderMainCreate) SetFulfillException(i int8) *OrderMainCreate {
	omc.mutation.SetFulfillException(i)
	return omc
}

// SetNillableFulfillException sets the "fulfill_exception" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableFulfillException(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetFulfillException(*i)
	}
	return omc
}

// SetIossNumber sets the "ioss_number" field.
func (omc *OrderMainCreate) SetIossNumber(s string) *OrderMainCreate {
	omc.mutation.SetIossNumber(s)
	return omc
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableIossNumber(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetIossNumber(*s)
	}
	return omc
}

// SetWarehouseShopID sets the "warehouse_shop_id" field.
func (omc *OrderMainCreate) SetWarehouseShopID(i int32) *OrderMainCreate {
	omc.mutation.SetWarehouseShopID(i)
	return omc
}

// SetSalesRecordNumber sets the "sales_record_number" field.
func (omc *OrderMainCreate) SetSalesRecordNumber(s string) *OrderMainCreate {
	omc.mutation.SetSalesRecordNumber(s)
	return omc
}

// SetNillableSalesRecordNumber sets the "sales_record_number" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableSalesRecordNumber(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetSalesRecordNumber(*s)
	}
	return omc
}

// SetTicketCode sets the "ticket_code" field.
func (omc *OrderMainCreate) SetTicketCode(s string) *OrderMainCreate {
	omc.mutation.SetTicketCode(s)
	return omc
}

// SetNillableTicketCode sets the "ticket_code" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableTicketCode(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetTicketCode(*s)
	}
	return omc
}

// SetOverseasWarehouseStatus sets the "overseas_warehouse_status" field.
func (omc *OrderMainCreate) SetOverseasWarehouseStatus(s string) *OrderMainCreate {
	omc.mutation.SetOverseasWarehouseStatus(s)
	return omc
}

// SetNillableOverseasWarehouseStatus sets the "overseas_warehouse_status" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOverseasWarehouseStatus(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetOverseasWarehouseStatus(*s)
	}
	return omc
}

// SetPayPalID sets the "pay_pal_id" field.
func (omc *OrderMainCreate) SetPayPalID(s string) *OrderMainCreate {
	omc.mutation.SetPayPalID(s)
	return omc
}

// SetNillablePayPalID sets the "pay_pal_id" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillablePayPalID(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetPayPalID(*s)
	}
	return omc
}

// SetIsUpdate sets the "is_update" field.
func (omc *OrderMainCreate) SetIsUpdate(i int8) *OrderMainCreate {
	omc.mutation.SetIsUpdate(i)
	return omc
}

// SetNillableIsUpdate sets the "is_update" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableIsUpdate(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetIsUpdate(*i)
	}
	return omc
}

// SetOrderSaleState sets the "order_sale_state" field.
func (omc *OrderMainCreate) SetOrderSaleState(i int8) *OrderMainCreate {
	omc.mutation.SetOrderSaleState(i)
	return omc
}

// SetNillableOrderSaleState sets the "order_sale_state" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderSaleState(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetOrderSaleState(*i)
	}
	return omc
}

// SetProductCost sets the "product_cost" field.
func (omc *OrderMainCreate) SetProductCost(f float64) *OrderMainCreate {
	omc.mutation.SetProductCost(f)
	return omc
}

// SetNillableProductCost sets the "product_cost" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableProductCost(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetProductCost(*f)
	}
	return omc
}

// SetHeadCost sets the "head_cost" field.
func (omc *OrderMainCreate) SetHeadCost(f float64) *OrderMainCreate {
	omc.mutation.SetHeadCost(f)
	return omc
}

// SetNillableHeadCost sets the "head_cost" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableHeadCost(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetHeadCost(*f)
	}
	return omc
}

// SetCarrierCode sets the "carrier_code" field.
func (omc *OrderMainCreate) SetCarrierCode(s string) *OrderMainCreate {
	omc.mutation.SetCarrierCode(s)
	return omc
}

// SetNillableCarrierCode sets the "carrier_code" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableCarrierCode(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetCarrierCode(*s)
	}
	return omc
}

// SetWithheldTax sets the "withheld_tax" field.
func (omc *OrderMainCreate) SetWithheldTax(f float64) *OrderMainCreate {
	omc.mutation.SetWithheldTax(f)
	return omc
}

// SetNillableWithheldTax sets the "withheld_tax" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableWithheldTax(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetWithheldTax(*f)
	}
	return omc
}

// SetOtherFee sets the "other_fee" field.
func (omc *OrderMainCreate) SetOtherFee(f float64) *OrderMainCreate {
	omc.mutation.SetOtherFee(f)
	return omc
}

// SetNillableOtherFee sets the "other_fee" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOtherFee(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOtherFee(*f)
	}
	return omc
}

// SetEscrowTax sets the "escrow_tax" field.
func (omc *OrderMainCreate) SetEscrowTax(f float64) *OrderMainCreate {
	omc.mutation.SetEscrowTax(f)
	return omc
}

// SetNillableEscrowTax sets the "escrow_tax" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableEscrowTax(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetEscrowTax(*f)
	}
	return omc
}

// SetFinalProductVatTax sets the "final_product_vat_tax" field.
func (omc *OrderMainCreate) SetFinalProductVatTax(f float64) *OrderMainCreate {
	omc.mutation.SetFinalProductVatTax(f)
	return omc
}

// SetNillableFinalProductVatTax sets the "final_product_vat_tax" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableFinalProductVatTax(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetFinalProductVatTax(*f)
	}
	return omc
}

// SetFinalShippingVatTax sets the "final_shipping_vat_tax" field.
func (omc *OrderMainCreate) SetFinalShippingVatTax(f float64) *OrderMainCreate {
	omc.mutation.SetFinalShippingVatTax(f)
	return omc
}

// SetNillableFinalShippingVatTax sets the "final_shipping_vat_tax" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableFinalShippingVatTax(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetFinalShippingVatTax(*f)
	}
	return omc
}

// SetShippingCharge sets the "shipping_charge" field.
func (omc *OrderMainCreate) SetShippingCharge(f float64) *OrderMainCreate {
	omc.mutation.SetShippingCharge(f)
	return omc
}

// SetNillableShippingCharge sets the "shipping_charge" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShippingCharge(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetShippingCharge(*f)
	}
	return omc
}

// SetVoucherPlatform sets the "voucher_platform" field.
func (omc *OrderMainCreate) SetVoucherPlatform(f float64) *OrderMainCreate {
	omc.mutation.SetVoucherPlatform(f)
	return omc
}

// SetNillableVoucherPlatform sets the "voucher_platform" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableVoucherPlatform(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetVoucherPlatform(*f)
	}
	return omc
}

// SetOverTimeLeft sets the "over_time_left" field.
func (omc *OrderMainCreate) SetOverTimeLeft(t time.Time) *OrderMainCreate {
	omc.mutation.SetOverTimeLeft(t)
	return omc
}

// SetNillableOverTimeLeft sets the "over_time_left" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOverTimeLeft(t *time.Time) *OrderMainCreate {
	if t != nil {
		omc.SetOverTimeLeft(*t)
	}
	return omc
}

// SetShippingRebate sets the "shipping_rebate" field.
func (omc *OrderMainCreate) SetShippingRebate(f float64) *OrderMainCreate {
	omc.mutation.SetShippingRebate(f)
	return omc
}

// SetNillableShippingRebate sets the "shipping_rebate" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShippingRebate(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetShippingRebate(*f)
	}
	return omc
}

// SetLabelList sets the "label_list" field.
func (omc *OrderMainCreate) SetLabelList(s string) *OrderMainCreate {
	omc.mutation.SetLabelList(s)
	return omc
}

// SetNillableLabelList sets the "label_list" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableLabelList(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetLabelList(*s)
	}
	return omc
}

// SetOutRealGrandTotal sets the "out_real_grand_total" field.
func (omc *OrderMainCreate) SetOutRealGrandTotal(f float64) *OrderMainCreate {
	omc.mutation.SetOutRealGrandTotal(f)
	return omc
}

// SetNillableOutRealGrandTotal sets the "out_real_grand_total" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOutRealGrandTotal(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOutRealGrandTotal(*f)
	}
	return omc
}

// SetBillList sets the "bill_list" field.
func (omc *OrderMainCreate) SetBillList(s string) *OrderMainCreate {
	omc.mutation.SetBillList(s)
	return omc
}

// SetNillableBillList sets the "bill_list" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableBillList(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetBillList(*s)
	}
	return omc
}

// SetOutGrandTotal sets the "out_grand_total" field.
func (omc *OrderMainCreate) SetOutGrandTotal(f float64) *OrderMainCreate {
	omc.mutation.SetOutGrandTotal(f)
	return omc
}

// SetNillableOutGrandTotal sets the "out_grand_total" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOutGrandTotal(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOutGrandTotal(*f)
	}
	return omc
}

// SetDeliverShop sets the "deliver_shop" field.
func (omc *OrderMainCreate) SetDeliverShop(s string) *OrderMainCreate {
	omc.mutation.SetDeliverShop(s)
	return omc
}

// SetNillableDeliverShop sets the "deliver_shop" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableDeliverShop(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetDeliverShop(*s)
	}
	return omc
}

// SetShippingCostFinal sets the "shipping_cost_final" field.
func (omc *OrderMainCreate) SetShippingCostFinal(f float64) *OrderMainCreate {
	omc.mutation.SetShippingCostFinal(f)
	return omc
}

// SetNillableShippingCostFinal sets the "shipping_cost_final" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShippingCostFinal(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetShippingCostFinal(*f)
	}
	return omc
}

// SetShippingFreeAbout sets the "shipping_free_about" field.
func (omc *OrderMainCreate) SetShippingFreeAbout(f float64) *OrderMainCreate {
	omc.mutation.SetShippingFreeAbout(f)
	return omc
}

// SetNillableShippingFreeAbout sets the "shipping_free_about" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShippingFreeAbout(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetShippingFreeAbout(*f)
	}
	return omc
}

// SetCreateOrderStatus sets the "create_order_status" field.
func (omc *OrderMainCreate) SetCreateOrderStatus(i int8) *OrderMainCreate {
	omc.mutation.SetCreateOrderStatus(i)
	return omc
}

// SetNillableCreateOrderStatus sets the "create_order_status" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableCreateOrderStatus(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetCreateOrderStatus(*i)
	}
	return omc
}

// SetFinanceTime sets the "finance_time" field.
func (omc *OrderMainCreate) SetFinanceTime(t time.Time) *OrderMainCreate {
	omc.mutation.SetFinanceTime(t)
	return omc
}

// SetIsQcc sets the "is_qcc" field.
func (omc *OrderMainCreate) SetIsQcc(i int8) *OrderMainCreate {
	omc.mutation.SetIsQcc(i)
	return omc
}

// SetNillableIsQcc sets the "is_qcc" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableIsQcc(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetIsQcc(*i)
	}
	return omc
}

// SetRejectReason sets the "reject_reason" field.
func (omc *OrderMainCreate) SetRejectReason(s string) *OrderMainCreate {
	omc.mutation.SetRejectReason(s)
	return omc
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableRejectReason(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetRejectReason(*s)
	}
	return omc
}

// SetOrderLocalTime sets the "order_local_time" field.
func (omc *OrderMainCreate) SetOrderLocalTime(t time.Time) *OrderMainCreate {
	omc.mutation.SetOrderLocalTime(t)
	return omc
}

// SetDiscountCode sets the "discount_code" field.
func (omc *OrderMainCreate) SetDiscountCode(s string) *OrderMainCreate {
	omc.mutation.SetDiscountCode(s)
	return omc
}

// SetNillableDiscountCode sets the "discount_code" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableDiscountCode(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetDiscountCode(*s)
	}
	return omc
}

// SetStockoutStatus sets the "stockout_status" field.
func (omc *OrderMainCreate) SetStockoutStatus(i int8) *OrderMainCreate {
	omc.mutation.SetStockoutStatus(i)
	return omc
}

// SetNillableStockoutStatus sets the "stockout_status" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableStockoutStatus(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetStockoutStatus(*i)
	}
	return omc
}

// SetOrderLength sets the "order_length" field.
func (omc *OrderMainCreate) SetOrderLength(f float64) *OrderMainCreate {
	omc.mutation.SetOrderLength(f)
	return omc
}

// SetNillableOrderLength sets the "order_length" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderLength(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOrderLength(*f)
	}
	return omc
}

// SetOrderWidth sets the "order_width" field.
func (omc *OrderMainCreate) SetOrderWidth(f float64) *OrderMainCreate {
	omc.mutation.SetOrderWidth(f)
	return omc
}

// SetNillableOrderWidth sets the "order_width" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderWidth(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOrderWidth(*f)
	}
	return omc
}

// SetOrderHeight sets the "order_height" field.
func (omc *OrderMainCreate) SetOrderHeight(f float64) *OrderMainCreate {
	omc.mutation.SetOrderHeight(f)
	return omc
}

// SetNillableOrderHeight sets the "order_height" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderHeight(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOrderHeight(*f)
	}
	return omc
}

// SetFirstSide sets the "first_side" field.
func (omc *OrderMainCreate) SetFirstSide(f float64) *OrderMainCreate {
	omc.mutation.SetFirstSide(f)
	return omc
}

// SetNillableFirstSide sets the "first_side" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableFirstSide(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetFirstSide(*f)
	}
	return omc
}

// SetSecondSide sets the "second_side" field.
func (omc *OrderMainCreate) SetSecondSide(f float64) *OrderMainCreate {
	omc.mutation.SetSecondSide(f)
	return omc
}

// SetNillableSecondSide sets the "second_side" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableSecondSide(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetSecondSide(*f)
	}
	return omc
}

// SetThirdSide sets the "third_side" field.
func (omc *OrderMainCreate) SetThirdSide(f float64) *OrderMainCreate {
	omc.mutation.SetThirdSide(f)
	return omc
}

// SetNillableThirdSide sets the "third_side" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableThirdSide(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetThirdSide(*f)
	}
	return omc
}

// SetOrderFeeWeight sets the "order_fee_weight" field.
func (omc *OrderMainCreate) SetOrderFeeWeight(f float64) *OrderMainCreate {
	omc.mutation.SetOrderFeeWeight(f)
	return omc
}

// SetNillableOrderFeeWeight sets the "order_fee_weight" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableOrderFeeWeight(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetOrderFeeWeight(*f)
	}
	return omc
}

// SetShopManager sets the "shop_manager" field.
func (omc *OrderMainCreate) SetShopManager(s string) *OrderMainCreate {
	omc.mutation.SetShopManager(s)
	return omc
}

// SetNillableShopManager sets the "shop_manager" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableShopManager(s *string) *OrderMainCreate {
	if s != nil {
		omc.SetShopManager(*s)
	}
	return omc
}

// SetPushStatus sets the "push_status" field.
func (omc *OrderMainCreate) SetPushStatus(i int8) *OrderMainCreate {
	omc.mutation.SetPushStatus(i)
	return omc
}

// SetNillablePushStatus sets the "push_status" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillablePushStatus(i *int8) *OrderMainCreate {
	if i != nil {
		omc.SetPushStatus(*i)
	}
	return omc
}

// SetBuyerPaidShippingFee sets the "buyer_paid_shipping_fee" field.
func (omc *OrderMainCreate) SetBuyerPaidShippingFee(f float64) *OrderMainCreate {
	omc.mutation.SetBuyerPaidShippingFee(f)
	return omc
}

// SetNillableBuyerPaidShippingFee sets the "buyer_paid_shipping_fee" field if the given value is not nil.
func (omc *OrderMainCreate) SetNillableBuyerPaidShippingFee(f *float64) *OrderMainCreate {
	if f != nil {
		omc.SetBuyerPaidShippingFee(*f)
	}
	return omc
}

// SetID sets the "id" field.
func (omc *OrderMainCreate) SetID(i int32) *OrderMainCreate {
	omc.mutation.SetID(i)
	return omc
}

// Mutation returns the OrderMainMutation object of the builder.
func (omc *OrderMainCreate) Mutation() *OrderMainMutation {
	return omc.mutation
}

// Save creates the OrderMain in the database.
func (omc *OrderMainCreate) Save(ctx context.Context) (*OrderMain, error) {
	var (
		err  error
		node *OrderMain
	)
	omc.defaults()
	if len(omc.hooks) == 0 {
		if err = omc.check(); err != nil {
			return nil, err
		}
		node, err = omc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = omc.check(); err != nil {
				return nil, err
			}
			omc.mutation = mutation
			if node, err = omc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(omc.hooks) - 1; i >= 0; i-- {
			if omc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = omc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, omc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderMain)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderMainMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (omc *OrderMainCreate) SaveX(ctx context.Context) *OrderMain {
	v, err := omc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omc *OrderMainCreate) Exec(ctx context.Context) error {
	_, err := omc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omc *OrderMainCreate) ExecX(ctx context.Context) {
	if err := omc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (omc *OrderMainCreate) defaults() {
	if _, ok := omc.mutation.OrderCode(); !ok {
		v := ordermain.DefaultOrderCode
		omc.mutation.SetOrderCode(v)
	}
	if _, ok := omc.mutation.OrderStatus(); !ok {
		v := ordermain.DefaultOrderStatus
		omc.mutation.SetOrderStatus(v)
	}
	if _, ok := omc.mutation.StoreOrderCode(); !ok {
		v := ordermain.DefaultStoreOrderCode
		omc.mutation.SetStoreOrderCode(v)
	}
	if _, ok := omc.mutation.Platform(); !ok {
		v := ordermain.DefaultPlatform
		omc.mutation.SetPlatform(v)
	}
	if _, ok := omc.mutation.ShopName(); !ok {
		v := ordermain.DefaultShopName
		omc.mutation.SetShopName(v)
	}
	if _, ok := omc.mutation.ShipFirstName(); !ok {
		v := ordermain.DefaultShipFirstName
		omc.mutation.SetShipFirstName(v)
	}
	if _, ok := omc.mutation.ShipLastName(); !ok {
		v := ordermain.DefaultShipLastName
		omc.mutation.SetShipLastName(v)
	}
	if _, ok := omc.mutation.ShipCompany(); !ok {
		v := ordermain.DefaultShipCompany
		omc.mutation.SetShipCompany(v)
	}
	if _, ok := omc.mutation.ShipStreet1(); !ok {
		v := ordermain.DefaultShipStreet1
		omc.mutation.SetShipStreet1(v)
	}
	if _, ok := omc.mutation.ShipStreet2(); !ok {
		v := ordermain.DefaultShipStreet2
		omc.mutation.SetShipStreet2(v)
	}
	if _, ok := omc.mutation.ShipCity(); !ok {
		v := ordermain.DefaultShipCity
		omc.mutation.SetShipCity(v)
	}
	if _, ok := omc.mutation.ShipState(); !ok {
		v := ordermain.DefaultShipState
		omc.mutation.SetShipState(v)
	}
	if _, ok := omc.mutation.ShipZip(); !ok {
		v := ordermain.DefaultShipZip
		omc.mutation.SetShipZip(v)
	}
	if _, ok := omc.mutation.ShipCountry(); !ok {
		v := ordermain.DefaultShipCountry
		omc.mutation.SetShipCountry(v)
	}
	if _, ok := omc.mutation.ShipCountryCode(); !ok {
		v := ordermain.DefaultShipCountryCode
		omc.mutation.SetShipCountryCode(v)
	}
	if _, ok := omc.mutation.ShipPhone(); !ok {
		v := ordermain.DefaultShipPhone
		omc.mutation.SetShipPhone(v)
	}
	if _, ok := omc.mutation.ShipFax(); !ok {
		v := ordermain.DefaultShipFax
		omc.mutation.SetShipFax(v)
	}
	if _, ok := omc.mutation.ShipRemark(); !ok {
		v := ordermain.DefaultShipRemark
		omc.mutation.SetShipRemark(v)
	}
	if _, ok := omc.mutation.ShipHouse(); !ok {
		v := ordermain.DefaultShipHouse
		omc.mutation.SetShipHouse(v)
	}
	if _, ok := omc.mutation.ShipCertificateCode(); !ok {
		v := ordermain.DefaultShipCertificateCode
		omc.mutation.SetShipCertificateCode(v)
	}
	if _, ok := omc.mutation.OrderUserEmail(); !ok {
		v := ordermain.DefaultOrderUserEmail
		omc.mutation.SetOrderUserEmail(v)
	}
	if _, ok := omc.mutation.Currency(); !ok {
		v := ordermain.DefaultCurrency
		omc.mutation.SetCurrency(v)
	}
	if _, ok := omc.mutation.CurrenciesID(); !ok {
		v := ordermain.DefaultCurrenciesID
		omc.mutation.SetCurrenciesID(v)
	}
	if _, ok := omc.mutation.CurrencyRate(); !ok {
		v := ordermain.DefaultCurrencyRate
		omc.mutation.SetCurrencyRate(v)
	}
	if _, ok := omc.mutation.ShippingMethod(); !ok {
		v := ordermain.DefaultShippingMethod
		omc.mutation.SetShippingMethod(v)
	}
	if _, ok := omc.mutation.ShippingMethodOrig(); !ok {
		v := ordermain.DefaultShippingMethodOrig
		omc.mutation.SetShippingMethodOrig(v)
	}
	if _, ok := omc.mutation.ShippingMethodName(); !ok {
		v := ordermain.DefaultShippingMethodName
		omc.mutation.SetShippingMethodName(v)
	}
	if _, ok := omc.mutation.GrandTotal(); !ok {
		v := ordermain.DefaultGrandTotal
		omc.mutation.SetGrandTotal(v)
	}
	if _, ok := omc.mutation.TrackNumber(); !ok {
		v := ordermain.DefaultTrackNumber
		omc.mutation.SetTrackNumber(v)
	}
	if _, ok := omc.mutation.FollowNumber(); !ok {
		v := ordermain.DefaultFollowNumber
		omc.mutation.SetFollowNumber(v)
	}
	if _, ok := omc.mutation.TransactionNumber(); !ok {
		v := ordermain.DefaultTransactionNumber
		omc.mutation.SetTransactionNumber(v)
	}
	if _, ok := omc.mutation.TransactionFee(); !ok {
		v := ordermain.DefaultTransactionFee
		omc.mutation.SetTransactionFee(v)
	}
	if _, ok := omc.mutation.ShippingCost(); !ok {
		v := ordermain.DefaultShippingCost
		omc.mutation.SetShippingCost(v)
	}
	if _, ok := omc.mutation.ShippingCostExt(); !ok {
		v := ordermain.DefaultShippingCostExt
		omc.mutation.SetShippingCostExt(v)
	}
	if _, ok := omc.mutation.TaxesNumber(); !ok {
		v := ordermain.DefaultTaxesNumber
		omc.mutation.SetTaxesNumber(v)
	}
	if _, ok := omc.mutation.Tax(); !ok {
		v := ordermain.DefaultTax
		omc.mutation.SetTax(v)
	}
	if _, ok := omc.mutation.OrderDiscount(); !ok {
		v := ordermain.DefaultOrderDiscount
		omc.mutation.SetOrderDiscount(v)
	}
	if _, ok := omc.mutation.Insurance(); !ok {
		v := ordermain.DefaultInsurance
		omc.mutation.SetInsurance(v)
	}
	if _, ok := omc.mutation.OrderWeight(); !ok {
		v := ordermain.DefaultOrderWeight
		omc.mutation.SetOrderWeight(v)
	}
	if _, ok := omc.mutation.OrderCretateType(); !ok {
		v := ordermain.DefaultOrderCretateType
		omc.mutation.SetOrderCretateType(v)
	}
	if _, ok := omc.mutation.OrderType(); !ok {
		v := ordermain.DefaultOrderType
		omc.mutation.SetOrderType(v)
	}
	if _, ok := omc.mutation.SubOrdersCode(); !ok {
		v := ordermain.DefaultSubOrdersCode
		omc.mutation.SetSubOrdersCode(v)
	}
	if _, ok := omc.mutation.WarehouseID(); !ok {
		v := ordermain.DefaultWarehouseID
		omc.mutation.SetWarehouseID(v)
	}
	if _, ok := omc.mutation.OrderListType(); !ok {
		v := ordermain.DefaultOrderListType
		omc.mutation.SetOrderListType(v)
	}
	if _, ok := omc.mutation.OrderBatchNo(); !ok {
		v := ordermain.DefaultOrderBatchNo
		omc.mutation.SetOrderBatchNo(v)
	}
	if _, ok := omc.mutation.ShopID(); !ok {
		v := ordermain.DefaultShopID
		omc.mutation.SetShopID(v)
	}
	if _, ok := omc.mutation.OrderCost(); !ok {
		v := ordermain.DefaultOrderCost
		omc.mutation.SetOrderCost(v)
	}
	if _, ok := omc.mutation.OrderProfit(); !ok {
		v := ordermain.DefaultOrderProfit
		omc.mutation.SetOrderProfit(v)
	}
	if _, ok := omc.mutation.Commission(); !ok {
		v := ordermain.DefaultCommission
		omc.mutation.SetCommission(v)
	}
	if _, ok := omc.mutation.InterceptState(); !ok {
		v := ordermain.DefaultInterceptState
		omc.mutation.SetInterceptState(v)
	}
	if _, ok := omc.mutation.ProviderType(); !ok {
		v := ordermain.DefaultProviderType
		omc.mutation.SetProviderType(v)
	}
	if _, ok := omc.mutation.OrderPackCost(); !ok {
		v := ordermain.DefaultOrderPackCost
		omc.mutation.SetOrderPackCost(v)
	}
	if _, ok := omc.mutation.PaymentFixCost(); !ok {
		v := ordermain.DefaultPaymentFixCost
		omc.mutation.SetPaymentFixCost(v)
	}
	if _, ok := omc.mutation.IsFbaBehalf(); !ok {
		v := ordermain.DefaultIsFbaBehalf
		omc.mutation.SetIsFbaBehalf(v)
	}
	if _, ok := omc.mutation.FulfillType(); !ok {
		v := ordermain.DefaultFulfillType
		omc.mutation.SetFulfillType(v)
	}
	if _, ok := omc.mutation.FulfillException(); !ok {
		v := ordermain.DefaultFulfillException
		omc.mutation.SetFulfillException(v)
	}
	if _, ok := omc.mutation.IossNumber(); !ok {
		v := ordermain.DefaultIossNumber
		omc.mutation.SetIossNumber(v)
	}
	if _, ok := omc.mutation.SalesRecordNumber(); !ok {
		v := ordermain.DefaultSalesRecordNumber
		omc.mutation.SetSalesRecordNumber(v)
	}
	if _, ok := omc.mutation.TicketCode(); !ok {
		v := ordermain.DefaultTicketCode
		omc.mutation.SetTicketCode(v)
	}
	if _, ok := omc.mutation.OverseasWarehouseStatus(); !ok {
		v := ordermain.DefaultOverseasWarehouseStatus
		omc.mutation.SetOverseasWarehouseStatus(v)
	}
	if _, ok := omc.mutation.PayPalID(); !ok {
		v := ordermain.DefaultPayPalID
		omc.mutation.SetPayPalID(v)
	}
	if _, ok := omc.mutation.IsUpdate(); !ok {
		v := ordermain.DefaultIsUpdate
		omc.mutation.SetIsUpdate(v)
	}
	if _, ok := omc.mutation.OrderSaleState(); !ok {
		v := ordermain.DefaultOrderSaleState
		omc.mutation.SetOrderSaleState(v)
	}
	if _, ok := omc.mutation.ProductCost(); !ok {
		v := ordermain.DefaultProductCost
		omc.mutation.SetProductCost(v)
	}
	if _, ok := omc.mutation.HeadCost(); !ok {
		v := ordermain.DefaultHeadCost
		omc.mutation.SetHeadCost(v)
	}
	if _, ok := omc.mutation.CarrierCode(); !ok {
		v := ordermain.DefaultCarrierCode
		omc.mutation.SetCarrierCode(v)
	}
	if _, ok := omc.mutation.WithheldTax(); !ok {
		v := ordermain.DefaultWithheldTax
		omc.mutation.SetWithheldTax(v)
	}
	if _, ok := omc.mutation.OtherFee(); !ok {
		v := ordermain.DefaultOtherFee
		omc.mutation.SetOtherFee(v)
	}
	if _, ok := omc.mutation.EscrowTax(); !ok {
		v := ordermain.DefaultEscrowTax
		omc.mutation.SetEscrowTax(v)
	}
	if _, ok := omc.mutation.FinalProductVatTax(); !ok {
		v := ordermain.DefaultFinalProductVatTax
		omc.mutation.SetFinalProductVatTax(v)
	}
	if _, ok := omc.mutation.FinalShippingVatTax(); !ok {
		v := ordermain.DefaultFinalShippingVatTax
		omc.mutation.SetFinalShippingVatTax(v)
	}
	if _, ok := omc.mutation.ShippingCharge(); !ok {
		v := ordermain.DefaultShippingCharge
		omc.mutation.SetShippingCharge(v)
	}
	if _, ok := omc.mutation.VoucherPlatform(); !ok {
		v := ordermain.DefaultVoucherPlatform
		omc.mutation.SetVoucherPlatform(v)
	}
	if _, ok := omc.mutation.ShippingRebate(); !ok {
		v := ordermain.DefaultShippingRebate
		omc.mutation.SetShippingRebate(v)
	}
	if _, ok := omc.mutation.LabelList(); !ok {
		v := ordermain.DefaultLabelList
		omc.mutation.SetLabelList(v)
	}
	if _, ok := omc.mutation.OutRealGrandTotal(); !ok {
		v := ordermain.DefaultOutRealGrandTotal
		omc.mutation.SetOutRealGrandTotal(v)
	}
	if _, ok := omc.mutation.BillList(); !ok {
		v := ordermain.DefaultBillList
		omc.mutation.SetBillList(v)
	}
	if _, ok := omc.mutation.OutGrandTotal(); !ok {
		v := ordermain.DefaultOutGrandTotal
		omc.mutation.SetOutGrandTotal(v)
	}
	if _, ok := omc.mutation.DeliverShop(); !ok {
		v := ordermain.DefaultDeliverShop
		omc.mutation.SetDeliverShop(v)
	}
	if _, ok := omc.mutation.ShippingCostFinal(); !ok {
		v := ordermain.DefaultShippingCostFinal
		omc.mutation.SetShippingCostFinal(v)
	}
	if _, ok := omc.mutation.ShippingFreeAbout(); !ok {
		v := ordermain.DefaultShippingFreeAbout
		omc.mutation.SetShippingFreeAbout(v)
	}
	if _, ok := omc.mutation.CreateOrderStatus(); !ok {
		v := ordermain.DefaultCreateOrderStatus
		omc.mutation.SetCreateOrderStatus(v)
	}
	if _, ok := omc.mutation.IsQcc(); !ok {
		v := ordermain.DefaultIsQcc
		omc.mutation.SetIsQcc(v)
	}
	if _, ok := omc.mutation.RejectReason(); !ok {
		v := ordermain.DefaultRejectReason
		omc.mutation.SetRejectReason(v)
	}
	if _, ok := omc.mutation.DiscountCode(); !ok {
		v := ordermain.DefaultDiscountCode
		omc.mutation.SetDiscountCode(v)
	}
	if _, ok := omc.mutation.StockoutStatus(); !ok {
		v := ordermain.DefaultStockoutStatus
		omc.mutation.SetStockoutStatus(v)
	}
	if _, ok := omc.mutation.OrderLength(); !ok {
		v := ordermain.DefaultOrderLength
		omc.mutation.SetOrderLength(v)
	}
	if _, ok := omc.mutation.OrderWidth(); !ok {
		v := ordermain.DefaultOrderWidth
		omc.mutation.SetOrderWidth(v)
	}
	if _, ok := omc.mutation.OrderHeight(); !ok {
		v := ordermain.DefaultOrderHeight
		omc.mutation.SetOrderHeight(v)
	}
	if _, ok := omc.mutation.FirstSide(); !ok {
		v := ordermain.DefaultFirstSide
		omc.mutation.SetFirstSide(v)
	}
	if _, ok := omc.mutation.SecondSide(); !ok {
		v := ordermain.DefaultSecondSide
		omc.mutation.SetSecondSide(v)
	}
	if _, ok := omc.mutation.ThirdSide(); !ok {
		v := ordermain.DefaultThirdSide
		omc.mutation.SetThirdSide(v)
	}
	if _, ok := omc.mutation.OrderFeeWeight(); !ok {
		v := ordermain.DefaultOrderFeeWeight
		omc.mutation.SetOrderFeeWeight(v)
	}
	if _, ok := omc.mutation.ShopManager(); !ok {
		v := ordermain.DefaultShopManager
		omc.mutation.SetShopManager(v)
	}
	if _, ok := omc.mutation.PushStatus(); !ok {
		v := ordermain.DefaultPushStatus
		omc.mutation.SetPushStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omc *OrderMainCreate) check() error {
	if _, ok := omc.mutation.OrderCode(); !ok {
		return &ValidationError{Name: "order_code", err: errors.New(`ent: missing required field "OrderMain.order_code"`)}
	}
	if _, ok := omc.mutation.OrderStatus(); !ok {
		return &ValidationError{Name: "order_status", err: errors.New(`ent: missing required field "OrderMain.order_status"`)}
	}
	if _, ok := omc.mutation.ExceptionType(); !ok {
		return &ValidationError{Name: "exception_type", err: errors.New(`ent: missing required field "OrderMain.exception_type"`)}
	}
	if _, ok := omc.mutation.StoreOrderCode(); !ok {
		return &ValidationError{Name: "store_order_code", err: errors.New(`ent: missing required field "OrderMain.store_order_code"`)}
	}
	if _, ok := omc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "OrderMain.platform"`)}
	}
	if _, ok := omc.mutation.ShopName(); !ok {
		return &ValidationError{Name: "shop_name", err: errors.New(`ent: missing required field "OrderMain.shop_name"`)}
	}
	if _, ok := omc.mutation.ShipFirstName(); !ok {
		return &ValidationError{Name: "ship_first_name", err: errors.New(`ent: missing required field "OrderMain.ship_first_name"`)}
	}
	if _, ok := omc.mutation.ShipLastName(); !ok {
		return &ValidationError{Name: "ship_last_name", err: errors.New(`ent: missing required field "OrderMain.ship_last_name"`)}
	}
	if _, ok := omc.mutation.ShipCompany(); !ok {
		return &ValidationError{Name: "ship_company", err: errors.New(`ent: missing required field "OrderMain.ship_company"`)}
	}
	if _, ok := omc.mutation.ShipStreet1(); !ok {
		return &ValidationError{Name: "ship_street1", err: errors.New(`ent: missing required field "OrderMain.ship_street1"`)}
	}
	if _, ok := omc.mutation.ShipStreet2(); !ok {
		return &ValidationError{Name: "ship_street2", err: errors.New(`ent: missing required field "OrderMain.ship_street2"`)}
	}
	if _, ok := omc.mutation.ShipCity(); !ok {
		return &ValidationError{Name: "ship_city", err: errors.New(`ent: missing required field "OrderMain.ship_city"`)}
	}
	if _, ok := omc.mutation.ShipState(); !ok {
		return &ValidationError{Name: "ship_state", err: errors.New(`ent: missing required field "OrderMain.ship_state"`)}
	}
	if _, ok := omc.mutation.ShipZip(); !ok {
		return &ValidationError{Name: "ship_zip", err: errors.New(`ent: missing required field "OrderMain.ship_zip"`)}
	}
	if _, ok := omc.mutation.ShipCountry(); !ok {
		return &ValidationError{Name: "ship_country", err: errors.New(`ent: missing required field "OrderMain.ship_country"`)}
	}
	if _, ok := omc.mutation.ShipCountryCode(); !ok {
		return &ValidationError{Name: "ship_country_code", err: errors.New(`ent: missing required field "OrderMain.ship_country_code"`)}
	}
	if _, ok := omc.mutation.ShipPhone(); !ok {
		return &ValidationError{Name: "ship_phone", err: errors.New(`ent: missing required field "OrderMain.ship_phone"`)}
	}
	if _, ok := omc.mutation.ShipFax(); !ok {
		return &ValidationError{Name: "ship_fax", err: errors.New(`ent: missing required field "OrderMain.ship_fax"`)}
	}
	if _, ok := omc.mutation.ShipRemark(); !ok {
		return &ValidationError{Name: "ship_remark", err: errors.New(`ent: missing required field "OrderMain.ship_remark"`)}
	}
	if _, ok := omc.mutation.ShipHouse(); !ok {
		return &ValidationError{Name: "ship_house", err: errors.New(`ent: missing required field "OrderMain.ship_house"`)}
	}
	if _, ok := omc.mutation.ShipCertificateCode(); !ok {
		return &ValidationError{Name: "ship_certificate_code", err: errors.New(`ent: missing required field "OrderMain.ship_certificate_code"`)}
	}
	if _, ok := omc.mutation.OrderUserEmail(); !ok {
		return &ValidationError{Name: "order_user_email", err: errors.New(`ent: missing required field "OrderMain.order_user_email"`)}
	}
	if _, ok := omc.mutation.OrdersUserID(); !ok {
		return &ValidationError{Name: "orders_user_id", err: errors.New(`ent: missing required field "OrderMain.orders_user_id"`)}
	}
	if _, ok := omc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "OrderMain.currency"`)}
	}
	if _, ok := omc.mutation.CurrenciesID(); !ok {
		return &ValidationError{Name: "currencies_id", err: errors.New(`ent: missing required field "OrderMain.currencies_id"`)}
	}
	if _, ok := omc.mutation.CurrencyRate(); !ok {
		return &ValidationError{Name: "currency_rate", err: errors.New(`ent: missing required field "OrderMain.currency_rate"`)}
	}
	if _, ok := omc.mutation.ShippingMethod(); !ok {
		return &ValidationError{Name: "shipping_method", err: errors.New(`ent: missing required field "OrderMain.shipping_method"`)}
	}
	if _, ok := omc.mutation.ShippingMethodOrig(); !ok {
		return &ValidationError{Name: "shipping_method_orig", err: errors.New(`ent: missing required field "OrderMain.shipping_method_orig"`)}
	}
	if _, ok := omc.mutation.ShippingMethodName(); !ok {
		return &ValidationError{Name: "shipping_method_name", err: errors.New(`ent: missing required field "OrderMain.shipping_method_name"`)}
	}
	if _, ok := omc.mutation.GrandTotal(); !ok {
		return &ValidationError{Name: "grand_total", err: errors.New(`ent: missing required field "OrderMain.grand_total"`)}
	}
	if _, ok := omc.mutation.TrackNumber(); !ok {
		return &ValidationError{Name: "track_number", err: errors.New(`ent: missing required field "OrderMain.track_number"`)}
	}
	if _, ok := omc.mutation.FollowNumber(); !ok {
		return &ValidationError{Name: "follow_number", err: errors.New(`ent: missing required field "OrderMain.follow_number"`)}
	}
	if _, ok := omc.mutation.DatePayment(); !ok {
		return &ValidationError{Name: "date_payment", err: errors.New(`ent: missing required field "OrderMain.date_payment"`)}
	}
	if _, ok := omc.mutation.TransactionNumber(); !ok {
		return &ValidationError{Name: "transaction_number", err: errors.New(`ent: missing required field "OrderMain.transaction_number"`)}
	}
	if _, ok := omc.mutation.TransactionFee(); !ok {
		return &ValidationError{Name: "transaction_fee", err: errors.New(`ent: missing required field "OrderMain.transaction_fee"`)}
	}
	if _, ok := omc.mutation.UpdateTrackTime(); !ok {
		return &ValidationError{Name: "update_track_time", err: errors.New(`ent: missing required field "OrderMain.update_track_time"`)}
	}
	if _, ok := omc.mutation.UpdateFollowTime(); !ok {
		return &ValidationError{Name: "update_follow_time", err: errors.New(`ent: missing required field "OrderMain.update_follow_time"`)}
	}
	if _, ok := omc.mutation.ShippingCost(); !ok {
		return &ValidationError{Name: "shipping_cost", err: errors.New(`ent: missing required field "OrderMain.shipping_cost"`)}
	}
	if _, ok := omc.mutation.ShippingCostExt(); !ok {
		return &ValidationError{Name: "shipping_cost_ext", err: errors.New(`ent: missing required field "OrderMain.shipping_cost_ext"`)}
	}
	if _, ok := omc.mutation.TaxesNumber(); !ok {
		return &ValidationError{Name: "taxes_number", err: errors.New(`ent: missing required field "OrderMain.taxes_number"`)}
	}
	if _, ok := omc.mutation.Tax(); !ok {
		return &ValidationError{Name: "tax", err: errors.New(`ent: missing required field "OrderMain.tax"`)}
	}
	if _, ok := omc.mutation.OrderDiscount(); !ok {
		return &ValidationError{Name: "order_discount", err: errors.New(`ent: missing required field "OrderMain.order_discount"`)}
	}
	if _, ok := omc.mutation.Insurance(); !ok {
		return &ValidationError{Name: "insurance", err: errors.New(`ent: missing required field "OrderMain.insurance"`)}
	}
	if _, ok := omc.mutation.OrderWeight(); !ok {
		return &ValidationError{Name: "order_weight", err: errors.New(`ent: missing required field "OrderMain.order_weight"`)}
	}
	if _, ok := omc.mutation.OrderCretateType(); !ok {
		return &ValidationError{Name: "order_cretate_type", err: errors.New(`ent: missing required field "OrderMain.order_cretate_type"`)}
	}
	if v, ok := omc.mutation.OrderCretateType(); ok {
		if err := ordermain.OrderCretateTypeValidator(v); err != nil {
			return &ValidationError{Name: "order_cretate_type", err: fmt.Errorf(`ent: validator failed for field "OrderMain.order_cretate_type": %w`, err)}
		}
	}
	if _, ok := omc.mutation.OrderType(); !ok {
		return &ValidationError{Name: "order_type", err: errors.New(`ent: missing required field "OrderMain.order_type"`)}
	}
	if _, ok := omc.mutation.StoreCreatedAt(); !ok {
		return &ValidationError{Name: "store_created_at", err: errors.New(`ent: missing required field "OrderMain.store_created_at"`)}
	}
	if _, ok := omc.mutation.SubOrdersCode(); !ok {
		return &ValidationError{Name: "sub_orders_code", err: errors.New(`ent: missing required field "OrderMain.sub_orders_code"`)}
	}
	if _, ok := omc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderMain.updated_at"`)}
	}
	if _, ok := omc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderMain.created_at"`)}
	}
	if _, ok := omc.mutation.WarehouseID(); !ok {
		return &ValidationError{Name: "warehouse_id", err: errors.New(`ent: missing required field "OrderMain.warehouse_id"`)}
	}
	if _, ok := omc.mutation.OrderListType(); !ok {
		return &ValidationError{Name: "order_list_type", err: errors.New(`ent: missing required field "OrderMain.order_list_type"`)}
	}
	if _, ok := omc.mutation.OrderBatchNo(); !ok {
		return &ValidationError{Name: "order_batch_no", err: errors.New(`ent: missing required field "OrderMain.order_batch_no"`)}
	}
	if _, ok := omc.mutation.ShopID(); !ok {
		return &ValidationError{Name: "shop_id", err: errors.New(`ent: missing required field "OrderMain.shop_id"`)}
	}
	if _, ok := omc.mutation.Subtotal(); !ok {
		return &ValidationError{Name: "subtotal", err: errors.New(`ent: missing required field "OrderMain.subtotal"`)}
	}
	if _, ok := omc.mutation.ShippingFree(); !ok {
		return &ValidationError{Name: "shipping_free", err: errors.New(`ent: missing required field "OrderMain.shipping_free"`)}
	}
	if _, ok := omc.mutation.OrderCost(); !ok {
		return &ValidationError{Name: "order_cost", err: errors.New(`ent: missing required field "OrderMain.order_cost"`)}
	}
	if _, ok := omc.mutation.OrderProfit(); !ok {
		return &ValidationError{Name: "order_profit", err: errors.New(`ent: missing required field "OrderMain.order_profit"`)}
	}
	if _, ok := omc.mutation.ShipDate(); !ok {
		return &ValidationError{Name: "ship_date", err: errors.New(`ent: missing required field "OrderMain.ship_date"`)}
	}
	if _, ok := omc.mutation.Commission(); !ok {
		return &ValidationError{Name: "commission", err: errors.New(`ent: missing required field "OrderMain.commission"`)}
	}
	if _, ok := omc.mutation.InterceptState(); !ok {
		return &ValidationError{Name: "intercept_state", err: errors.New(`ent: missing required field "OrderMain.intercept_state"`)}
	}
	if _, ok := omc.mutation.SendOrderTime(); !ok {
		return &ValidationError{Name: "send_order_time", err: errors.New(`ent: missing required field "OrderMain.send_order_time"`)}
	}
	if _, ok := omc.mutation.SendOrderUser(); !ok {
		return &ValidationError{Name: "send_order_user", err: errors.New(`ent: missing required field "OrderMain.send_order_user"`)}
	}
	if _, ok := omc.mutation.ProviderType(); !ok {
		return &ValidationError{Name: "provider_type", err: errors.New(`ent: missing required field "OrderMain.provider_type"`)}
	}
	if _, ok := omc.mutation.OrderPackCost(); !ok {
		return &ValidationError{Name: "order_pack_cost", err: errors.New(`ent: missing required field "OrderMain.order_pack_cost"`)}
	}
	if _, ok := omc.mutation.PaymentFixCost(); !ok {
		return &ValidationError{Name: "payment_fix_cost", err: errors.New(`ent: missing required field "OrderMain.payment_fix_cost"`)}
	}
	if _, ok := omc.mutation.IsFbaBehalf(); !ok {
		return &ValidationError{Name: "is_fba_behalf", err: errors.New(`ent: missing required field "OrderMain.is_fba_behalf"`)}
	}
	if _, ok := omc.mutation.FulfillType(); !ok {
		return &ValidationError{Name: "fulfill_type", err: errors.New(`ent: missing required field "OrderMain.fulfill_type"`)}
	}
	if _, ok := omc.mutation.FulfillException(); !ok {
		return &ValidationError{Name: "fulfill_exception", err: errors.New(`ent: missing required field "OrderMain.fulfill_exception"`)}
	}
	if _, ok := omc.mutation.IossNumber(); !ok {
		return &ValidationError{Name: "ioss_number", err: errors.New(`ent: missing required field "OrderMain.ioss_number"`)}
	}
	if _, ok := omc.mutation.WarehouseShopID(); !ok {
		return &ValidationError{Name: "warehouse_shop_id", err: errors.New(`ent: missing required field "OrderMain.warehouse_shop_id"`)}
	}
	if _, ok := omc.mutation.SalesRecordNumber(); !ok {
		return &ValidationError{Name: "sales_record_number", err: errors.New(`ent: missing required field "OrderMain.sales_record_number"`)}
	}
	if _, ok := omc.mutation.TicketCode(); !ok {
		return &ValidationError{Name: "ticket_code", err: errors.New(`ent: missing required field "OrderMain.ticket_code"`)}
	}
	if _, ok := omc.mutation.OverseasWarehouseStatus(); !ok {
		return &ValidationError{Name: "overseas_warehouse_status", err: errors.New(`ent: missing required field "OrderMain.overseas_warehouse_status"`)}
	}
	if _, ok := omc.mutation.PayPalID(); !ok {
		return &ValidationError{Name: "pay_pal_id", err: errors.New(`ent: missing required field "OrderMain.pay_pal_id"`)}
	}
	if _, ok := omc.mutation.IsUpdate(); !ok {
		return &ValidationError{Name: "is_update", err: errors.New(`ent: missing required field "OrderMain.is_update"`)}
	}
	if _, ok := omc.mutation.OrderSaleState(); !ok {
		return &ValidationError{Name: "order_sale_state", err: errors.New(`ent: missing required field "OrderMain.order_sale_state"`)}
	}
	if _, ok := omc.mutation.ProductCost(); !ok {
		return &ValidationError{Name: "product_cost", err: errors.New(`ent: missing required field "OrderMain.product_cost"`)}
	}
	if _, ok := omc.mutation.HeadCost(); !ok {
		return &ValidationError{Name: "head_cost", err: errors.New(`ent: missing required field "OrderMain.head_cost"`)}
	}
	if _, ok := omc.mutation.CarrierCode(); !ok {
		return &ValidationError{Name: "carrier_code", err: errors.New(`ent: missing required field "OrderMain.carrier_code"`)}
	}
	if _, ok := omc.mutation.WithheldTax(); !ok {
		return &ValidationError{Name: "withheld_tax", err: errors.New(`ent: missing required field "OrderMain.withheld_tax"`)}
	}
	if _, ok := omc.mutation.OtherFee(); !ok {
		return &ValidationError{Name: "other_fee", err: errors.New(`ent: missing required field "OrderMain.other_fee"`)}
	}
	if _, ok := omc.mutation.EscrowTax(); !ok {
		return &ValidationError{Name: "escrow_tax", err: errors.New(`ent: missing required field "OrderMain.escrow_tax"`)}
	}
	if _, ok := omc.mutation.FinalProductVatTax(); !ok {
		return &ValidationError{Name: "final_product_vat_tax", err: errors.New(`ent: missing required field "OrderMain.final_product_vat_tax"`)}
	}
	if _, ok := omc.mutation.FinalShippingVatTax(); !ok {
		return &ValidationError{Name: "final_shipping_vat_tax", err: errors.New(`ent: missing required field "OrderMain.final_shipping_vat_tax"`)}
	}
	if _, ok := omc.mutation.ShippingCharge(); !ok {
		return &ValidationError{Name: "shipping_charge", err: errors.New(`ent: missing required field "OrderMain.shipping_charge"`)}
	}
	if _, ok := omc.mutation.VoucherPlatform(); !ok {
		return &ValidationError{Name: "voucher_platform", err: errors.New(`ent: missing required field "OrderMain.voucher_platform"`)}
	}
	if _, ok := omc.mutation.ShippingRebate(); !ok {
		return &ValidationError{Name: "shipping_rebate", err: errors.New(`ent: missing required field "OrderMain.shipping_rebate"`)}
	}
	if _, ok := omc.mutation.LabelList(); !ok {
		return &ValidationError{Name: "label_list", err: errors.New(`ent: missing required field "OrderMain.label_list"`)}
	}
	if _, ok := omc.mutation.OutRealGrandTotal(); !ok {
		return &ValidationError{Name: "out_real_grand_total", err: errors.New(`ent: missing required field "OrderMain.out_real_grand_total"`)}
	}
	if _, ok := omc.mutation.BillList(); !ok {
		return &ValidationError{Name: "bill_list", err: errors.New(`ent: missing required field "OrderMain.bill_list"`)}
	}
	if _, ok := omc.mutation.OutGrandTotal(); !ok {
		return &ValidationError{Name: "out_grand_total", err: errors.New(`ent: missing required field "OrderMain.out_grand_total"`)}
	}
	if _, ok := omc.mutation.DeliverShop(); !ok {
		return &ValidationError{Name: "deliver_shop", err: errors.New(`ent: missing required field "OrderMain.deliver_shop"`)}
	}
	if _, ok := omc.mutation.ShippingCostFinal(); !ok {
		return &ValidationError{Name: "shipping_cost_final", err: errors.New(`ent: missing required field "OrderMain.shipping_cost_final"`)}
	}
	if _, ok := omc.mutation.ShippingFreeAbout(); !ok {
		return &ValidationError{Name: "shipping_free_about", err: errors.New(`ent: missing required field "OrderMain.shipping_free_about"`)}
	}
	if _, ok := omc.mutation.CreateOrderStatus(); !ok {
		return &ValidationError{Name: "create_order_status", err: errors.New(`ent: missing required field "OrderMain.create_order_status"`)}
	}
	if _, ok := omc.mutation.FinanceTime(); !ok {
		return &ValidationError{Name: "finance_time", err: errors.New(`ent: missing required field "OrderMain.finance_time"`)}
	}
	if _, ok := omc.mutation.IsQcc(); !ok {
		return &ValidationError{Name: "is_qcc", err: errors.New(`ent: missing required field "OrderMain.is_qcc"`)}
	}
	if _, ok := omc.mutation.RejectReason(); !ok {
		return &ValidationError{Name: "reject_reason", err: errors.New(`ent: missing required field "OrderMain.reject_reason"`)}
	}
	if _, ok := omc.mutation.OrderLocalTime(); !ok {
		return &ValidationError{Name: "order_local_time", err: errors.New(`ent: missing required field "OrderMain.order_local_time"`)}
	}
	if _, ok := omc.mutation.DiscountCode(); !ok {
		return &ValidationError{Name: "discount_code", err: errors.New(`ent: missing required field "OrderMain.discount_code"`)}
	}
	if _, ok := omc.mutation.StockoutStatus(); !ok {
		return &ValidationError{Name: "stockout_status", err: errors.New(`ent: missing required field "OrderMain.stockout_status"`)}
	}
	if _, ok := omc.mutation.OrderLength(); !ok {
		return &ValidationError{Name: "order_length", err: errors.New(`ent: missing required field "OrderMain.order_length"`)}
	}
	if _, ok := omc.mutation.OrderWidth(); !ok {
		return &ValidationError{Name: "order_width", err: errors.New(`ent: missing required field "OrderMain.order_width"`)}
	}
	if _, ok := omc.mutation.OrderHeight(); !ok {
		return &ValidationError{Name: "order_height", err: errors.New(`ent: missing required field "OrderMain.order_height"`)}
	}
	if _, ok := omc.mutation.FirstSide(); !ok {
		return &ValidationError{Name: "first_side", err: errors.New(`ent: missing required field "OrderMain.first_side"`)}
	}
	if _, ok := omc.mutation.SecondSide(); !ok {
		return &ValidationError{Name: "second_side", err: errors.New(`ent: missing required field "OrderMain.second_side"`)}
	}
	if _, ok := omc.mutation.ThirdSide(); !ok {
		return &ValidationError{Name: "third_side", err: errors.New(`ent: missing required field "OrderMain.third_side"`)}
	}
	if _, ok := omc.mutation.OrderFeeWeight(); !ok {
		return &ValidationError{Name: "order_fee_weight", err: errors.New(`ent: missing required field "OrderMain.order_fee_weight"`)}
	}
	if _, ok := omc.mutation.ShopManager(); !ok {
		return &ValidationError{Name: "shop_manager", err: errors.New(`ent: missing required field "OrderMain.shop_manager"`)}
	}
	if _, ok := omc.mutation.PushStatus(); !ok {
		return &ValidationError{Name: "push_status", err: errors.New(`ent: missing required field "OrderMain.push_status"`)}
	}
	return nil
}

func (omc *OrderMainCreate) sqlSave(ctx context.Context) (*OrderMain, error) {
	_node, _spec := omc.createSpec()
	if err := sqlgraph.CreateNode(ctx, omc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (omc *OrderMainCreate) createSpec() (*OrderMain, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderMain{config: omc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ordermain.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: ordermain.FieldID,
			},
		}
	)
	if id, ok := omc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := omc.mutation.OrderCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrderCode,
		})
		_node.OrderCode = value
	}
	if value, ok := omc.mutation.OrderStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderStatus,
		})
		_node.OrderStatus = value
	}
	if value, ok := omc.mutation.ExceptionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldExceptionType,
		})
		_node.ExceptionType = value
	}
	if value, ok := omc.mutation.StoreOrderCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldStoreOrderCode,
		})
		_node.StoreOrderCode = value
	}
	if value, ok := omc.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldPlatform,
		})
		_node.Platform = value
	}
	if value, ok := omc.mutation.ShopName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShopName,
		})
		_node.ShopName = value
	}
	if value, ok := omc.mutation.ShipFirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipFirstName,
		})
		_node.ShipFirstName = value
	}
	if value, ok := omc.mutation.ShipLastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipLastName,
		})
		_node.ShipLastName = value
	}
	if value, ok := omc.mutation.ShipCompany(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCompany,
		})
		_node.ShipCompany = value
	}
	if value, ok := omc.mutation.ShipStreet1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipStreet1,
		})
		_node.ShipStreet1 = value
	}
	if value, ok := omc.mutation.ShipStreet2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipStreet2,
		})
		_node.ShipStreet2 = value
	}
	if value, ok := omc.mutation.ShipCity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCity,
		})
		_node.ShipCity = value
	}
	if value, ok := omc.mutation.ShipState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipState,
		})
		_node.ShipState = value
	}
	if value, ok := omc.mutation.ShipZip(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipZip,
		})
		_node.ShipZip = value
	}
	if value, ok := omc.mutation.ShipCountry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCountry,
		})
		_node.ShipCountry = value
	}
	if value, ok := omc.mutation.ShipCountryCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCountryCode,
		})
		_node.ShipCountryCode = value
	}
	if value, ok := omc.mutation.ShipPhone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipPhone,
		})
		_node.ShipPhone = value
	}
	if value, ok := omc.mutation.ShipFax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipFax,
		})
		_node.ShipFax = value
	}
	if value, ok := omc.mutation.ShipRemark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipRemark,
		})
		_node.ShipRemark = value
	}
	if value, ok := omc.mutation.ShipHouse(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipHouse,
		})
		_node.ShipHouse = value
	}
	if value, ok := omc.mutation.ShipCertificateCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCertificateCode,
		})
		_node.ShipCertificateCode = value
	}
	if value, ok := omc.mutation.OrderUserEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrderUserEmail,
		})
		_node.OrderUserEmail = value
	}
	if value, ok := omc.mutation.OrdersUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrdersUserID,
		})
		_node.OrdersUserID = value
	}
	if value, ok := omc.mutation.Currency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldCurrency,
		})
		_node.Currency = value
	}
	if value, ok := omc.mutation.CurrenciesID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldCurrenciesID,
		})
		_node.CurrenciesID = value
	}
	if value, ok := omc.mutation.CurrencyRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldCurrencyRate,
		})
		_node.CurrencyRate = value
	}
	if value, ok := omc.mutation.ShippingMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShippingMethod,
		})
		_node.ShippingMethod = value
	}
	if value, ok := omc.mutation.ShippingMethodOrig(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShippingMethodOrig,
		})
		_node.ShippingMethodOrig = value
	}
	if value, ok := omc.mutation.ShippingMethodName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShippingMethodName,
		})
		_node.ShippingMethodName = value
	}
	if value, ok := omc.mutation.GrandTotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldGrandTotal,
		})
		_node.GrandTotal = value
	}
	if value, ok := omc.mutation.TrackNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTrackNumber,
		})
		_node.TrackNumber = value
	}
	if value, ok := omc.mutation.FollowNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldFollowNumber,
		})
		_node.FollowNumber = value
	}
	if value, ok := omc.mutation.DatePayment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldDatePayment,
		})
		_node.DatePayment = value
	}
	if value, ok := omc.mutation.TransactionNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTransactionNumber,
		})
		_node.TransactionNumber = value
	}
	if value, ok := omc.mutation.TransactionFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldTransactionFee,
		})
		_node.TransactionFee = value
	}
	if value, ok := omc.mutation.UpdateTrackTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldUpdateTrackTime,
		})
		_node.UpdateTrackTime = value
	}
	if value, ok := omc.mutation.UpdateFollowTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldUpdateFollowTime,
		})
		_node.UpdateFollowTime = value
	}
	if value, ok := omc.mutation.ShippingCost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCost,
		})
		_node.ShippingCost = value
	}
	if value, ok := omc.mutation.ShippingCostExt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCostExt,
		})
		_node.ShippingCostExt = value
	}
	if value, ok := omc.mutation.TaxesNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTaxesNumber,
		})
		_node.TaxesNumber = value
	}
	if value, ok := omc.mutation.Tax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldTax,
		})
		_node.Tax = value
	}
	if value, ok := omc.mutation.OrderDiscount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderDiscount,
		})
		_node.OrderDiscount = value
	}
	if value, ok := omc.mutation.Insurance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldInsurance,
		})
		_node.Insurance = value
	}
	if value, ok := omc.mutation.OrderWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderWeight,
		})
		_node.OrderWeight = value
	}
	if value, ok := omc.mutation.OrderCretateType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ordermain.FieldOrderCretateType,
		})
		_node.OrderCretateType = value
	}
	if value, ok := omc.mutation.OrderType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderType,
		})
		_node.OrderType = value
	}
	if value, ok := omc.mutation.StoreCreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldStoreCreatedAt,
		})
		_node.StoreCreatedAt = value
	}
	if value, ok := omc.mutation.SubOrdersCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldSubOrdersCode,
		})
		_node.SubOrdersCode = value
	}
	if value, ok := omc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := omc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := omc.mutation.WarehouseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldWarehouseID,
		})
		_node.WarehouseID = value
	}
	if value, ok := omc.mutation.OrderListType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderListType,
		})
		_node.OrderListType = value
	}
	if value, ok := omc.mutation.OrderBatchNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrderBatchNo,
		})
		_node.OrderBatchNo = value
	}
	if value, ok := omc.mutation.ShopID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldShopID,
		})
		_node.ShopID = value
	}
	if value, ok := omc.mutation.Subtotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldSubtotal,
		})
		_node.Subtotal = value
	}
	if value, ok := omc.mutation.ShippingFree(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingFree,
		})
		_node.ShippingFree = value
	}
	if value, ok := omc.mutation.OrderCost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderCost,
		})
		_node.OrderCost = value
	}
	if value, ok := omc.mutation.OrderProfit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderProfit,
		})
		_node.OrderProfit = value
	}
	if value, ok := omc.mutation.ShipDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldShipDate,
		})
		_node.ShipDate = value
	}
	if value, ok := omc.mutation.Commission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldCommission,
		})
		_node.Commission = value
	}
	if value, ok := omc.mutation.InterceptState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldInterceptState,
		})
		_node.InterceptState = value
	}
	if value, ok := omc.mutation.SendOrderTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldSendOrderTime,
		})
		_node.SendOrderTime = value
	}
	if value, ok := omc.mutation.SendOrderUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldSendOrderUser,
		})
		_node.SendOrderUser = value
	}
	if value, ok := omc.mutation.ProviderType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldProviderType,
		})
		_node.ProviderType = value
	}
	if value, ok := omc.mutation.OrderPackCost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderPackCost,
		})
		_node.OrderPackCost = value
	}
	if value, ok := omc.mutation.PaymentFixCost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldPaymentFixCost,
		})
		_node.PaymentFixCost = value
	}
	if value, ok := omc.mutation.IsFbaBehalf(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsFbaBehalf,
		})
		_node.IsFbaBehalf = value
	}
	if value, ok := omc.mutation.FulfillType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldFulfillType,
		})
		_node.FulfillType = value
	}
	if value, ok := omc.mutation.FulfillException(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldFulfillException,
		})
		_node.FulfillException = value
	}
	if value, ok := omc.mutation.IossNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldIossNumber,
		})
		_node.IossNumber = value
	}
	if value, ok := omc.mutation.WarehouseShopID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldWarehouseShopID,
		})
		_node.WarehouseShopID = value
	}
	if value, ok := omc.mutation.SalesRecordNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldSalesRecordNumber,
		})
		_node.SalesRecordNumber = value
	}
	if value, ok := omc.mutation.TicketCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTicketCode,
		})
		_node.TicketCode = value
	}
	if value, ok := omc.mutation.OverseasWarehouseStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOverseasWarehouseStatus,
		})
		_node.OverseasWarehouseStatus = value
	}
	if value, ok := omc.mutation.PayPalID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldPayPalID,
		})
		_node.PayPalID = value
	}
	if value, ok := omc.mutation.IsUpdate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsUpdate,
		})
		_node.IsUpdate = value
	}
	if value, ok := omc.mutation.OrderSaleState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderSaleState,
		})
		_node.OrderSaleState = value
	}
	if value, ok := omc.mutation.ProductCost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldProductCost,
		})
		_node.ProductCost = value
	}
	if value, ok := omc.mutation.HeadCost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldHeadCost,
		})
		_node.HeadCost = value
	}
	if value, ok := omc.mutation.CarrierCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldCarrierCode,
		})
		_node.CarrierCode = value
	}
	if value, ok := omc.mutation.WithheldTax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldWithheldTax,
		})
		_node.WithheldTax = value
	}
	if value, ok := omc.mutation.OtherFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOtherFee,
		})
		_node.OtherFee = value
	}
	if value, ok := omc.mutation.EscrowTax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldEscrowTax,
		})
		_node.EscrowTax = value
	}
	if value, ok := omc.mutation.FinalProductVatTax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFinalProductVatTax,
		})
		_node.FinalProductVatTax = value
	}
	if value, ok := omc.mutation.FinalShippingVatTax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFinalShippingVatTax,
		})
		_node.FinalShippingVatTax = value
	}
	if value, ok := omc.mutation.ShippingCharge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCharge,
		})
		_node.ShippingCharge = value
	}
	if value, ok := omc.mutation.VoucherPlatform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldVoucherPlatform,
		})
		_node.VoucherPlatform = value
	}
	if value, ok := omc.mutation.OverTimeLeft(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldOverTimeLeft,
		})
		_node.OverTimeLeft = value
	}
	if value, ok := omc.mutation.ShippingRebate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingRebate,
		})
		_node.ShippingRebate = value
	}
	if value, ok := omc.mutation.LabelList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldLabelList,
		})
		_node.LabelList = value
	}
	if value, ok := omc.mutation.OutRealGrandTotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOutRealGrandTotal,
		})
		_node.OutRealGrandTotal = value
	}
	if value, ok := omc.mutation.BillList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldBillList,
		})
		_node.BillList = value
	}
	if value, ok := omc.mutation.OutGrandTotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOutGrandTotal,
		})
		_node.OutGrandTotal = value
	}
	if value, ok := omc.mutation.DeliverShop(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldDeliverShop,
		})
		_node.DeliverShop = value
	}
	if value, ok := omc.mutation.ShippingCostFinal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCostFinal,
		})
		_node.ShippingCostFinal = value
	}
	if value, ok := omc.mutation.ShippingFreeAbout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingFreeAbout,
		})
		_node.ShippingFreeAbout = value
	}
	if value, ok := omc.mutation.CreateOrderStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldCreateOrderStatus,
		})
		_node.CreateOrderStatus = value
	}
	if value, ok := omc.mutation.FinanceTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldFinanceTime,
		})
		_node.FinanceTime = value
	}
	if value, ok := omc.mutation.IsQcc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsQcc,
		})
		_node.IsQcc = value
	}
	if value, ok := omc.mutation.RejectReason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldRejectReason,
		})
		_node.RejectReason = value
	}
	if value, ok := omc.mutation.OrderLocalTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldOrderLocalTime,
		})
		_node.OrderLocalTime = value
	}
	if value, ok := omc.mutation.DiscountCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldDiscountCode,
		})
		_node.DiscountCode = value
	}
	if value, ok := omc.mutation.StockoutStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldStockoutStatus,
		})
		_node.StockoutStatus = value
	}
	if value, ok := omc.mutation.OrderLength(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderLength,
		})
		_node.OrderLength = value
	}
	if value, ok := omc.mutation.OrderWidth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderWidth,
		})
		_node.OrderWidth = value
	}
	if value, ok := omc.mutation.OrderHeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderHeight,
		})
		_node.OrderHeight = value
	}
	if value, ok := omc.mutation.FirstSide(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFirstSide,
		})
		_node.FirstSide = value
	}
	if value, ok := omc.mutation.SecondSide(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldSecondSide,
		})
		_node.SecondSide = value
	}
	if value, ok := omc.mutation.ThirdSide(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldThirdSide,
		})
		_node.ThirdSide = value
	}
	if value, ok := omc.mutation.OrderFeeWeight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderFeeWeight,
		})
		_node.OrderFeeWeight = value
	}
	if value, ok := omc.mutation.ShopManager(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShopManager,
		})
		_node.ShopManager = value
	}
	if value, ok := omc.mutation.PushStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldPushStatus,
		})
		_node.PushStatus = value
	}
	if value, ok := omc.mutation.BuyerPaidShippingFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldBuyerPaidShippingFee,
		})
		_node.BuyerPaidShippingFee = value
	}
	return _node, _spec
}

// OrderMainCreateBulk is the builder for creating many OrderMain entities in bulk.
type OrderMainCreateBulk struct {
	config
	builders []*OrderMainCreate
}

// Save creates the OrderMain entities in the database.
func (omcb *OrderMainCreateBulk) Save(ctx context.Context) ([]*OrderMain, error) {
	specs := make([]*sqlgraph.CreateSpec, len(omcb.builders))
	nodes := make([]*OrderMain, len(omcb.builders))
	mutators := make([]Mutator, len(omcb.builders))
	for i := range omcb.builders {
		func(i int, root context.Context) {
			builder := omcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, omcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, omcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, omcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (omcb *OrderMainCreateBulk) SaveX(ctx context.Context) []*OrderMain {
	v, err := omcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omcb *OrderMainCreateBulk) Exec(ctx context.Context) error {
	_, err := omcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omcb *OrderMainCreateBulk) ExecX(ctx context.Context) {
	if err := omcb.Exec(ctx); err != nil {
		panic(err)
	}
}
