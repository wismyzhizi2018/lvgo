// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"order/ent/ordermain"
	"order/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOrderMain = "OrderMain"
	TypeUser      = "User"
)

// OrderMainMutation represents an operation that mutates the OrderMain nodes in the graph.
type OrderMainMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int32
	order_code                 *string
	order_status               *int8
	addorder_status            *int8
	exception_type             *int8
	addexception_type          *int8
	store_order_code           *string
	platform                   *string
	shop_name                  *string
	ship_first_name            *string
	ship_last_name             *string
	ship_company               *string
	ship_street1               *string
	ship_street2               *string
	ship_city                  *string
	ship_state                 *string
	ship_zip                   *string
	ship_country               *string
	ship_country_code          *string
	ship_phone                 *string
	ship_fax                   *string
	ship_remark                *string
	ship_house                 *string
	ship_certificate_code      *string
	order_user_email           *string
	orders_user_id             *string
	currency                   *string
	currencies_id              *int32
	addcurrencies_id           *int32
	currency_rate              *float64
	addcurrency_rate           *float64
	shipping_method            *string
	shipping_method_orig       *string
	shipping_method_name       *string
	grand_total                *float64
	addgrand_total             *float64
	track_number               *string
	follow_number              *string
	date_payment               *time.Time
	transaction_number         *string
	transaction_fee            *float64
	addtransaction_fee         *float64
	update_track_time          *time.Time
	update_follow_time         *time.Time
	shipping_cost              *float64
	addshipping_cost           *float64
	shipping_cost_ext          *float64
	addshipping_cost_ext       *float64
	taxes_number               *string
	tax                        *float64
	addtax                     *float64
	order_discount             *float64
	addorder_discount          *float64
	insurance                  *float64
	addinsurance               *float64
	order_weight               *float64
	addorder_weight            *float64
	order_cretate_type         *ordermain.OrderCretateType
	order_type                 *int8
	addorder_type              *int8
	store_created_at           *time.Time
	sub_orders_code            *string
	updated_at                 *time.Time
	created_at                 *time.Time
	warehouse_id               *string
	order_list_type            *int8
	addorder_list_type         *int8
	order_batch_no             *string
	shop_id                    *int32
	addshop_id                 *int32
	subtotal                   *float64
	addsubtotal                *float64
	shipping_free              *float64
	addshipping_free           *float64
	order_cost                 *float64
	addorder_cost              *float64
	order_profit               *float64
	addorder_profit            *float64
	ship_date                  *time.Time
	commission                 *float64
	addcommission              *float64
	intercept_state            *int8
	addintercept_state         *int8
	send_order_time            *time.Time
	send_order_user            *string
	provider_type              *int8
	addprovider_type           *int8
	order_pack_cost            *float64
	addorder_pack_cost         *float64
	payment_fix_cost           *float64
	addpayment_fix_cost        *float64
	is_fba_behalf              *int8
	addis_fba_behalf           *int8
	fulfill_type               *int8
	addfulfill_type            *int8
	fulfill_exception          *int8
	addfulfill_exception       *int8
	ioss_number                *string
	warehouse_shop_id          *int32
	addwarehouse_shop_id       *int32
	sales_record_number        *string
	ticket_code                *string
	overseas_warehouse_status  *string
	pay_pal_id                 *string
	is_update                  *int8
	addis_update               *int8
	order_sale_state           *int8
	addorder_sale_state        *int8
	product_cost               *float64
	addproduct_cost            *float64
	head_cost                  *float64
	addhead_cost               *float64
	carrier_code               *string
	withheld_tax               *float64
	addwithheld_tax            *float64
	other_fee                  *float64
	addother_fee               *float64
	escrow_tax                 *float64
	addescrow_tax              *float64
	final_product_vat_tax      *float64
	addfinal_product_vat_tax   *float64
	final_shipping_vat_tax     *float64
	addfinal_shipping_vat_tax  *float64
	shipping_charge            *float64
	addshipping_charge         *float64
	voucher_platform           *float64
	addvoucher_platform        *float64
	over_time_left             *time.Time
	shipping_rebate            *float64
	addshipping_rebate         *float64
	label_list                 *string
	out_real_grand_total       *float64
	addout_real_grand_total    *float64
	bill_list                  *string
	out_grand_total            *float64
	addout_grand_total         *float64
	deliver_shop               *string
	shipping_cost_final        *float64
	addshipping_cost_final     *float64
	shipping_free_about        *float64
	addshipping_free_about     *float64
	create_order_status        *int8
	addcreate_order_status     *int8
	finance_time               *time.Time
	is_qcc                     *int8
	addis_qcc                  *int8
	reject_reason              *string
	order_local_time           *time.Time
	discount_code              *string
	stockout_status            *int8
	addstockout_status         *int8
	order_length               *float64
	addorder_length            *float64
	order_width                *float64
	addorder_width             *float64
	order_height               *float64
	addorder_height            *float64
	first_side                 *float64
	addfirst_side              *float64
	second_side                *float64
	addsecond_side             *float64
	third_side                 *float64
	addthird_side              *float64
	order_fee_weight           *float64
	addorder_fee_weight        *float64
	shop_manager               *string
	push_status                *int8
	addpush_status             *int8
	buyer_paid_shipping_fee    *float64
	addbuyer_paid_shipping_fee *float64
	clearedFields              map[string]struct{}
	done                       bool
	oldValue                   func(context.Context) (*OrderMain, error)
	predicates                 []predicate.OrderMain
}

var _ ent.Mutation = (*OrderMainMutation)(nil)

// ordermainOption allows management of the mutation configuration using functional options.
type ordermainOption func(*OrderMainMutation)

// newOrderMainMutation creates new mutation for the OrderMain entity.
func newOrderMainMutation(c config, op Op, opts ...ordermainOption) *OrderMainMutation {
	m := &OrderMainMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderMain,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderMainID sets the ID field of the mutation.
func withOrderMainID(id int32) ordermainOption {
	return func(m *OrderMainMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderMain
		)
		m.oldValue = func(ctx context.Context) (*OrderMain, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderMain.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderMain sets the old OrderMain of the mutation.
func withOrderMain(node *OrderMain) ordermainOption {
	return func(m *OrderMainMutation) {
		m.oldValue = func(context.Context) (*OrderMain, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMainMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMainMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrderMain entities.
func (m *OrderMainMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMainMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMainMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderMain.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOrderCode sets the "order_code" field.
func (m *OrderMainMutation) SetOrderCode(s string) {
	m.order_code = &s
}

// OrderCode returns the value of the "order_code" field in the mutation.
func (m *OrderMainMutation) OrderCode() (r string, exists bool) {
	v := m.order_code
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderCode returns the old "order_code" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderCode: %w", err)
	}
	return oldValue.OrderCode, nil
}

// ResetOrderCode resets all changes to the "order_code" field.
func (m *OrderMainMutation) ResetOrderCode() {
	m.order_code = nil
}

// SetOrderStatus sets the "order_status" field.
func (m *OrderMainMutation) SetOrderStatus(i int8) {
	m.order_status = &i
	m.addorder_status = nil
}

// OrderStatus returns the value of the "order_status" field in the mutation.
func (m *OrderMainMutation) OrderStatus() (r int8, exists bool) {
	v := m.order_status
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderStatus returns the old "order_status" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderStatus: %w", err)
	}
	return oldValue.OrderStatus, nil
}

// AddOrderStatus adds i to the "order_status" field.
func (m *OrderMainMutation) AddOrderStatus(i int8) {
	if m.addorder_status != nil {
		*m.addorder_status += i
	} else {
		m.addorder_status = &i
	}
}

// AddedOrderStatus returns the value that was added to the "order_status" field in this mutation.
func (m *OrderMainMutation) AddedOrderStatus() (r int8, exists bool) {
	v := m.addorder_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderStatus resets all changes to the "order_status" field.
func (m *OrderMainMutation) ResetOrderStatus() {
	m.order_status = nil
	m.addorder_status = nil
}

// SetExceptionType sets the "exception_type" field.
func (m *OrderMainMutation) SetExceptionType(i int8) {
	m.exception_type = &i
	m.addexception_type = nil
}

// ExceptionType returns the value of the "exception_type" field in the mutation.
func (m *OrderMainMutation) ExceptionType() (r int8, exists bool) {
	v := m.exception_type
	if v == nil {
		return
	}
	return *v, true
}

// OldExceptionType returns the old "exception_type" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldExceptionType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExceptionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExceptionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExceptionType: %w", err)
	}
	return oldValue.ExceptionType, nil
}

// AddExceptionType adds i to the "exception_type" field.
func (m *OrderMainMutation) AddExceptionType(i int8) {
	if m.addexception_type != nil {
		*m.addexception_type += i
	} else {
		m.addexception_type = &i
	}
}

// AddedExceptionType returns the value that was added to the "exception_type" field in this mutation.
func (m *OrderMainMutation) AddedExceptionType() (r int8, exists bool) {
	v := m.addexception_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetExceptionType resets all changes to the "exception_type" field.
func (m *OrderMainMutation) ResetExceptionType() {
	m.exception_type = nil
	m.addexception_type = nil
}

// SetStoreOrderCode sets the "store_order_code" field.
func (m *OrderMainMutation) SetStoreOrderCode(s string) {
	m.store_order_code = &s
}

// StoreOrderCode returns the value of the "store_order_code" field in the mutation.
func (m *OrderMainMutation) StoreOrderCode() (r string, exists bool) {
	v := m.store_order_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreOrderCode returns the old "store_order_code" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldStoreOrderCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreOrderCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreOrderCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreOrderCode: %w", err)
	}
	return oldValue.StoreOrderCode, nil
}

// ResetStoreOrderCode resets all changes to the "store_order_code" field.
func (m *OrderMainMutation) ResetStoreOrderCode() {
	m.store_order_code = nil
}

// SetPlatform sets the "platform" field.
func (m *OrderMainMutation) SetPlatform(s string) {
	m.platform = &s
}

// Platform returns the value of the "platform" field in the mutation.
func (m *OrderMainMutation) Platform() (r string, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldPlatform(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *OrderMainMutation) ResetPlatform() {
	m.platform = nil
}

// SetShopName sets the "shop_name" field.
func (m *OrderMainMutation) SetShopName(s string) {
	m.shop_name = &s
}

// ShopName returns the value of the "shop_name" field in the mutation.
func (m *OrderMainMutation) ShopName() (r string, exists bool) {
	v := m.shop_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShopName returns the old "shop_name" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShopName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopName: %w", err)
	}
	return oldValue.ShopName, nil
}

// ResetShopName resets all changes to the "shop_name" field.
func (m *OrderMainMutation) ResetShopName() {
	m.shop_name = nil
}

// SetShipFirstName sets the "ship_first_name" field.
func (m *OrderMainMutation) SetShipFirstName(s string) {
	m.ship_first_name = &s
}

// ShipFirstName returns the value of the "ship_first_name" field in the mutation.
func (m *OrderMainMutation) ShipFirstName() (r string, exists bool) {
	v := m.ship_first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShipFirstName returns the old "ship_first_name" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipFirstName: %w", err)
	}
	return oldValue.ShipFirstName, nil
}

// ResetShipFirstName resets all changes to the "ship_first_name" field.
func (m *OrderMainMutation) ResetShipFirstName() {
	m.ship_first_name = nil
}

// SetShipLastName sets the "ship_last_name" field.
func (m *OrderMainMutation) SetShipLastName(s string) {
	m.ship_last_name = &s
}

// ShipLastName returns the value of the "ship_last_name" field in the mutation.
func (m *OrderMainMutation) ShipLastName() (r string, exists bool) {
	v := m.ship_last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShipLastName returns the old "ship_last_name" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipLastName: %w", err)
	}
	return oldValue.ShipLastName, nil
}

// ResetShipLastName resets all changes to the "ship_last_name" field.
func (m *OrderMainMutation) ResetShipLastName() {
	m.ship_last_name = nil
}

// SetShipCompany sets the "ship_company" field.
func (m *OrderMainMutation) SetShipCompany(s string) {
	m.ship_company = &s
}

// ShipCompany returns the value of the "ship_company" field in the mutation.
func (m *OrderMainMutation) ShipCompany() (r string, exists bool) {
	v := m.ship_company
	if v == nil {
		return
	}
	return *v, true
}

// OldShipCompany returns the old "ship_company" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipCompany(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipCompany is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipCompany requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipCompany: %w", err)
	}
	return oldValue.ShipCompany, nil
}

// ResetShipCompany resets all changes to the "ship_company" field.
func (m *OrderMainMutation) ResetShipCompany() {
	m.ship_company = nil
}

// SetShipStreet1 sets the "ship_street1" field.
func (m *OrderMainMutation) SetShipStreet1(s string) {
	m.ship_street1 = &s
}

// ShipStreet1 returns the value of the "ship_street1" field in the mutation.
func (m *OrderMainMutation) ShipStreet1() (r string, exists bool) {
	v := m.ship_street1
	if v == nil {
		return
	}
	return *v, true
}

// OldShipStreet1 returns the old "ship_street1" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipStreet1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipStreet1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipStreet1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipStreet1: %w", err)
	}
	return oldValue.ShipStreet1, nil
}

// ResetShipStreet1 resets all changes to the "ship_street1" field.
func (m *OrderMainMutation) ResetShipStreet1() {
	m.ship_street1 = nil
}

// SetShipStreet2 sets the "ship_street2" field.
func (m *OrderMainMutation) SetShipStreet2(s string) {
	m.ship_street2 = &s
}

// ShipStreet2 returns the value of the "ship_street2" field in the mutation.
func (m *OrderMainMutation) ShipStreet2() (r string, exists bool) {
	v := m.ship_street2
	if v == nil {
		return
	}
	return *v, true
}

// OldShipStreet2 returns the old "ship_street2" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipStreet2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipStreet2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipStreet2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipStreet2: %w", err)
	}
	return oldValue.ShipStreet2, nil
}

// ResetShipStreet2 resets all changes to the "ship_street2" field.
func (m *OrderMainMutation) ResetShipStreet2() {
	m.ship_street2 = nil
}

// SetShipCity sets the "ship_city" field.
func (m *OrderMainMutation) SetShipCity(s string) {
	m.ship_city = &s
}

// ShipCity returns the value of the "ship_city" field in the mutation.
func (m *OrderMainMutation) ShipCity() (r string, exists bool) {
	v := m.ship_city
	if v == nil {
		return
	}
	return *v, true
}

// OldShipCity returns the old "ship_city" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipCity: %w", err)
	}
	return oldValue.ShipCity, nil
}

// ResetShipCity resets all changes to the "ship_city" field.
func (m *OrderMainMutation) ResetShipCity() {
	m.ship_city = nil
}

// SetShipState sets the "ship_state" field.
func (m *OrderMainMutation) SetShipState(s string) {
	m.ship_state = &s
}

// ShipState returns the value of the "ship_state" field in the mutation.
func (m *OrderMainMutation) ShipState() (r string, exists bool) {
	v := m.ship_state
	if v == nil {
		return
	}
	return *v, true
}

// OldShipState returns the old "ship_state" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipState: %w", err)
	}
	return oldValue.ShipState, nil
}

// ResetShipState resets all changes to the "ship_state" field.
func (m *OrderMainMutation) ResetShipState() {
	m.ship_state = nil
}

// SetShipZip sets the "ship_zip" field.
func (m *OrderMainMutation) SetShipZip(s string) {
	m.ship_zip = &s
}

// ShipZip returns the value of the "ship_zip" field in the mutation.
func (m *OrderMainMutation) ShipZip() (r string, exists bool) {
	v := m.ship_zip
	if v == nil {
		return
	}
	return *v, true
}

// OldShipZip returns the old "ship_zip" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipZip(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipZip is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipZip requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipZip: %w", err)
	}
	return oldValue.ShipZip, nil
}

// ResetShipZip resets all changes to the "ship_zip" field.
func (m *OrderMainMutation) ResetShipZip() {
	m.ship_zip = nil
}

// SetShipCountry sets the "ship_country" field.
func (m *OrderMainMutation) SetShipCountry(s string) {
	m.ship_country = &s
}

// ShipCountry returns the value of the "ship_country" field in the mutation.
func (m *OrderMainMutation) ShipCountry() (r string, exists bool) {
	v := m.ship_country
	if v == nil {
		return
	}
	return *v, true
}

// OldShipCountry returns the old "ship_country" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipCountry: %w", err)
	}
	return oldValue.ShipCountry, nil
}

// ResetShipCountry resets all changes to the "ship_country" field.
func (m *OrderMainMutation) ResetShipCountry() {
	m.ship_country = nil
}

// SetShipCountryCode sets the "ship_country_code" field.
func (m *OrderMainMutation) SetShipCountryCode(s string) {
	m.ship_country_code = &s
}

// ShipCountryCode returns the value of the "ship_country_code" field in the mutation.
func (m *OrderMainMutation) ShipCountryCode() (r string, exists bool) {
	v := m.ship_country_code
	if v == nil {
		return
	}
	return *v, true
}

// OldShipCountryCode returns the old "ship_country_code" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipCountryCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipCountryCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipCountryCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipCountryCode: %w", err)
	}
	return oldValue.ShipCountryCode, nil
}

// ResetShipCountryCode resets all changes to the "ship_country_code" field.
func (m *OrderMainMutation) ResetShipCountryCode() {
	m.ship_country_code = nil
}

// SetShipPhone sets the "ship_phone" field.
func (m *OrderMainMutation) SetShipPhone(s string) {
	m.ship_phone = &s
}

// ShipPhone returns the value of the "ship_phone" field in the mutation.
func (m *OrderMainMutation) ShipPhone() (r string, exists bool) {
	v := m.ship_phone
	if v == nil {
		return
	}
	return *v, true
}

// OldShipPhone returns the old "ship_phone" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipPhone: %w", err)
	}
	return oldValue.ShipPhone, nil
}

// ResetShipPhone resets all changes to the "ship_phone" field.
func (m *OrderMainMutation) ResetShipPhone() {
	m.ship_phone = nil
}

// SetShipFax sets the "ship_fax" field.
func (m *OrderMainMutation) SetShipFax(s string) {
	m.ship_fax = &s
}

// ShipFax returns the value of the "ship_fax" field in the mutation.
func (m *OrderMainMutation) ShipFax() (r string, exists bool) {
	v := m.ship_fax
	if v == nil {
		return
	}
	return *v, true
}

// OldShipFax returns the old "ship_fax" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipFax(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipFax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipFax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipFax: %w", err)
	}
	return oldValue.ShipFax, nil
}

// ResetShipFax resets all changes to the "ship_fax" field.
func (m *OrderMainMutation) ResetShipFax() {
	m.ship_fax = nil
}

// SetShipRemark sets the "ship_remark" field.
func (m *OrderMainMutation) SetShipRemark(s string) {
	m.ship_remark = &s
}

// ShipRemark returns the value of the "ship_remark" field in the mutation.
func (m *OrderMainMutation) ShipRemark() (r string, exists bool) {
	v := m.ship_remark
	if v == nil {
		return
	}
	return *v, true
}

// OldShipRemark returns the old "ship_remark" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipRemark: %w", err)
	}
	return oldValue.ShipRemark, nil
}

// ResetShipRemark resets all changes to the "ship_remark" field.
func (m *OrderMainMutation) ResetShipRemark() {
	m.ship_remark = nil
}

// SetShipHouse sets the "ship_house" field.
func (m *OrderMainMutation) SetShipHouse(s string) {
	m.ship_house = &s
}

// ShipHouse returns the value of the "ship_house" field in the mutation.
func (m *OrderMainMutation) ShipHouse() (r string, exists bool) {
	v := m.ship_house
	if v == nil {
		return
	}
	return *v, true
}

// OldShipHouse returns the old "ship_house" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipHouse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipHouse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipHouse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipHouse: %w", err)
	}
	return oldValue.ShipHouse, nil
}

// ResetShipHouse resets all changes to the "ship_house" field.
func (m *OrderMainMutation) ResetShipHouse() {
	m.ship_house = nil
}

// SetShipCertificateCode sets the "ship_certificate_code" field.
func (m *OrderMainMutation) SetShipCertificateCode(s string) {
	m.ship_certificate_code = &s
}

// ShipCertificateCode returns the value of the "ship_certificate_code" field in the mutation.
func (m *OrderMainMutation) ShipCertificateCode() (r string, exists bool) {
	v := m.ship_certificate_code
	if v == nil {
		return
	}
	return *v, true
}

// OldShipCertificateCode returns the old "ship_certificate_code" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipCertificateCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipCertificateCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipCertificateCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipCertificateCode: %w", err)
	}
	return oldValue.ShipCertificateCode, nil
}

// ResetShipCertificateCode resets all changes to the "ship_certificate_code" field.
func (m *OrderMainMutation) ResetShipCertificateCode() {
	m.ship_certificate_code = nil
}

// SetOrderUserEmail sets the "order_user_email" field.
func (m *OrderMainMutation) SetOrderUserEmail(s string) {
	m.order_user_email = &s
}

// OrderUserEmail returns the value of the "order_user_email" field in the mutation.
func (m *OrderMainMutation) OrderUserEmail() (r string, exists bool) {
	v := m.order_user_email
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderUserEmail returns the old "order_user_email" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderUserEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderUserEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderUserEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderUserEmail: %w", err)
	}
	return oldValue.OrderUserEmail, nil
}

// ResetOrderUserEmail resets all changes to the "order_user_email" field.
func (m *OrderMainMutation) ResetOrderUserEmail() {
	m.order_user_email = nil
}

// SetOrdersUserID sets the "orders_user_id" field.
func (m *OrderMainMutation) SetOrdersUserID(s string) {
	m.orders_user_id = &s
}

// OrdersUserID returns the value of the "orders_user_id" field in the mutation.
func (m *OrderMainMutation) OrdersUserID() (r string, exists bool) {
	v := m.orders_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrdersUserID returns the old "orders_user_id" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrdersUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrdersUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrdersUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrdersUserID: %w", err)
	}
	return oldValue.OrdersUserID, nil
}

// ResetOrdersUserID resets all changes to the "orders_user_id" field.
func (m *OrderMainMutation) ResetOrdersUserID() {
	m.orders_user_id = nil
}

// SetCurrency sets the "currency" field.
func (m *OrderMainMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *OrderMainMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *OrderMainMutation) ResetCurrency() {
	m.currency = nil
}

// SetCurrenciesID sets the "currencies_id" field.
func (m *OrderMainMutation) SetCurrenciesID(i int32) {
	m.currencies_id = &i
	m.addcurrencies_id = nil
}

// CurrenciesID returns the value of the "currencies_id" field in the mutation.
func (m *OrderMainMutation) CurrenciesID() (r int32, exists bool) {
	v := m.currencies_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrenciesID returns the old "currencies_id" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldCurrenciesID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrenciesID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrenciesID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrenciesID: %w", err)
	}
	return oldValue.CurrenciesID, nil
}

// AddCurrenciesID adds i to the "currencies_id" field.
func (m *OrderMainMutation) AddCurrenciesID(i int32) {
	if m.addcurrencies_id != nil {
		*m.addcurrencies_id += i
	} else {
		m.addcurrencies_id = &i
	}
}

// AddedCurrenciesID returns the value that was added to the "currencies_id" field in this mutation.
func (m *OrderMainMutation) AddedCurrenciesID() (r int32, exists bool) {
	v := m.addcurrencies_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrenciesID resets all changes to the "currencies_id" field.
func (m *OrderMainMutation) ResetCurrenciesID() {
	m.currencies_id = nil
	m.addcurrencies_id = nil
}

// SetCurrencyRate sets the "currency_rate" field.
func (m *OrderMainMutation) SetCurrencyRate(f float64) {
	m.currency_rate = &f
	m.addcurrency_rate = nil
}

// CurrencyRate returns the value of the "currency_rate" field in the mutation.
func (m *OrderMainMutation) CurrencyRate() (r float64, exists bool) {
	v := m.currency_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrencyRate returns the old "currency_rate" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldCurrencyRate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrencyRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrencyRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrencyRate: %w", err)
	}
	return oldValue.CurrencyRate, nil
}

// AddCurrencyRate adds f to the "currency_rate" field.
func (m *OrderMainMutation) AddCurrencyRate(f float64) {
	if m.addcurrency_rate != nil {
		*m.addcurrency_rate += f
	} else {
		m.addcurrency_rate = &f
	}
}

// AddedCurrencyRate returns the value that was added to the "currency_rate" field in this mutation.
func (m *OrderMainMutation) AddedCurrencyRate() (r float64, exists bool) {
	v := m.addcurrency_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrencyRate resets all changes to the "currency_rate" field.
func (m *OrderMainMutation) ResetCurrencyRate() {
	m.currency_rate = nil
	m.addcurrency_rate = nil
}

// SetShippingMethod sets the "shipping_method" field.
func (m *OrderMainMutation) SetShippingMethod(s string) {
	m.shipping_method = &s
}

// ShippingMethod returns the value of the "shipping_method" field in the mutation.
func (m *OrderMainMutation) ShippingMethod() (r string, exists bool) {
	v := m.shipping_method
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingMethod returns the old "shipping_method" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShippingMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingMethod: %w", err)
	}
	return oldValue.ShippingMethod, nil
}

// ResetShippingMethod resets all changes to the "shipping_method" field.
func (m *OrderMainMutation) ResetShippingMethod() {
	m.shipping_method = nil
}

// SetShippingMethodOrig sets the "shipping_method_orig" field.
func (m *OrderMainMutation) SetShippingMethodOrig(s string) {
	m.shipping_method_orig = &s
}

// ShippingMethodOrig returns the value of the "shipping_method_orig" field in the mutation.
func (m *OrderMainMutation) ShippingMethodOrig() (r string, exists bool) {
	v := m.shipping_method_orig
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingMethodOrig returns the old "shipping_method_orig" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShippingMethodOrig(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingMethodOrig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingMethodOrig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingMethodOrig: %w", err)
	}
	return oldValue.ShippingMethodOrig, nil
}

// ResetShippingMethodOrig resets all changes to the "shipping_method_orig" field.
func (m *OrderMainMutation) ResetShippingMethodOrig() {
	m.shipping_method_orig = nil
}

// SetShippingMethodName sets the "shipping_method_name" field.
func (m *OrderMainMutation) SetShippingMethodName(s string) {
	m.shipping_method_name = &s
}

// ShippingMethodName returns the value of the "shipping_method_name" field in the mutation.
func (m *OrderMainMutation) ShippingMethodName() (r string, exists bool) {
	v := m.shipping_method_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingMethodName returns the old "shipping_method_name" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShippingMethodName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingMethodName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingMethodName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingMethodName: %w", err)
	}
	return oldValue.ShippingMethodName, nil
}

// ResetShippingMethodName resets all changes to the "shipping_method_name" field.
func (m *OrderMainMutation) ResetShippingMethodName() {
	m.shipping_method_name = nil
}

// SetGrandTotal sets the "grand_total" field.
func (m *OrderMainMutation) SetGrandTotal(f float64) {
	m.grand_total = &f
	m.addgrand_total = nil
}

// GrandTotal returns the value of the "grand_total" field in the mutation.
func (m *OrderMainMutation) GrandTotal() (r float64, exists bool) {
	v := m.grand_total
	if v == nil {
		return
	}
	return *v, true
}

// OldGrandTotal returns the old "grand_total" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldGrandTotal(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrandTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrandTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrandTotal: %w", err)
	}
	return oldValue.GrandTotal, nil
}

// AddGrandTotal adds f to the "grand_total" field.
func (m *OrderMainMutation) AddGrandTotal(f float64) {
	if m.addgrand_total != nil {
		*m.addgrand_total += f
	} else {
		m.addgrand_total = &f
	}
}

// AddedGrandTotal returns the value that was added to the "grand_total" field in this mutation.
func (m *OrderMainMutation) AddedGrandTotal() (r float64, exists bool) {
	v := m.addgrand_total
	if v == nil {
		return
	}
	return *v, true
}

// ResetGrandTotal resets all changes to the "grand_total" field.
func (m *OrderMainMutation) ResetGrandTotal() {
	m.grand_total = nil
	m.addgrand_total = nil
}

// SetTrackNumber sets the "track_number" field.
func (m *OrderMainMutation) SetTrackNumber(s string) {
	m.track_number = &s
}

// TrackNumber returns the value of the "track_number" field in the mutation.
func (m *OrderMainMutation) TrackNumber() (r string, exists bool) {
	v := m.track_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTrackNumber returns the old "track_number" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldTrackNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrackNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrackNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrackNumber: %w", err)
	}
	return oldValue.TrackNumber, nil
}

// ResetTrackNumber resets all changes to the "track_number" field.
func (m *OrderMainMutation) ResetTrackNumber() {
	m.track_number = nil
}

// SetFollowNumber sets the "follow_number" field.
func (m *OrderMainMutation) SetFollowNumber(s string) {
	m.follow_number = &s
}

// FollowNumber returns the value of the "follow_number" field in the mutation.
func (m *OrderMainMutation) FollowNumber() (r string, exists bool) {
	v := m.follow_number
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowNumber returns the old "follow_number" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldFollowNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowNumber: %w", err)
	}
	return oldValue.FollowNumber, nil
}

// ResetFollowNumber resets all changes to the "follow_number" field.
func (m *OrderMainMutation) ResetFollowNumber() {
	m.follow_number = nil
}

// SetDatePayment sets the "date_payment" field.
func (m *OrderMainMutation) SetDatePayment(t time.Time) {
	m.date_payment = &t
}

// DatePayment returns the value of the "date_payment" field in the mutation.
func (m *OrderMainMutation) DatePayment() (r time.Time, exists bool) {
	v := m.date_payment
	if v == nil {
		return
	}
	return *v, true
}

// OldDatePayment returns the old "date_payment" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldDatePayment(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDatePayment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDatePayment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatePayment: %w", err)
	}
	return oldValue.DatePayment, nil
}

// ResetDatePayment resets all changes to the "date_payment" field.
func (m *OrderMainMutation) ResetDatePayment() {
	m.date_payment = nil
}

// SetTransactionNumber sets the "transaction_number" field.
func (m *OrderMainMutation) SetTransactionNumber(s string) {
	m.transaction_number = &s
}

// TransactionNumber returns the value of the "transaction_number" field in the mutation.
func (m *OrderMainMutation) TransactionNumber() (r string, exists bool) {
	v := m.transaction_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionNumber returns the old "transaction_number" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldTransactionNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionNumber: %w", err)
	}
	return oldValue.TransactionNumber, nil
}

// ResetTransactionNumber resets all changes to the "transaction_number" field.
func (m *OrderMainMutation) ResetTransactionNumber() {
	m.transaction_number = nil
}

// SetTransactionFee sets the "transaction_fee" field.
func (m *OrderMainMutation) SetTransactionFee(f float64) {
	m.transaction_fee = &f
	m.addtransaction_fee = nil
}

// TransactionFee returns the value of the "transaction_fee" field in the mutation.
func (m *OrderMainMutation) TransactionFee() (r float64, exists bool) {
	v := m.transaction_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionFee returns the old "transaction_fee" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldTransactionFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionFee: %w", err)
	}
	return oldValue.TransactionFee, nil
}

// AddTransactionFee adds f to the "transaction_fee" field.
func (m *OrderMainMutation) AddTransactionFee(f float64) {
	if m.addtransaction_fee != nil {
		*m.addtransaction_fee += f
	} else {
		m.addtransaction_fee = &f
	}
}

// AddedTransactionFee returns the value that was added to the "transaction_fee" field in this mutation.
func (m *OrderMainMutation) AddedTransactionFee() (r float64, exists bool) {
	v := m.addtransaction_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetTransactionFee resets all changes to the "transaction_fee" field.
func (m *OrderMainMutation) ResetTransactionFee() {
	m.transaction_fee = nil
	m.addtransaction_fee = nil
}

// SetUpdateTrackTime sets the "update_track_time" field.
func (m *OrderMainMutation) SetUpdateTrackTime(t time.Time) {
	m.update_track_time = &t
}

// UpdateTrackTime returns the value of the "update_track_time" field in the mutation.
func (m *OrderMainMutation) UpdateTrackTime() (r time.Time, exists bool) {
	v := m.update_track_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTrackTime returns the old "update_track_time" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldUpdateTrackTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTrackTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTrackTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTrackTime: %w", err)
	}
	return oldValue.UpdateTrackTime, nil
}

// ResetUpdateTrackTime resets all changes to the "update_track_time" field.
func (m *OrderMainMutation) ResetUpdateTrackTime() {
	m.update_track_time = nil
}

// SetUpdateFollowTime sets the "update_follow_time" field.
func (m *OrderMainMutation) SetUpdateFollowTime(t time.Time) {
	m.update_follow_time = &t
}

// UpdateFollowTime returns the value of the "update_follow_time" field in the mutation.
func (m *OrderMainMutation) UpdateFollowTime() (r time.Time, exists bool) {
	v := m.update_follow_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateFollowTime returns the old "update_follow_time" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldUpdateFollowTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateFollowTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateFollowTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateFollowTime: %w", err)
	}
	return oldValue.UpdateFollowTime, nil
}

// ResetUpdateFollowTime resets all changes to the "update_follow_time" field.
func (m *OrderMainMutation) ResetUpdateFollowTime() {
	m.update_follow_time = nil
}

// SetShippingCost sets the "shipping_cost" field.
func (m *OrderMainMutation) SetShippingCost(f float64) {
	m.shipping_cost = &f
	m.addshipping_cost = nil
}

// ShippingCost returns the value of the "shipping_cost" field in the mutation.
func (m *OrderMainMutation) ShippingCost() (r float64, exists bool) {
	v := m.shipping_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingCost returns the old "shipping_cost" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShippingCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingCost: %w", err)
	}
	return oldValue.ShippingCost, nil
}

// AddShippingCost adds f to the "shipping_cost" field.
func (m *OrderMainMutation) AddShippingCost(f float64) {
	if m.addshipping_cost != nil {
		*m.addshipping_cost += f
	} else {
		m.addshipping_cost = &f
	}
}

// AddedShippingCost returns the value that was added to the "shipping_cost" field in this mutation.
func (m *OrderMainMutation) AddedShippingCost() (r float64, exists bool) {
	v := m.addshipping_cost
	if v == nil {
		return
	}
	return *v, true
}

// ResetShippingCost resets all changes to the "shipping_cost" field.
func (m *OrderMainMutation) ResetShippingCost() {
	m.shipping_cost = nil
	m.addshipping_cost = nil
}

// SetShippingCostExt sets the "shipping_cost_ext" field.
func (m *OrderMainMutation) SetShippingCostExt(f float64) {
	m.shipping_cost_ext = &f
	m.addshipping_cost_ext = nil
}

// ShippingCostExt returns the value of the "shipping_cost_ext" field in the mutation.
func (m *OrderMainMutation) ShippingCostExt() (r float64, exists bool) {
	v := m.shipping_cost_ext
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingCostExt returns the old "shipping_cost_ext" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShippingCostExt(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingCostExt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingCostExt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingCostExt: %w", err)
	}
	return oldValue.ShippingCostExt, nil
}

// AddShippingCostExt adds f to the "shipping_cost_ext" field.
func (m *OrderMainMutation) AddShippingCostExt(f float64) {
	if m.addshipping_cost_ext != nil {
		*m.addshipping_cost_ext += f
	} else {
		m.addshipping_cost_ext = &f
	}
}

// AddedShippingCostExt returns the value that was added to the "shipping_cost_ext" field in this mutation.
func (m *OrderMainMutation) AddedShippingCostExt() (r float64, exists bool) {
	v := m.addshipping_cost_ext
	if v == nil {
		return
	}
	return *v, true
}

// ResetShippingCostExt resets all changes to the "shipping_cost_ext" field.
func (m *OrderMainMutation) ResetShippingCostExt() {
	m.shipping_cost_ext = nil
	m.addshipping_cost_ext = nil
}

// SetTaxesNumber sets the "taxes_number" field.
func (m *OrderMainMutation) SetTaxesNumber(s string) {
	m.taxes_number = &s
}

// TaxesNumber returns the value of the "taxes_number" field in the mutation.
func (m *OrderMainMutation) TaxesNumber() (r string, exists bool) {
	v := m.taxes_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTaxesNumber returns the old "taxes_number" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldTaxesNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaxesNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaxesNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaxesNumber: %w", err)
	}
	return oldValue.TaxesNumber, nil
}

// ResetTaxesNumber resets all changes to the "taxes_number" field.
func (m *OrderMainMutation) ResetTaxesNumber() {
	m.taxes_number = nil
}

// SetTax sets the "tax" field.
func (m *OrderMainMutation) SetTax(f float64) {
	m.tax = &f
	m.addtax = nil
}

// Tax returns the value of the "tax" field in the mutation.
func (m *OrderMainMutation) Tax() (r float64, exists bool) {
	v := m.tax
	if v == nil {
		return
	}
	return *v, true
}

// OldTax returns the old "tax" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldTax(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTax: %w", err)
	}
	return oldValue.Tax, nil
}

// AddTax adds f to the "tax" field.
func (m *OrderMainMutation) AddTax(f float64) {
	if m.addtax != nil {
		*m.addtax += f
	} else {
		m.addtax = &f
	}
}

// AddedTax returns the value that was added to the "tax" field in this mutation.
func (m *OrderMainMutation) AddedTax() (r float64, exists bool) {
	v := m.addtax
	if v == nil {
		return
	}
	return *v, true
}

// ResetTax resets all changes to the "tax" field.
func (m *OrderMainMutation) ResetTax() {
	m.tax = nil
	m.addtax = nil
}

// SetOrderDiscount sets the "order_discount" field.
func (m *OrderMainMutation) SetOrderDiscount(f float64) {
	m.order_discount = &f
	m.addorder_discount = nil
}

// OrderDiscount returns the value of the "order_discount" field in the mutation.
func (m *OrderMainMutation) OrderDiscount() (r float64, exists bool) {
	v := m.order_discount
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderDiscount returns the old "order_discount" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderDiscount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderDiscount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderDiscount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderDiscount: %w", err)
	}
	return oldValue.OrderDiscount, nil
}

// AddOrderDiscount adds f to the "order_discount" field.
func (m *OrderMainMutation) AddOrderDiscount(f float64) {
	if m.addorder_discount != nil {
		*m.addorder_discount += f
	} else {
		m.addorder_discount = &f
	}
}

// AddedOrderDiscount returns the value that was added to the "order_discount" field in this mutation.
func (m *OrderMainMutation) AddedOrderDiscount() (r float64, exists bool) {
	v := m.addorder_discount
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderDiscount resets all changes to the "order_discount" field.
func (m *OrderMainMutation) ResetOrderDiscount() {
	m.order_discount = nil
	m.addorder_discount = nil
}

// SetInsurance sets the "insurance" field.
func (m *OrderMainMutation) SetInsurance(f float64) {
	m.insurance = &f
	m.addinsurance = nil
}

// Insurance returns the value of the "insurance" field in the mutation.
func (m *OrderMainMutation) Insurance() (r float64, exists bool) {
	v := m.insurance
	if v == nil {
		return
	}
	return *v, true
}

// OldInsurance returns the old "insurance" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldInsurance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInsurance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInsurance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInsurance: %w", err)
	}
	return oldValue.Insurance, nil
}

// AddInsurance adds f to the "insurance" field.
func (m *OrderMainMutation) AddInsurance(f float64) {
	if m.addinsurance != nil {
		*m.addinsurance += f
	} else {
		m.addinsurance = &f
	}
}

// AddedInsurance returns the value that was added to the "insurance" field in this mutation.
func (m *OrderMainMutation) AddedInsurance() (r float64, exists bool) {
	v := m.addinsurance
	if v == nil {
		return
	}
	return *v, true
}

// ResetInsurance resets all changes to the "insurance" field.
func (m *OrderMainMutation) ResetInsurance() {
	m.insurance = nil
	m.addinsurance = nil
}

// SetOrderWeight sets the "order_weight" field.
func (m *OrderMainMutation) SetOrderWeight(f float64) {
	m.order_weight = &f
	m.addorder_weight = nil
}

// OrderWeight returns the value of the "order_weight" field in the mutation.
func (m *OrderMainMutation) OrderWeight() (r float64, exists bool) {
	v := m.order_weight
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderWeight returns the old "order_weight" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderWeight: %w", err)
	}
	return oldValue.OrderWeight, nil
}

// AddOrderWeight adds f to the "order_weight" field.
func (m *OrderMainMutation) AddOrderWeight(f float64) {
	if m.addorder_weight != nil {
		*m.addorder_weight += f
	} else {
		m.addorder_weight = &f
	}
}

// AddedOrderWeight returns the value that was added to the "order_weight" field in this mutation.
func (m *OrderMainMutation) AddedOrderWeight() (r float64, exists bool) {
	v := m.addorder_weight
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderWeight resets all changes to the "order_weight" field.
func (m *OrderMainMutation) ResetOrderWeight() {
	m.order_weight = nil
	m.addorder_weight = nil
}

// SetOrderCretateType sets the "order_cretate_type" field.
func (m *OrderMainMutation) SetOrderCretateType(oct ordermain.OrderCretateType) {
	m.order_cretate_type = &oct
}

// OrderCretateType returns the value of the "order_cretate_type" field in the mutation.
func (m *OrderMainMutation) OrderCretateType() (r ordermain.OrderCretateType, exists bool) {
	v := m.order_cretate_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderCretateType returns the old "order_cretate_type" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderCretateType(ctx context.Context) (v ordermain.OrderCretateType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderCretateType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderCretateType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderCretateType: %w", err)
	}
	return oldValue.OrderCretateType, nil
}

// ResetOrderCretateType resets all changes to the "order_cretate_type" field.
func (m *OrderMainMutation) ResetOrderCretateType() {
	m.order_cretate_type = nil
}

// SetOrderType sets the "order_type" field.
func (m *OrderMainMutation) SetOrderType(i int8) {
	m.order_type = &i
	m.addorder_type = nil
}

// OrderType returns the value of the "order_type" field in the mutation.
func (m *OrderMainMutation) OrderType() (r int8, exists bool) {
	v := m.order_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderType returns the old "order_type" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderType: %w", err)
	}
	return oldValue.OrderType, nil
}

// AddOrderType adds i to the "order_type" field.
func (m *OrderMainMutation) AddOrderType(i int8) {
	if m.addorder_type != nil {
		*m.addorder_type += i
	} else {
		m.addorder_type = &i
	}
}

// AddedOrderType returns the value that was added to the "order_type" field in this mutation.
func (m *OrderMainMutation) AddedOrderType() (r int8, exists bool) {
	v := m.addorder_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderType resets all changes to the "order_type" field.
func (m *OrderMainMutation) ResetOrderType() {
	m.order_type = nil
	m.addorder_type = nil
}

// SetStoreCreatedAt sets the "store_created_at" field.
func (m *OrderMainMutation) SetStoreCreatedAt(t time.Time) {
	m.store_created_at = &t
}

// StoreCreatedAt returns the value of the "store_created_at" field in the mutation.
func (m *OrderMainMutation) StoreCreatedAt() (r time.Time, exists bool) {
	v := m.store_created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreCreatedAt returns the old "store_created_at" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldStoreCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreCreatedAt: %w", err)
	}
	return oldValue.StoreCreatedAt, nil
}

// ResetStoreCreatedAt resets all changes to the "store_created_at" field.
func (m *OrderMainMutation) ResetStoreCreatedAt() {
	m.store_created_at = nil
}

// SetSubOrdersCode sets the "sub_orders_code" field.
func (m *OrderMainMutation) SetSubOrdersCode(s string) {
	m.sub_orders_code = &s
}

// SubOrdersCode returns the value of the "sub_orders_code" field in the mutation.
func (m *OrderMainMutation) SubOrdersCode() (r string, exists bool) {
	v := m.sub_orders_code
	if v == nil {
		return
	}
	return *v, true
}

// OldSubOrdersCode returns the old "sub_orders_code" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldSubOrdersCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubOrdersCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubOrdersCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubOrdersCode: %w", err)
	}
	return oldValue.SubOrdersCode, nil
}

// ResetSubOrdersCode resets all changes to the "sub_orders_code" field.
func (m *OrderMainMutation) ResetSubOrdersCode() {
	m.sub_orders_code = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderMainMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderMainMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderMainMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderMainMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderMainMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderMainMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetWarehouseID sets the "warehouse_id" field.
func (m *OrderMainMutation) SetWarehouseID(s string) {
	m.warehouse_id = &s
}

// WarehouseID returns the value of the "warehouse_id" field in the mutation.
func (m *OrderMainMutation) WarehouseID() (r string, exists bool) {
	v := m.warehouse_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWarehouseID returns the old "warehouse_id" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldWarehouseID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWarehouseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWarehouseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWarehouseID: %w", err)
	}
	return oldValue.WarehouseID, nil
}

// ResetWarehouseID resets all changes to the "warehouse_id" field.
func (m *OrderMainMutation) ResetWarehouseID() {
	m.warehouse_id = nil
}

// SetOrderListType sets the "order_list_type" field.
func (m *OrderMainMutation) SetOrderListType(i int8) {
	m.order_list_type = &i
	m.addorder_list_type = nil
}

// OrderListType returns the value of the "order_list_type" field in the mutation.
func (m *OrderMainMutation) OrderListType() (r int8, exists bool) {
	v := m.order_list_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderListType returns the old "order_list_type" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderListType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderListType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderListType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderListType: %w", err)
	}
	return oldValue.OrderListType, nil
}

// AddOrderListType adds i to the "order_list_type" field.
func (m *OrderMainMutation) AddOrderListType(i int8) {
	if m.addorder_list_type != nil {
		*m.addorder_list_type += i
	} else {
		m.addorder_list_type = &i
	}
}

// AddedOrderListType returns the value that was added to the "order_list_type" field in this mutation.
func (m *OrderMainMutation) AddedOrderListType() (r int8, exists bool) {
	v := m.addorder_list_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderListType resets all changes to the "order_list_type" field.
func (m *OrderMainMutation) ResetOrderListType() {
	m.order_list_type = nil
	m.addorder_list_type = nil
}

// SetOrderBatchNo sets the "order_batch_no" field.
func (m *OrderMainMutation) SetOrderBatchNo(s string) {
	m.order_batch_no = &s
}

// OrderBatchNo returns the value of the "order_batch_no" field in the mutation.
func (m *OrderMainMutation) OrderBatchNo() (r string, exists bool) {
	v := m.order_batch_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderBatchNo returns the old "order_batch_no" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderBatchNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderBatchNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderBatchNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderBatchNo: %w", err)
	}
	return oldValue.OrderBatchNo, nil
}

// ResetOrderBatchNo resets all changes to the "order_batch_no" field.
func (m *OrderMainMutation) ResetOrderBatchNo() {
	m.order_batch_no = nil
}

// SetShopID sets the "shop_id" field.
func (m *OrderMainMutation) SetShopID(i int32) {
	m.shop_id = &i
	m.addshop_id = nil
}

// ShopID returns the value of the "shop_id" field in the mutation.
func (m *OrderMainMutation) ShopID() (r int32, exists bool) {
	v := m.shop_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShopID returns the old "shop_id" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShopID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopID: %w", err)
	}
	return oldValue.ShopID, nil
}

// AddShopID adds i to the "shop_id" field.
func (m *OrderMainMutation) AddShopID(i int32) {
	if m.addshop_id != nil {
		*m.addshop_id += i
	} else {
		m.addshop_id = &i
	}
}

// AddedShopID returns the value that was added to the "shop_id" field in this mutation.
func (m *OrderMainMutation) AddedShopID() (r int32, exists bool) {
	v := m.addshop_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetShopID resets all changes to the "shop_id" field.
func (m *OrderMainMutation) ResetShopID() {
	m.shop_id = nil
	m.addshop_id = nil
}

// SetSubtotal sets the "subtotal" field.
func (m *OrderMainMutation) SetSubtotal(f float64) {
	m.subtotal = &f
	m.addsubtotal = nil
}

// Subtotal returns the value of the "subtotal" field in the mutation.
func (m *OrderMainMutation) Subtotal() (r float64, exists bool) {
	v := m.subtotal
	if v == nil {
		return
	}
	return *v, true
}

// OldSubtotal returns the old "subtotal" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldSubtotal(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubtotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubtotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubtotal: %w", err)
	}
	return oldValue.Subtotal, nil
}

// AddSubtotal adds f to the "subtotal" field.
func (m *OrderMainMutation) AddSubtotal(f float64) {
	if m.addsubtotal != nil {
		*m.addsubtotal += f
	} else {
		m.addsubtotal = &f
	}
}

// AddedSubtotal returns the value that was added to the "subtotal" field in this mutation.
func (m *OrderMainMutation) AddedSubtotal() (r float64, exists bool) {
	v := m.addsubtotal
	if v == nil {
		return
	}
	return *v, true
}

// ResetSubtotal resets all changes to the "subtotal" field.
func (m *OrderMainMutation) ResetSubtotal() {
	m.subtotal = nil
	m.addsubtotal = nil
}

// SetShippingFree sets the "shipping_free" field.
func (m *OrderMainMutation) SetShippingFree(f float64) {
	m.shipping_free = &f
	m.addshipping_free = nil
}

// ShippingFree returns the value of the "shipping_free" field in the mutation.
func (m *OrderMainMutation) ShippingFree() (r float64, exists bool) {
	v := m.shipping_free
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingFree returns the old "shipping_free" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShippingFree(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingFree is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingFree requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingFree: %w", err)
	}
	return oldValue.ShippingFree, nil
}

// AddShippingFree adds f to the "shipping_free" field.
func (m *OrderMainMutation) AddShippingFree(f float64) {
	if m.addshipping_free != nil {
		*m.addshipping_free += f
	} else {
		m.addshipping_free = &f
	}
}

// AddedShippingFree returns the value that was added to the "shipping_free" field in this mutation.
func (m *OrderMainMutation) AddedShippingFree() (r float64, exists bool) {
	v := m.addshipping_free
	if v == nil {
		return
	}
	return *v, true
}

// ResetShippingFree resets all changes to the "shipping_free" field.
func (m *OrderMainMutation) ResetShippingFree() {
	m.shipping_free = nil
	m.addshipping_free = nil
}

// SetOrderCost sets the "order_cost" field.
func (m *OrderMainMutation) SetOrderCost(f float64) {
	m.order_cost = &f
	m.addorder_cost = nil
}

// OrderCost returns the value of the "order_cost" field in the mutation.
func (m *OrderMainMutation) OrderCost() (r float64, exists bool) {
	v := m.order_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderCost returns the old "order_cost" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderCost: %w", err)
	}
	return oldValue.OrderCost, nil
}

// AddOrderCost adds f to the "order_cost" field.
func (m *OrderMainMutation) AddOrderCost(f float64) {
	if m.addorder_cost != nil {
		*m.addorder_cost += f
	} else {
		m.addorder_cost = &f
	}
}

// AddedOrderCost returns the value that was added to the "order_cost" field in this mutation.
func (m *OrderMainMutation) AddedOrderCost() (r float64, exists bool) {
	v := m.addorder_cost
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderCost resets all changes to the "order_cost" field.
func (m *OrderMainMutation) ResetOrderCost() {
	m.order_cost = nil
	m.addorder_cost = nil
}

// SetOrderProfit sets the "order_profit" field.
func (m *OrderMainMutation) SetOrderProfit(f float64) {
	m.order_profit = &f
	m.addorder_profit = nil
}

// OrderProfit returns the value of the "order_profit" field in the mutation.
func (m *OrderMainMutation) OrderProfit() (r float64, exists bool) {
	v := m.order_profit
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderProfit returns the old "order_profit" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderProfit(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderProfit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderProfit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderProfit: %w", err)
	}
	return oldValue.OrderProfit, nil
}

// AddOrderProfit adds f to the "order_profit" field.
func (m *OrderMainMutation) AddOrderProfit(f float64) {
	if m.addorder_profit != nil {
		*m.addorder_profit += f
	} else {
		m.addorder_profit = &f
	}
}

// AddedOrderProfit returns the value that was added to the "order_profit" field in this mutation.
func (m *OrderMainMutation) AddedOrderProfit() (r float64, exists bool) {
	v := m.addorder_profit
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderProfit resets all changes to the "order_profit" field.
func (m *OrderMainMutation) ResetOrderProfit() {
	m.order_profit = nil
	m.addorder_profit = nil
}

// SetShipDate sets the "ship_date" field.
func (m *OrderMainMutation) SetShipDate(t time.Time) {
	m.ship_date = &t
}

// ShipDate returns the value of the "ship_date" field in the mutation.
func (m *OrderMainMutation) ShipDate() (r time.Time, exists bool) {
	v := m.ship_date
	if v == nil {
		return
	}
	return *v, true
}

// OldShipDate returns the old "ship_date" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShipDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShipDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShipDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipDate: %w", err)
	}
	return oldValue.ShipDate, nil
}

// ResetShipDate resets all changes to the "ship_date" field.
func (m *OrderMainMutation) ResetShipDate() {
	m.ship_date = nil
}

// SetCommission sets the "commission" field.
func (m *OrderMainMutation) SetCommission(f float64) {
	m.commission = &f
	m.addcommission = nil
}

// Commission returns the value of the "commission" field in the mutation.
func (m *OrderMainMutation) Commission() (r float64, exists bool) {
	v := m.commission
	if v == nil {
		return
	}
	return *v, true
}

// OldCommission returns the old "commission" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldCommission(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommission is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommission requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommission: %w", err)
	}
	return oldValue.Commission, nil
}

// AddCommission adds f to the "commission" field.
func (m *OrderMainMutation) AddCommission(f float64) {
	if m.addcommission != nil {
		*m.addcommission += f
	} else {
		m.addcommission = &f
	}
}

// AddedCommission returns the value that was added to the "commission" field in this mutation.
func (m *OrderMainMutation) AddedCommission() (r float64, exists bool) {
	v := m.addcommission
	if v == nil {
		return
	}
	return *v, true
}

// ResetCommission resets all changes to the "commission" field.
func (m *OrderMainMutation) ResetCommission() {
	m.commission = nil
	m.addcommission = nil
}

// SetInterceptState sets the "intercept_state" field.
func (m *OrderMainMutation) SetInterceptState(i int8) {
	m.intercept_state = &i
	m.addintercept_state = nil
}

// InterceptState returns the value of the "intercept_state" field in the mutation.
func (m *OrderMainMutation) InterceptState() (r int8, exists bool) {
	v := m.intercept_state
	if v == nil {
		return
	}
	return *v, true
}

// OldInterceptState returns the old "intercept_state" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldInterceptState(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInterceptState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInterceptState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInterceptState: %w", err)
	}
	return oldValue.InterceptState, nil
}

// AddInterceptState adds i to the "intercept_state" field.
func (m *OrderMainMutation) AddInterceptState(i int8) {
	if m.addintercept_state != nil {
		*m.addintercept_state += i
	} else {
		m.addintercept_state = &i
	}
}

// AddedInterceptState returns the value that was added to the "intercept_state" field in this mutation.
func (m *OrderMainMutation) AddedInterceptState() (r int8, exists bool) {
	v := m.addintercept_state
	if v == nil {
		return
	}
	return *v, true
}

// ResetInterceptState resets all changes to the "intercept_state" field.
func (m *OrderMainMutation) ResetInterceptState() {
	m.intercept_state = nil
	m.addintercept_state = nil
}

// SetSendOrderTime sets the "send_order_time" field.
func (m *OrderMainMutation) SetSendOrderTime(t time.Time) {
	m.send_order_time = &t
}

// SendOrderTime returns the value of the "send_order_time" field in the mutation.
func (m *OrderMainMutation) SendOrderTime() (r time.Time, exists bool) {
	v := m.send_order_time
	if v == nil {
		return
	}
	return *v, true
}

// OldSendOrderTime returns the old "send_order_time" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldSendOrderTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSendOrderTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSendOrderTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSendOrderTime: %w", err)
	}
	return oldValue.SendOrderTime, nil
}

// ResetSendOrderTime resets all changes to the "send_order_time" field.
func (m *OrderMainMutation) ResetSendOrderTime() {
	m.send_order_time = nil
}

// SetSendOrderUser sets the "send_order_user" field.
func (m *OrderMainMutation) SetSendOrderUser(s string) {
	m.send_order_user = &s
}

// SendOrderUser returns the value of the "send_order_user" field in the mutation.
func (m *OrderMainMutation) SendOrderUser() (r string, exists bool) {
	v := m.send_order_user
	if v == nil {
		return
	}
	return *v, true
}

// OldSendOrderUser returns the old "send_order_user" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldSendOrderUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSendOrderUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSendOrderUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSendOrderUser: %w", err)
	}
	return oldValue.SendOrderUser, nil
}

// ResetSendOrderUser resets all changes to the "send_order_user" field.
func (m *OrderMainMutation) ResetSendOrderUser() {
	m.send_order_user = nil
}

// SetProviderType sets the "provider_type" field.
func (m *OrderMainMutation) SetProviderType(i int8) {
	m.provider_type = &i
	m.addprovider_type = nil
}

// ProviderType returns the value of the "provider_type" field in the mutation.
func (m *OrderMainMutation) ProviderType() (r int8, exists bool) {
	v := m.provider_type
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderType returns the old "provider_type" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldProviderType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderType: %w", err)
	}
	return oldValue.ProviderType, nil
}

// AddProviderType adds i to the "provider_type" field.
func (m *OrderMainMutation) AddProviderType(i int8) {
	if m.addprovider_type != nil {
		*m.addprovider_type += i
	} else {
		m.addprovider_type = &i
	}
}

// AddedProviderType returns the value that was added to the "provider_type" field in this mutation.
func (m *OrderMainMutation) AddedProviderType() (r int8, exists bool) {
	v := m.addprovider_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetProviderType resets all changes to the "provider_type" field.
func (m *OrderMainMutation) ResetProviderType() {
	m.provider_type = nil
	m.addprovider_type = nil
}

// SetOrderPackCost sets the "order_pack_cost" field.
func (m *OrderMainMutation) SetOrderPackCost(f float64) {
	m.order_pack_cost = &f
	m.addorder_pack_cost = nil
}

// OrderPackCost returns the value of the "order_pack_cost" field in the mutation.
func (m *OrderMainMutation) OrderPackCost() (r float64, exists bool) {
	v := m.order_pack_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderPackCost returns the old "order_pack_cost" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderPackCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderPackCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderPackCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderPackCost: %w", err)
	}
	return oldValue.OrderPackCost, nil
}

// AddOrderPackCost adds f to the "order_pack_cost" field.
func (m *OrderMainMutation) AddOrderPackCost(f float64) {
	if m.addorder_pack_cost != nil {
		*m.addorder_pack_cost += f
	} else {
		m.addorder_pack_cost = &f
	}
}

// AddedOrderPackCost returns the value that was added to the "order_pack_cost" field in this mutation.
func (m *OrderMainMutation) AddedOrderPackCost() (r float64, exists bool) {
	v := m.addorder_pack_cost
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderPackCost resets all changes to the "order_pack_cost" field.
func (m *OrderMainMutation) ResetOrderPackCost() {
	m.order_pack_cost = nil
	m.addorder_pack_cost = nil
}

// SetPaymentFixCost sets the "payment_fix_cost" field.
func (m *OrderMainMutation) SetPaymentFixCost(f float64) {
	m.payment_fix_cost = &f
	m.addpayment_fix_cost = nil
}

// PaymentFixCost returns the value of the "payment_fix_cost" field in the mutation.
func (m *OrderMainMutation) PaymentFixCost() (r float64, exists bool) {
	v := m.payment_fix_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentFixCost returns the old "payment_fix_cost" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldPaymentFixCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentFixCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentFixCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentFixCost: %w", err)
	}
	return oldValue.PaymentFixCost, nil
}

// AddPaymentFixCost adds f to the "payment_fix_cost" field.
func (m *OrderMainMutation) AddPaymentFixCost(f float64) {
	if m.addpayment_fix_cost != nil {
		*m.addpayment_fix_cost += f
	} else {
		m.addpayment_fix_cost = &f
	}
}

// AddedPaymentFixCost returns the value that was added to the "payment_fix_cost" field in this mutation.
func (m *OrderMainMutation) AddedPaymentFixCost() (r float64, exists bool) {
	v := m.addpayment_fix_cost
	if v == nil {
		return
	}
	return *v, true
}

// ResetPaymentFixCost resets all changes to the "payment_fix_cost" field.
func (m *OrderMainMutation) ResetPaymentFixCost() {
	m.payment_fix_cost = nil
	m.addpayment_fix_cost = nil
}

// SetIsFbaBehalf sets the "is_fba_behalf" field.
func (m *OrderMainMutation) SetIsFbaBehalf(i int8) {
	m.is_fba_behalf = &i
	m.addis_fba_behalf = nil
}

// IsFbaBehalf returns the value of the "is_fba_behalf" field in the mutation.
func (m *OrderMainMutation) IsFbaBehalf() (r int8, exists bool) {
	v := m.is_fba_behalf
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFbaBehalf returns the old "is_fba_behalf" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldIsFbaBehalf(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsFbaBehalf is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsFbaBehalf requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsFbaBehalf: %w", err)
	}
	return oldValue.IsFbaBehalf, nil
}

// AddIsFbaBehalf adds i to the "is_fba_behalf" field.
func (m *OrderMainMutation) AddIsFbaBehalf(i int8) {
	if m.addis_fba_behalf != nil {
		*m.addis_fba_behalf += i
	} else {
		m.addis_fba_behalf = &i
	}
}

// AddedIsFbaBehalf returns the value that was added to the "is_fba_behalf" field in this mutation.
func (m *OrderMainMutation) AddedIsFbaBehalf() (r int8, exists bool) {
	v := m.addis_fba_behalf
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsFbaBehalf resets all changes to the "is_fba_behalf" field.
func (m *OrderMainMutation) ResetIsFbaBehalf() {
	m.is_fba_behalf = nil
	m.addis_fba_behalf = nil
}

// SetFulfillType sets the "fulfill_type" field.
func (m *OrderMainMutation) SetFulfillType(i int8) {
	m.fulfill_type = &i
	m.addfulfill_type = nil
}

// FulfillType returns the value of the "fulfill_type" field in the mutation.
func (m *OrderMainMutation) FulfillType() (r int8, exists bool) {
	v := m.fulfill_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFulfillType returns the old "fulfill_type" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldFulfillType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFulfillType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFulfillType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFulfillType: %w", err)
	}
	return oldValue.FulfillType, nil
}

// AddFulfillType adds i to the "fulfill_type" field.
func (m *OrderMainMutation) AddFulfillType(i int8) {
	if m.addfulfill_type != nil {
		*m.addfulfill_type += i
	} else {
		m.addfulfill_type = &i
	}
}

// AddedFulfillType returns the value that was added to the "fulfill_type" field in this mutation.
func (m *OrderMainMutation) AddedFulfillType() (r int8, exists bool) {
	v := m.addfulfill_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetFulfillType resets all changes to the "fulfill_type" field.
func (m *OrderMainMutation) ResetFulfillType() {
	m.fulfill_type = nil
	m.addfulfill_type = nil
}

// SetFulfillException sets the "fulfill_exception" field.
func (m *OrderMainMutation) SetFulfillException(i int8) {
	m.fulfill_exception = &i
	m.addfulfill_exception = nil
}

// FulfillException returns the value of the "fulfill_exception" field in the mutation.
func (m *OrderMainMutation) FulfillException() (r int8, exists bool) {
	v := m.fulfill_exception
	if v == nil {
		return
	}
	return *v, true
}

// OldFulfillException returns the old "fulfill_exception" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldFulfillException(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFulfillException is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFulfillException requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFulfillException: %w", err)
	}
	return oldValue.FulfillException, nil
}

// AddFulfillException adds i to the "fulfill_exception" field.
func (m *OrderMainMutation) AddFulfillException(i int8) {
	if m.addfulfill_exception != nil {
		*m.addfulfill_exception += i
	} else {
		m.addfulfill_exception = &i
	}
}

// AddedFulfillException returns the value that was added to the "fulfill_exception" field in this mutation.
func (m *OrderMainMutation) AddedFulfillException() (r int8, exists bool) {
	v := m.addfulfill_exception
	if v == nil {
		return
	}
	return *v, true
}

// ResetFulfillException resets all changes to the "fulfill_exception" field.
func (m *OrderMainMutation) ResetFulfillException() {
	m.fulfill_exception = nil
	m.addfulfill_exception = nil
}

// SetIossNumber sets the "ioss_number" field.
func (m *OrderMainMutation) SetIossNumber(s string) {
	m.ioss_number = &s
}

// IossNumber returns the value of the "ioss_number" field in the mutation.
func (m *OrderMainMutation) IossNumber() (r string, exists bool) {
	v := m.ioss_number
	if v == nil {
		return
	}
	return *v, true
}

// OldIossNumber returns the old "ioss_number" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldIossNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIossNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIossNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIossNumber: %w", err)
	}
	return oldValue.IossNumber, nil
}

// ResetIossNumber resets all changes to the "ioss_number" field.
func (m *OrderMainMutation) ResetIossNumber() {
	m.ioss_number = nil
}

// SetWarehouseShopID sets the "warehouse_shop_id" field.
func (m *OrderMainMutation) SetWarehouseShopID(i int32) {
	m.warehouse_shop_id = &i
	m.addwarehouse_shop_id = nil
}

// WarehouseShopID returns the value of the "warehouse_shop_id" field in the mutation.
func (m *OrderMainMutation) WarehouseShopID() (r int32, exists bool) {
	v := m.warehouse_shop_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWarehouseShopID returns the old "warehouse_shop_id" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldWarehouseShopID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWarehouseShopID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWarehouseShopID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWarehouseShopID: %w", err)
	}
	return oldValue.WarehouseShopID, nil
}

// AddWarehouseShopID adds i to the "warehouse_shop_id" field.
func (m *OrderMainMutation) AddWarehouseShopID(i int32) {
	if m.addwarehouse_shop_id != nil {
		*m.addwarehouse_shop_id += i
	} else {
		m.addwarehouse_shop_id = &i
	}
}

// AddedWarehouseShopID returns the value that was added to the "warehouse_shop_id" field in this mutation.
func (m *OrderMainMutation) AddedWarehouseShopID() (r int32, exists bool) {
	v := m.addwarehouse_shop_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetWarehouseShopID resets all changes to the "warehouse_shop_id" field.
func (m *OrderMainMutation) ResetWarehouseShopID() {
	m.warehouse_shop_id = nil
	m.addwarehouse_shop_id = nil
}

// SetSalesRecordNumber sets the "sales_record_number" field.
func (m *OrderMainMutation) SetSalesRecordNumber(s string) {
	m.sales_record_number = &s
}

// SalesRecordNumber returns the value of the "sales_record_number" field in the mutation.
func (m *OrderMainMutation) SalesRecordNumber() (r string, exists bool) {
	v := m.sales_record_number
	if v == nil {
		return
	}
	return *v, true
}

// OldSalesRecordNumber returns the old "sales_record_number" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldSalesRecordNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalesRecordNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalesRecordNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalesRecordNumber: %w", err)
	}
	return oldValue.SalesRecordNumber, nil
}

// ResetSalesRecordNumber resets all changes to the "sales_record_number" field.
func (m *OrderMainMutation) ResetSalesRecordNumber() {
	m.sales_record_number = nil
}

// SetTicketCode sets the "ticket_code" field.
func (m *OrderMainMutation) SetTicketCode(s string) {
	m.ticket_code = &s
}

// TicketCode returns the value of the "ticket_code" field in the mutation.
func (m *OrderMainMutation) TicketCode() (r string, exists bool) {
	v := m.ticket_code
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketCode returns the old "ticket_code" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldTicketCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketCode: %w", err)
	}
	return oldValue.TicketCode, nil
}

// ResetTicketCode resets all changes to the "ticket_code" field.
func (m *OrderMainMutation) ResetTicketCode() {
	m.ticket_code = nil
}

// SetOverseasWarehouseStatus sets the "overseas_warehouse_status" field.
func (m *OrderMainMutation) SetOverseasWarehouseStatus(s string) {
	m.overseas_warehouse_status = &s
}

// OverseasWarehouseStatus returns the value of the "overseas_warehouse_status" field in the mutation.
func (m *OrderMainMutation) OverseasWarehouseStatus() (r string, exists bool) {
	v := m.overseas_warehouse_status
	if v == nil {
		return
	}
	return *v, true
}

// OldOverseasWarehouseStatus returns the old "overseas_warehouse_status" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOverseasWarehouseStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOverseasWarehouseStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOverseasWarehouseStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverseasWarehouseStatus: %w", err)
	}
	return oldValue.OverseasWarehouseStatus, nil
}

// ResetOverseasWarehouseStatus resets all changes to the "overseas_warehouse_status" field.
func (m *OrderMainMutation) ResetOverseasWarehouseStatus() {
	m.overseas_warehouse_status = nil
}

// SetPayPalID sets the "pay_pal_id" field.
func (m *OrderMainMutation) SetPayPalID(s string) {
	m.pay_pal_id = &s
}

// PayPalID returns the value of the "pay_pal_id" field in the mutation.
func (m *OrderMainMutation) PayPalID() (r string, exists bool) {
	v := m.pay_pal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPayPalID returns the old "pay_pal_id" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldPayPalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayPalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayPalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayPalID: %w", err)
	}
	return oldValue.PayPalID, nil
}

// ResetPayPalID resets all changes to the "pay_pal_id" field.
func (m *OrderMainMutation) ResetPayPalID() {
	m.pay_pal_id = nil
}

// SetIsUpdate sets the "is_update" field.
func (m *OrderMainMutation) SetIsUpdate(i int8) {
	m.is_update = &i
	m.addis_update = nil
}

// IsUpdate returns the value of the "is_update" field in the mutation.
func (m *OrderMainMutation) IsUpdate() (r int8, exists bool) {
	v := m.is_update
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUpdate returns the old "is_update" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldIsUpdate(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUpdate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUpdate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUpdate: %w", err)
	}
	return oldValue.IsUpdate, nil
}

// AddIsUpdate adds i to the "is_update" field.
func (m *OrderMainMutation) AddIsUpdate(i int8) {
	if m.addis_update != nil {
		*m.addis_update += i
	} else {
		m.addis_update = &i
	}
}

// AddedIsUpdate returns the value that was added to the "is_update" field in this mutation.
func (m *OrderMainMutation) AddedIsUpdate() (r int8, exists bool) {
	v := m.addis_update
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsUpdate resets all changes to the "is_update" field.
func (m *OrderMainMutation) ResetIsUpdate() {
	m.is_update = nil
	m.addis_update = nil
}

// SetOrderSaleState sets the "order_sale_state" field.
func (m *OrderMainMutation) SetOrderSaleState(i int8) {
	m.order_sale_state = &i
	m.addorder_sale_state = nil
}

// OrderSaleState returns the value of the "order_sale_state" field in the mutation.
func (m *OrderMainMutation) OrderSaleState() (r int8, exists bool) {
	v := m.order_sale_state
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderSaleState returns the old "order_sale_state" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderSaleState(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderSaleState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderSaleState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderSaleState: %w", err)
	}
	return oldValue.OrderSaleState, nil
}

// AddOrderSaleState adds i to the "order_sale_state" field.
func (m *OrderMainMutation) AddOrderSaleState(i int8) {
	if m.addorder_sale_state != nil {
		*m.addorder_sale_state += i
	} else {
		m.addorder_sale_state = &i
	}
}

// AddedOrderSaleState returns the value that was added to the "order_sale_state" field in this mutation.
func (m *OrderMainMutation) AddedOrderSaleState() (r int8, exists bool) {
	v := m.addorder_sale_state
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderSaleState resets all changes to the "order_sale_state" field.
func (m *OrderMainMutation) ResetOrderSaleState() {
	m.order_sale_state = nil
	m.addorder_sale_state = nil
}

// SetProductCost sets the "product_cost" field.
func (m *OrderMainMutation) SetProductCost(f float64) {
	m.product_cost = &f
	m.addproduct_cost = nil
}

// ProductCost returns the value of the "product_cost" field in the mutation.
func (m *OrderMainMutation) ProductCost() (r float64, exists bool) {
	v := m.product_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldProductCost returns the old "product_cost" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldProductCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductCost: %w", err)
	}
	return oldValue.ProductCost, nil
}

// AddProductCost adds f to the "product_cost" field.
func (m *OrderMainMutation) AddProductCost(f float64) {
	if m.addproduct_cost != nil {
		*m.addproduct_cost += f
	} else {
		m.addproduct_cost = &f
	}
}

// AddedProductCost returns the value that was added to the "product_cost" field in this mutation.
func (m *OrderMainMutation) AddedProductCost() (r float64, exists bool) {
	v := m.addproduct_cost
	if v == nil {
		return
	}
	return *v, true
}

// ResetProductCost resets all changes to the "product_cost" field.
func (m *OrderMainMutation) ResetProductCost() {
	m.product_cost = nil
	m.addproduct_cost = nil
}

// SetHeadCost sets the "head_cost" field.
func (m *OrderMainMutation) SetHeadCost(f float64) {
	m.head_cost = &f
	m.addhead_cost = nil
}

// HeadCost returns the value of the "head_cost" field in the mutation.
func (m *OrderMainMutation) HeadCost() (r float64, exists bool) {
	v := m.head_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldHeadCost returns the old "head_cost" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldHeadCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeadCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeadCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeadCost: %w", err)
	}
	return oldValue.HeadCost, nil
}

// AddHeadCost adds f to the "head_cost" field.
func (m *OrderMainMutation) AddHeadCost(f float64) {
	if m.addhead_cost != nil {
		*m.addhead_cost += f
	} else {
		m.addhead_cost = &f
	}
}

// AddedHeadCost returns the value that was added to the "head_cost" field in this mutation.
func (m *OrderMainMutation) AddedHeadCost() (r float64, exists bool) {
	v := m.addhead_cost
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeadCost resets all changes to the "head_cost" field.
func (m *OrderMainMutation) ResetHeadCost() {
	m.head_cost = nil
	m.addhead_cost = nil
}

// SetCarrierCode sets the "carrier_code" field.
func (m *OrderMainMutation) SetCarrierCode(s string) {
	m.carrier_code = &s
}

// CarrierCode returns the value of the "carrier_code" field in the mutation.
func (m *OrderMainMutation) CarrierCode() (r string, exists bool) {
	v := m.carrier_code
	if v == nil {
		return
	}
	return *v, true
}

// OldCarrierCode returns the old "carrier_code" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldCarrierCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCarrierCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCarrierCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCarrierCode: %w", err)
	}
	return oldValue.CarrierCode, nil
}

// ResetCarrierCode resets all changes to the "carrier_code" field.
func (m *OrderMainMutation) ResetCarrierCode() {
	m.carrier_code = nil
}

// SetWithheldTax sets the "withheld_tax" field.
func (m *OrderMainMutation) SetWithheldTax(f float64) {
	m.withheld_tax = &f
	m.addwithheld_tax = nil
}

// WithheldTax returns the value of the "withheld_tax" field in the mutation.
func (m *OrderMainMutation) WithheldTax() (r float64, exists bool) {
	v := m.withheld_tax
	if v == nil {
		return
	}
	return *v, true
}

// OldWithheldTax returns the old "withheld_tax" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldWithheldTax(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWithheldTax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWithheldTax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithheldTax: %w", err)
	}
	return oldValue.WithheldTax, nil
}

// AddWithheldTax adds f to the "withheld_tax" field.
func (m *OrderMainMutation) AddWithheldTax(f float64) {
	if m.addwithheld_tax != nil {
		*m.addwithheld_tax += f
	} else {
		m.addwithheld_tax = &f
	}
}

// AddedWithheldTax returns the value that was added to the "withheld_tax" field in this mutation.
func (m *OrderMainMutation) AddedWithheldTax() (r float64, exists bool) {
	v := m.addwithheld_tax
	if v == nil {
		return
	}
	return *v, true
}

// ResetWithheldTax resets all changes to the "withheld_tax" field.
func (m *OrderMainMutation) ResetWithheldTax() {
	m.withheld_tax = nil
	m.addwithheld_tax = nil
}

// SetOtherFee sets the "other_fee" field.
func (m *OrderMainMutation) SetOtherFee(f float64) {
	m.other_fee = &f
	m.addother_fee = nil
}

// OtherFee returns the value of the "other_fee" field in the mutation.
func (m *OrderMainMutation) OtherFee() (r float64, exists bool) {
	v := m.other_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherFee returns the old "other_fee" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOtherFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherFee: %w", err)
	}
	return oldValue.OtherFee, nil
}

// AddOtherFee adds f to the "other_fee" field.
func (m *OrderMainMutation) AddOtherFee(f float64) {
	if m.addother_fee != nil {
		*m.addother_fee += f
	} else {
		m.addother_fee = &f
	}
}

// AddedOtherFee returns the value that was added to the "other_fee" field in this mutation.
func (m *OrderMainMutation) AddedOtherFee() (r float64, exists bool) {
	v := m.addother_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetOtherFee resets all changes to the "other_fee" field.
func (m *OrderMainMutation) ResetOtherFee() {
	m.other_fee = nil
	m.addother_fee = nil
}

// SetEscrowTax sets the "escrow_tax" field.
func (m *OrderMainMutation) SetEscrowTax(f float64) {
	m.escrow_tax = &f
	m.addescrow_tax = nil
}

// EscrowTax returns the value of the "escrow_tax" field in the mutation.
func (m *OrderMainMutation) EscrowTax() (r float64, exists bool) {
	v := m.escrow_tax
	if v == nil {
		return
	}
	return *v, true
}

// OldEscrowTax returns the old "escrow_tax" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldEscrowTax(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEscrowTax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEscrowTax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEscrowTax: %w", err)
	}
	return oldValue.EscrowTax, nil
}

// AddEscrowTax adds f to the "escrow_tax" field.
func (m *OrderMainMutation) AddEscrowTax(f float64) {
	if m.addescrow_tax != nil {
		*m.addescrow_tax += f
	} else {
		m.addescrow_tax = &f
	}
}

// AddedEscrowTax returns the value that was added to the "escrow_tax" field in this mutation.
func (m *OrderMainMutation) AddedEscrowTax() (r float64, exists bool) {
	v := m.addescrow_tax
	if v == nil {
		return
	}
	return *v, true
}

// ResetEscrowTax resets all changes to the "escrow_tax" field.
func (m *OrderMainMutation) ResetEscrowTax() {
	m.escrow_tax = nil
	m.addescrow_tax = nil
}

// SetFinalProductVatTax sets the "final_product_vat_tax" field.
func (m *OrderMainMutation) SetFinalProductVatTax(f float64) {
	m.final_product_vat_tax = &f
	m.addfinal_product_vat_tax = nil
}

// FinalProductVatTax returns the value of the "final_product_vat_tax" field in the mutation.
func (m *OrderMainMutation) FinalProductVatTax() (r float64, exists bool) {
	v := m.final_product_vat_tax
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalProductVatTax returns the old "final_product_vat_tax" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldFinalProductVatTax(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalProductVatTax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalProductVatTax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalProductVatTax: %w", err)
	}
	return oldValue.FinalProductVatTax, nil
}

// AddFinalProductVatTax adds f to the "final_product_vat_tax" field.
func (m *OrderMainMutation) AddFinalProductVatTax(f float64) {
	if m.addfinal_product_vat_tax != nil {
		*m.addfinal_product_vat_tax += f
	} else {
		m.addfinal_product_vat_tax = &f
	}
}

// AddedFinalProductVatTax returns the value that was added to the "final_product_vat_tax" field in this mutation.
func (m *OrderMainMutation) AddedFinalProductVatTax() (r float64, exists bool) {
	v := m.addfinal_product_vat_tax
	if v == nil {
		return
	}
	return *v, true
}

// ResetFinalProductVatTax resets all changes to the "final_product_vat_tax" field.
func (m *OrderMainMutation) ResetFinalProductVatTax() {
	m.final_product_vat_tax = nil
	m.addfinal_product_vat_tax = nil
}

// SetFinalShippingVatTax sets the "final_shipping_vat_tax" field.
func (m *OrderMainMutation) SetFinalShippingVatTax(f float64) {
	m.final_shipping_vat_tax = &f
	m.addfinal_shipping_vat_tax = nil
}

// FinalShippingVatTax returns the value of the "final_shipping_vat_tax" field in the mutation.
func (m *OrderMainMutation) FinalShippingVatTax() (r float64, exists bool) {
	v := m.final_shipping_vat_tax
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalShippingVatTax returns the old "final_shipping_vat_tax" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldFinalShippingVatTax(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalShippingVatTax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalShippingVatTax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalShippingVatTax: %w", err)
	}
	return oldValue.FinalShippingVatTax, nil
}

// AddFinalShippingVatTax adds f to the "final_shipping_vat_tax" field.
func (m *OrderMainMutation) AddFinalShippingVatTax(f float64) {
	if m.addfinal_shipping_vat_tax != nil {
		*m.addfinal_shipping_vat_tax += f
	} else {
		m.addfinal_shipping_vat_tax = &f
	}
}

// AddedFinalShippingVatTax returns the value that was added to the "final_shipping_vat_tax" field in this mutation.
func (m *OrderMainMutation) AddedFinalShippingVatTax() (r float64, exists bool) {
	v := m.addfinal_shipping_vat_tax
	if v == nil {
		return
	}
	return *v, true
}

// ResetFinalShippingVatTax resets all changes to the "final_shipping_vat_tax" field.
func (m *OrderMainMutation) ResetFinalShippingVatTax() {
	m.final_shipping_vat_tax = nil
	m.addfinal_shipping_vat_tax = nil
}

// SetShippingCharge sets the "shipping_charge" field.
func (m *OrderMainMutation) SetShippingCharge(f float64) {
	m.shipping_charge = &f
	m.addshipping_charge = nil
}

// ShippingCharge returns the value of the "shipping_charge" field in the mutation.
func (m *OrderMainMutation) ShippingCharge() (r float64, exists bool) {
	v := m.shipping_charge
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingCharge returns the old "shipping_charge" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShippingCharge(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingCharge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingCharge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingCharge: %w", err)
	}
	return oldValue.ShippingCharge, nil
}

// AddShippingCharge adds f to the "shipping_charge" field.
func (m *OrderMainMutation) AddShippingCharge(f float64) {
	if m.addshipping_charge != nil {
		*m.addshipping_charge += f
	} else {
		m.addshipping_charge = &f
	}
}

// AddedShippingCharge returns the value that was added to the "shipping_charge" field in this mutation.
func (m *OrderMainMutation) AddedShippingCharge() (r float64, exists bool) {
	v := m.addshipping_charge
	if v == nil {
		return
	}
	return *v, true
}

// ResetShippingCharge resets all changes to the "shipping_charge" field.
func (m *OrderMainMutation) ResetShippingCharge() {
	m.shipping_charge = nil
	m.addshipping_charge = nil
}

// SetVoucherPlatform sets the "voucher_platform" field.
func (m *OrderMainMutation) SetVoucherPlatform(f float64) {
	m.voucher_platform = &f
	m.addvoucher_platform = nil
}

// VoucherPlatform returns the value of the "voucher_platform" field in the mutation.
func (m *OrderMainMutation) VoucherPlatform() (r float64, exists bool) {
	v := m.voucher_platform
	if v == nil {
		return
	}
	return *v, true
}

// OldVoucherPlatform returns the old "voucher_platform" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldVoucherPlatform(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVoucherPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVoucherPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoucherPlatform: %w", err)
	}
	return oldValue.VoucherPlatform, nil
}

// AddVoucherPlatform adds f to the "voucher_platform" field.
func (m *OrderMainMutation) AddVoucherPlatform(f float64) {
	if m.addvoucher_platform != nil {
		*m.addvoucher_platform += f
	} else {
		m.addvoucher_platform = &f
	}
}

// AddedVoucherPlatform returns the value that was added to the "voucher_platform" field in this mutation.
func (m *OrderMainMutation) AddedVoucherPlatform() (r float64, exists bool) {
	v := m.addvoucher_platform
	if v == nil {
		return
	}
	return *v, true
}

// ResetVoucherPlatform resets all changes to the "voucher_platform" field.
func (m *OrderMainMutation) ResetVoucherPlatform() {
	m.voucher_platform = nil
	m.addvoucher_platform = nil
}

// SetOverTimeLeft sets the "over_time_left" field.
func (m *OrderMainMutation) SetOverTimeLeft(t time.Time) {
	m.over_time_left = &t
}

// OverTimeLeft returns the value of the "over_time_left" field in the mutation.
func (m *OrderMainMutation) OverTimeLeft() (r time.Time, exists bool) {
	v := m.over_time_left
	if v == nil {
		return
	}
	return *v, true
}

// OldOverTimeLeft returns the old "over_time_left" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOverTimeLeft(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOverTimeLeft is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOverTimeLeft requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverTimeLeft: %w", err)
	}
	return oldValue.OverTimeLeft, nil
}

// ClearOverTimeLeft clears the value of the "over_time_left" field.
func (m *OrderMainMutation) ClearOverTimeLeft() {
	m.over_time_left = nil
	m.clearedFields[ordermain.FieldOverTimeLeft] = struct{}{}
}

// OverTimeLeftCleared returns if the "over_time_left" field was cleared in this mutation.
func (m *OrderMainMutation) OverTimeLeftCleared() bool {
	_, ok := m.clearedFields[ordermain.FieldOverTimeLeft]
	return ok
}

// ResetOverTimeLeft resets all changes to the "over_time_left" field.
func (m *OrderMainMutation) ResetOverTimeLeft() {
	m.over_time_left = nil
	delete(m.clearedFields, ordermain.FieldOverTimeLeft)
}

// SetShippingRebate sets the "shipping_rebate" field.
func (m *OrderMainMutation) SetShippingRebate(f float64) {
	m.shipping_rebate = &f
	m.addshipping_rebate = nil
}

// ShippingRebate returns the value of the "shipping_rebate" field in the mutation.
func (m *OrderMainMutation) ShippingRebate() (r float64, exists bool) {
	v := m.shipping_rebate
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingRebate returns the old "shipping_rebate" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShippingRebate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingRebate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingRebate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingRebate: %w", err)
	}
	return oldValue.ShippingRebate, nil
}

// AddShippingRebate adds f to the "shipping_rebate" field.
func (m *OrderMainMutation) AddShippingRebate(f float64) {
	if m.addshipping_rebate != nil {
		*m.addshipping_rebate += f
	} else {
		m.addshipping_rebate = &f
	}
}

// AddedShippingRebate returns the value that was added to the "shipping_rebate" field in this mutation.
func (m *OrderMainMutation) AddedShippingRebate() (r float64, exists bool) {
	v := m.addshipping_rebate
	if v == nil {
		return
	}
	return *v, true
}

// ResetShippingRebate resets all changes to the "shipping_rebate" field.
func (m *OrderMainMutation) ResetShippingRebate() {
	m.shipping_rebate = nil
	m.addshipping_rebate = nil
}

// SetLabelList sets the "label_list" field.
func (m *OrderMainMutation) SetLabelList(s string) {
	m.label_list = &s
}

// LabelList returns the value of the "label_list" field in the mutation.
func (m *OrderMainMutation) LabelList() (r string, exists bool) {
	v := m.label_list
	if v == nil {
		return
	}
	return *v, true
}

// OldLabelList returns the old "label_list" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldLabelList(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabelList is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabelList requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabelList: %w", err)
	}
	return oldValue.LabelList, nil
}

// ResetLabelList resets all changes to the "label_list" field.
func (m *OrderMainMutation) ResetLabelList() {
	m.label_list = nil
}

// SetOutRealGrandTotal sets the "out_real_grand_total" field.
func (m *OrderMainMutation) SetOutRealGrandTotal(f float64) {
	m.out_real_grand_total = &f
	m.addout_real_grand_total = nil
}

// OutRealGrandTotal returns the value of the "out_real_grand_total" field in the mutation.
func (m *OrderMainMutation) OutRealGrandTotal() (r float64, exists bool) {
	v := m.out_real_grand_total
	if v == nil {
		return
	}
	return *v, true
}

// OldOutRealGrandTotal returns the old "out_real_grand_total" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOutRealGrandTotal(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutRealGrandTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutRealGrandTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutRealGrandTotal: %w", err)
	}
	return oldValue.OutRealGrandTotal, nil
}

// AddOutRealGrandTotal adds f to the "out_real_grand_total" field.
func (m *OrderMainMutation) AddOutRealGrandTotal(f float64) {
	if m.addout_real_grand_total != nil {
		*m.addout_real_grand_total += f
	} else {
		m.addout_real_grand_total = &f
	}
}

// AddedOutRealGrandTotal returns the value that was added to the "out_real_grand_total" field in this mutation.
func (m *OrderMainMutation) AddedOutRealGrandTotal() (r float64, exists bool) {
	v := m.addout_real_grand_total
	if v == nil {
		return
	}
	return *v, true
}

// ResetOutRealGrandTotal resets all changes to the "out_real_grand_total" field.
func (m *OrderMainMutation) ResetOutRealGrandTotal() {
	m.out_real_grand_total = nil
	m.addout_real_grand_total = nil
}

// SetBillList sets the "bill_list" field.
func (m *OrderMainMutation) SetBillList(s string) {
	m.bill_list = &s
}

// BillList returns the value of the "bill_list" field in the mutation.
func (m *OrderMainMutation) BillList() (r string, exists bool) {
	v := m.bill_list
	if v == nil {
		return
	}
	return *v, true
}

// OldBillList returns the old "bill_list" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldBillList(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillList is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillList requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillList: %w", err)
	}
	return oldValue.BillList, nil
}

// ResetBillList resets all changes to the "bill_list" field.
func (m *OrderMainMutation) ResetBillList() {
	m.bill_list = nil
}

// SetOutGrandTotal sets the "out_grand_total" field.
func (m *OrderMainMutation) SetOutGrandTotal(f float64) {
	m.out_grand_total = &f
	m.addout_grand_total = nil
}

// OutGrandTotal returns the value of the "out_grand_total" field in the mutation.
func (m *OrderMainMutation) OutGrandTotal() (r float64, exists bool) {
	v := m.out_grand_total
	if v == nil {
		return
	}
	return *v, true
}

// OldOutGrandTotal returns the old "out_grand_total" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOutGrandTotal(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutGrandTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutGrandTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutGrandTotal: %w", err)
	}
	return oldValue.OutGrandTotal, nil
}

// AddOutGrandTotal adds f to the "out_grand_total" field.
func (m *OrderMainMutation) AddOutGrandTotal(f float64) {
	if m.addout_grand_total != nil {
		*m.addout_grand_total += f
	} else {
		m.addout_grand_total = &f
	}
}

// AddedOutGrandTotal returns the value that was added to the "out_grand_total" field in this mutation.
func (m *OrderMainMutation) AddedOutGrandTotal() (r float64, exists bool) {
	v := m.addout_grand_total
	if v == nil {
		return
	}
	return *v, true
}

// ResetOutGrandTotal resets all changes to the "out_grand_total" field.
func (m *OrderMainMutation) ResetOutGrandTotal() {
	m.out_grand_total = nil
	m.addout_grand_total = nil
}

// SetDeliverShop sets the "deliver_shop" field.
func (m *OrderMainMutation) SetDeliverShop(s string) {
	m.deliver_shop = &s
}

// DeliverShop returns the value of the "deliver_shop" field in the mutation.
func (m *OrderMainMutation) DeliverShop() (r string, exists bool) {
	v := m.deliver_shop
	if v == nil {
		return
	}
	return *v, true
}

// OldDeliverShop returns the old "deliver_shop" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldDeliverShop(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeliverShop is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeliverShop requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeliverShop: %w", err)
	}
	return oldValue.DeliverShop, nil
}

// ResetDeliverShop resets all changes to the "deliver_shop" field.
func (m *OrderMainMutation) ResetDeliverShop() {
	m.deliver_shop = nil
}

// SetShippingCostFinal sets the "shipping_cost_final" field.
func (m *OrderMainMutation) SetShippingCostFinal(f float64) {
	m.shipping_cost_final = &f
	m.addshipping_cost_final = nil
}

// ShippingCostFinal returns the value of the "shipping_cost_final" field in the mutation.
func (m *OrderMainMutation) ShippingCostFinal() (r float64, exists bool) {
	v := m.shipping_cost_final
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingCostFinal returns the old "shipping_cost_final" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShippingCostFinal(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingCostFinal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingCostFinal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingCostFinal: %w", err)
	}
	return oldValue.ShippingCostFinal, nil
}

// AddShippingCostFinal adds f to the "shipping_cost_final" field.
func (m *OrderMainMutation) AddShippingCostFinal(f float64) {
	if m.addshipping_cost_final != nil {
		*m.addshipping_cost_final += f
	} else {
		m.addshipping_cost_final = &f
	}
}

// AddedShippingCostFinal returns the value that was added to the "shipping_cost_final" field in this mutation.
func (m *OrderMainMutation) AddedShippingCostFinal() (r float64, exists bool) {
	v := m.addshipping_cost_final
	if v == nil {
		return
	}
	return *v, true
}

// ResetShippingCostFinal resets all changes to the "shipping_cost_final" field.
func (m *OrderMainMutation) ResetShippingCostFinal() {
	m.shipping_cost_final = nil
	m.addshipping_cost_final = nil
}

// SetShippingFreeAbout sets the "shipping_free_about" field.
func (m *OrderMainMutation) SetShippingFreeAbout(f float64) {
	m.shipping_free_about = &f
	m.addshipping_free_about = nil
}

// ShippingFreeAbout returns the value of the "shipping_free_about" field in the mutation.
func (m *OrderMainMutation) ShippingFreeAbout() (r float64, exists bool) {
	v := m.shipping_free_about
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingFreeAbout returns the old "shipping_free_about" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShippingFreeAbout(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingFreeAbout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingFreeAbout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingFreeAbout: %w", err)
	}
	return oldValue.ShippingFreeAbout, nil
}

// AddShippingFreeAbout adds f to the "shipping_free_about" field.
func (m *OrderMainMutation) AddShippingFreeAbout(f float64) {
	if m.addshipping_free_about != nil {
		*m.addshipping_free_about += f
	} else {
		m.addshipping_free_about = &f
	}
}

// AddedShippingFreeAbout returns the value that was added to the "shipping_free_about" field in this mutation.
func (m *OrderMainMutation) AddedShippingFreeAbout() (r float64, exists bool) {
	v := m.addshipping_free_about
	if v == nil {
		return
	}
	return *v, true
}

// ResetShippingFreeAbout resets all changes to the "shipping_free_about" field.
func (m *OrderMainMutation) ResetShippingFreeAbout() {
	m.shipping_free_about = nil
	m.addshipping_free_about = nil
}

// SetCreateOrderStatus sets the "create_order_status" field.
func (m *OrderMainMutation) SetCreateOrderStatus(i int8) {
	m.create_order_status = &i
	m.addcreate_order_status = nil
}

// CreateOrderStatus returns the value of the "create_order_status" field in the mutation.
func (m *OrderMainMutation) CreateOrderStatus() (r int8, exists bool) {
	v := m.create_order_status
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateOrderStatus returns the old "create_order_status" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldCreateOrderStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateOrderStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateOrderStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateOrderStatus: %w", err)
	}
	return oldValue.CreateOrderStatus, nil
}

// AddCreateOrderStatus adds i to the "create_order_status" field.
func (m *OrderMainMutation) AddCreateOrderStatus(i int8) {
	if m.addcreate_order_status != nil {
		*m.addcreate_order_status += i
	} else {
		m.addcreate_order_status = &i
	}
}

// AddedCreateOrderStatus returns the value that was added to the "create_order_status" field in this mutation.
func (m *OrderMainMutation) AddedCreateOrderStatus() (r int8, exists bool) {
	v := m.addcreate_order_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateOrderStatus resets all changes to the "create_order_status" field.
func (m *OrderMainMutation) ResetCreateOrderStatus() {
	m.create_order_status = nil
	m.addcreate_order_status = nil
}

// SetFinanceTime sets the "finance_time" field.
func (m *OrderMainMutation) SetFinanceTime(t time.Time) {
	m.finance_time = &t
}

// FinanceTime returns the value of the "finance_time" field in the mutation.
func (m *OrderMainMutation) FinanceTime() (r time.Time, exists bool) {
	v := m.finance_time
	if v == nil {
		return
	}
	return *v, true
}

// OldFinanceTime returns the old "finance_time" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldFinanceTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinanceTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinanceTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinanceTime: %w", err)
	}
	return oldValue.FinanceTime, nil
}

// ResetFinanceTime resets all changes to the "finance_time" field.
func (m *OrderMainMutation) ResetFinanceTime() {
	m.finance_time = nil
}

// SetIsQcc sets the "is_qcc" field.
func (m *OrderMainMutation) SetIsQcc(i int8) {
	m.is_qcc = &i
	m.addis_qcc = nil
}

// IsQcc returns the value of the "is_qcc" field in the mutation.
func (m *OrderMainMutation) IsQcc() (r int8, exists bool) {
	v := m.is_qcc
	if v == nil {
		return
	}
	return *v, true
}

// OldIsQcc returns the old "is_qcc" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldIsQcc(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsQcc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsQcc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsQcc: %w", err)
	}
	return oldValue.IsQcc, nil
}

// AddIsQcc adds i to the "is_qcc" field.
func (m *OrderMainMutation) AddIsQcc(i int8) {
	if m.addis_qcc != nil {
		*m.addis_qcc += i
	} else {
		m.addis_qcc = &i
	}
}

// AddedIsQcc returns the value that was added to the "is_qcc" field in this mutation.
func (m *OrderMainMutation) AddedIsQcc() (r int8, exists bool) {
	v := m.addis_qcc
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsQcc resets all changes to the "is_qcc" field.
func (m *OrderMainMutation) ResetIsQcc() {
	m.is_qcc = nil
	m.addis_qcc = nil
}

// SetRejectReason sets the "reject_reason" field.
func (m *OrderMainMutation) SetRejectReason(s string) {
	m.reject_reason = &s
}

// RejectReason returns the value of the "reject_reason" field in the mutation.
func (m *OrderMainMutation) RejectReason() (r string, exists bool) {
	v := m.reject_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldRejectReason returns the old "reject_reason" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldRejectReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRejectReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRejectReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRejectReason: %w", err)
	}
	return oldValue.RejectReason, nil
}

// ResetRejectReason resets all changes to the "reject_reason" field.
func (m *OrderMainMutation) ResetRejectReason() {
	m.reject_reason = nil
}

// SetOrderLocalTime sets the "order_local_time" field.
func (m *OrderMainMutation) SetOrderLocalTime(t time.Time) {
	m.order_local_time = &t
}

// OrderLocalTime returns the value of the "order_local_time" field in the mutation.
func (m *OrderMainMutation) OrderLocalTime() (r time.Time, exists bool) {
	v := m.order_local_time
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderLocalTime returns the old "order_local_time" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderLocalTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderLocalTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderLocalTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderLocalTime: %w", err)
	}
	return oldValue.OrderLocalTime, nil
}

// ResetOrderLocalTime resets all changes to the "order_local_time" field.
func (m *OrderMainMutation) ResetOrderLocalTime() {
	m.order_local_time = nil
}

// SetDiscountCode sets the "discount_code" field.
func (m *OrderMainMutation) SetDiscountCode(s string) {
	m.discount_code = &s
}

// DiscountCode returns the value of the "discount_code" field in the mutation.
func (m *OrderMainMutation) DiscountCode() (r string, exists bool) {
	v := m.discount_code
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountCode returns the old "discount_code" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldDiscountCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountCode: %w", err)
	}
	return oldValue.DiscountCode, nil
}

// ResetDiscountCode resets all changes to the "discount_code" field.
func (m *OrderMainMutation) ResetDiscountCode() {
	m.discount_code = nil
}

// SetStockoutStatus sets the "stockout_status" field.
func (m *OrderMainMutation) SetStockoutStatus(i int8) {
	m.stockout_status = &i
	m.addstockout_status = nil
}

// StockoutStatus returns the value of the "stockout_status" field in the mutation.
func (m *OrderMainMutation) StockoutStatus() (r int8, exists bool) {
	v := m.stockout_status
	if v == nil {
		return
	}
	return *v, true
}

// OldStockoutStatus returns the old "stockout_status" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldStockoutStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStockoutStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStockoutStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStockoutStatus: %w", err)
	}
	return oldValue.StockoutStatus, nil
}

// AddStockoutStatus adds i to the "stockout_status" field.
func (m *OrderMainMutation) AddStockoutStatus(i int8) {
	if m.addstockout_status != nil {
		*m.addstockout_status += i
	} else {
		m.addstockout_status = &i
	}
}

// AddedStockoutStatus returns the value that was added to the "stockout_status" field in this mutation.
func (m *OrderMainMutation) AddedStockoutStatus() (r int8, exists bool) {
	v := m.addstockout_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetStockoutStatus resets all changes to the "stockout_status" field.
func (m *OrderMainMutation) ResetStockoutStatus() {
	m.stockout_status = nil
	m.addstockout_status = nil
}

// SetOrderLength sets the "order_length" field.
func (m *OrderMainMutation) SetOrderLength(f float64) {
	m.order_length = &f
	m.addorder_length = nil
}

// OrderLength returns the value of the "order_length" field in the mutation.
func (m *OrderMainMutation) OrderLength() (r float64, exists bool) {
	v := m.order_length
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderLength returns the old "order_length" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderLength(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderLength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderLength: %w", err)
	}
	return oldValue.OrderLength, nil
}

// AddOrderLength adds f to the "order_length" field.
func (m *OrderMainMutation) AddOrderLength(f float64) {
	if m.addorder_length != nil {
		*m.addorder_length += f
	} else {
		m.addorder_length = &f
	}
}

// AddedOrderLength returns the value that was added to the "order_length" field in this mutation.
func (m *OrderMainMutation) AddedOrderLength() (r float64, exists bool) {
	v := m.addorder_length
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderLength resets all changes to the "order_length" field.
func (m *OrderMainMutation) ResetOrderLength() {
	m.order_length = nil
	m.addorder_length = nil
}

// SetOrderWidth sets the "order_width" field.
func (m *OrderMainMutation) SetOrderWidth(f float64) {
	m.order_width = &f
	m.addorder_width = nil
}

// OrderWidth returns the value of the "order_width" field in the mutation.
func (m *OrderMainMutation) OrderWidth() (r float64, exists bool) {
	v := m.order_width
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderWidth returns the old "order_width" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderWidth(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderWidth: %w", err)
	}
	return oldValue.OrderWidth, nil
}

// AddOrderWidth adds f to the "order_width" field.
func (m *OrderMainMutation) AddOrderWidth(f float64) {
	if m.addorder_width != nil {
		*m.addorder_width += f
	} else {
		m.addorder_width = &f
	}
}

// AddedOrderWidth returns the value that was added to the "order_width" field in this mutation.
func (m *OrderMainMutation) AddedOrderWidth() (r float64, exists bool) {
	v := m.addorder_width
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderWidth resets all changes to the "order_width" field.
func (m *OrderMainMutation) ResetOrderWidth() {
	m.order_width = nil
	m.addorder_width = nil
}

// SetOrderHeight sets the "order_height" field.
func (m *OrderMainMutation) SetOrderHeight(f float64) {
	m.order_height = &f
	m.addorder_height = nil
}

// OrderHeight returns the value of the "order_height" field in the mutation.
func (m *OrderMainMutation) OrderHeight() (r float64, exists bool) {
	v := m.order_height
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderHeight returns the old "order_height" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderHeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderHeight: %w", err)
	}
	return oldValue.OrderHeight, nil
}

// AddOrderHeight adds f to the "order_height" field.
func (m *OrderMainMutation) AddOrderHeight(f float64) {
	if m.addorder_height != nil {
		*m.addorder_height += f
	} else {
		m.addorder_height = &f
	}
}

// AddedOrderHeight returns the value that was added to the "order_height" field in this mutation.
func (m *OrderMainMutation) AddedOrderHeight() (r float64, exists bool) {
	v := m.addorder_height
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderHeight resets all changes to the "order_height" field.
func (m *OrderMainMutation) ResetOrderHeight() {
	m.order_height = nil
	m.addorder_height = nil
}

// SetFirstSide sets the "first_side" field.
func (m *OrderMainMutation) SetFirstSide(f float64) {
	m.first_side = &f
	m.addfirst_side = nil
}

// FirstSide returns the value of the "first_side" field in the mutation.
func (m *OrderMainMutation) FirstSide() (r float64, exists bool) {
	v := m.first_side
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstSide returns the old "first_side" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldFirstSide(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstSide is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstSide requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstSide: %w", err)
	}
	return oldValue.FirstSide, nil
}

// AddFirstSide adds f to the "first_side" field.
func (m *OrderMainMutation) AddFirstSide(f float64) {
	if m.addfirst_side != nil {
		*m.addfirst_side += f
	} else {
		m.addfirst_side = &f
	}
}

// AddedFirstSide returns the value that was added to the "first_side" field in this mutation.
func (m *OrderMainMutation) AddedFirstSide() (r float64, exists bool) {
	v := m.addfirst_side
	if v == nil {
		return
	}
	return *v, true
}

// ResetFirstSide resets all changes to the "first_side" field.
func (m *OrderMainMutation) ResetFirstSide() {
	m.first_side = nil
	m.addfirst_side = nil
}

// SetSecondSide sets the "second_side" field.
func (m *OrderMainMutation) SetSecondSide(f float64) {
	m.second_side = &f
	m.addsecond_side = nil
}

// SecondSide returns the value of the "second_side" field in the mutation.
func (m *OrderMainMutation) SecondSide() (r float64, exists bool) {
	v := m.second_side
	if v == nil {
		return
	}
	return *v, true
}

// OldSecondSide returns the old "second_side" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldSecondSide(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecondSide is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecondSide requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecondSide: %w", err)
	}
	return oldValue.SecondSide, nil
}

// AddSecondSide adds f to the "second_side" field.
func (m *OrderMainMutation) AddSecondSide(f float64) {
	if m.addsecond_side != nil {
		*m.addsecond_side += f
	} else {
		m.addsecond_side = &f
	}
}

// AddedSecondSide returns the value that was added to the "second_side" field in this mutation.
func (m *OrderMainMutation) AddedSecondSide() (r float64, exists bool) {
	v := m.addsecond_side
	if v == nil {
		return
	}
	return *v, true
}

// ResetSecondSide resets all changes to the "second_side" field.
func (m *OrderMainMutation) ResetSecondSide() {
	m.second_side = nil
	m.addsecond_side = nil
}

// SetThirdSide sets the "third_side" field.
func (m *OrderMainMutation) SetThirdSide(f float64) {
	m.third_side = &f
	m.addthird_side = nil
}

// ThirdSide returns the value of the "third_side" field in the mutation.
func (m *OrderMainMutation) ThirdSide() (r float64, exists bool) {
	v := m.third_side
	if v == nil {
		return
	}
	return *v, true
}

// OldThirdSide returns the old "third_side" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldThirdSide(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThirdSide is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThirdSide requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThirdSide: %w", err)
	}
	return oldValue.ThirdSide, nil
}

// AddThirdSide adds f to the "third_side" field.
func (m *OrderMainMutation) AddThirdSide(f float64) {
	if m.addthird_side != nil {
		*m.addthird_side += f
	} else {
		m.addthird_side = &f
	}
}

// AddedThirdSide returns the value that was added to the "third_side" field in this mutation.
func (m *OrderMainMutation) AddedThirdSide() (r float64, exists bool) {
	v := m.addthird_side
	if v == nil {
		return
	}
	return *v, true
}

// ResetThirdSide resets all changes to the "third_side" field.
func (m *OrderMainMutation) ResetThirdSide() {
	m.third_side = nil
	m.addthird_side = nil
}

// SetOrderFeeWeight sets the "order_fee_weight" field.
func (m *OrderMainMutation) SetOrderFeeWeight(f float64) {
	m.order_fee_weight = &f
	m.addorder_fee_weight = nil
}

// OrderFeeWeight returns the value of the "order_fee_weight" field in the mutation.
func (m *OrderMainMutation) OrderFeeWeight() (r float64, exists bool) {
	v := m.order_fee_weight
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderFeeWeight returns the old "order_fee_weight" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldOrderFeeWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderFeeWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderFeeWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderFeeWeight: %w", err)
	}
	return oldValue.OrderFeeWeight, nil
}

// AddOrderFeeWeight adds f to the "order_fee_weight" field.
func (m *OrderMainMutation) AddOrderFeeWeight(f float64) {
	if m.addorder_fee_weight != nil {
		*m.addorder_fee_weight += f
	} else {
		m.addorder_fee_weight = &f
	}
}

// AddedOrderFeeWeight returns the value that was added to the "order_fee_weight" field in this mutation.
func (m *OrderMainMutation) AddedOrderFeeWeight() (r float64, exists bool) {
	v := m.addorder_fee_weight
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderFeeWeight resets all changes to the "order_fee_weight" field.
func (m *OrderMainMutation) ResetOrderFeeWeight() {
	m.order_fee_weight = nil
	m.addorder_fee_weight = nil
}

// SetShopManager sets the "shop_manager" field.
func (m *OrderMainMutation) SetShopManager(s string) {
	m.shop_manager = &s
}

// ShopManager returns the value of the "shop_manager" field in the mutation.
func (m *OrderMainMutation) ShopManager() (r string, exists bool) {
	v := m.shop_manager
	if v == nil {
		return
	}
	return *v, true
}

// OldShopManager returns the old "shop_manager" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldShopManager(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopManager is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopManager requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopManager: %w", err)
	}
	return oldValue.ShopManager, nil
}

// ResetShopManager resets all changes to the "shop_manager" field.
func (m *OrderMainMutation) ResetShopManager() {
	m.shop_manager = nil
}

// SetPushStatus sets the "push_status" field.
func (m *OrderMainMutation) SetPushStatus(i int8) {
	m.push_status = &i
	m.addpush_status = nil
}

// PushStatus returns the value of the "push_status" field in the mutation.
func (m *OrderMainMutation) PushStatus() (r int8, exists bool) {
	v := m.push_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPushStatus returns the old "push_status" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldPushStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPushStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPushStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPushStatus: %w", err)
	}
	return oldValue.PushStatus, nil
}

// AddPushStatus adds i to the "push_status" field.
func (m *OrderMainMutation) AddPushStatus(i int8) {
	if m.addpush_status != nil {
		*m.addpush_status += i
	} else {
		m.addpush_status = &i
	}
}

// AddedPushStatus returns the value that was added to the "push_status" field in this mutation.
func (m *OrderMainMutation) AddedPushStatus() (r int8, exists bool) {
	v := m.addpush_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetPushStatus resets all changes to the "push_status" field.
func (m *OrderMainMutation) ResetPushStatus() {
	m.push_status = nil
	m.addpush_status = nil
}

// SetBuyerPaidShippingFee sets the "buyer_paid_shipping_fee" field.
func (m *OrderMainMutation) SetBuyerPaidShippingFee(f float64) {
	m.buyer_paid_shipping_fee = &f
	m.addbuyer_paid_shipping_fee = nil
}

// BuyerPaidShippingFee returns the value of the "buyer_paid_shipping_fee" field in the mutation.
func (m *OrderMainMutation) BuyerPaidShippingFee() (r float64, exists bool) {
	v := m.buyer_paid_shipping_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldBuyerPaidShippingFee returns the old "buyer_paid_shipping_fee" field's value of the OrderMain entity.
// If the OrderMain object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMainMutation) OldBuyerPaidShippingFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuyerPaidShippingFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuyerPaidShippingFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuyerPaidShippingFee: %w", err)
	}
	return oldValue.BuyerPaidShippingFee, nil
}

// AddBuyerPaidShippingFee adds f to the "buyer_paid_shipping_fee" field.
func (m *OrderMainMutation) AddBuyerPaidShippingFee(f float64) {
	if m.addbuyer_paid_shipping_fee != nil {
		*m.addbuyer_paid_shipping_fee += f
	} else {
		m.addbuyer_paid_shipping_fee = &f
	}
}

// AddedBuyerPaidShippingFee returns the value that was added to the "buyer_paid_shipping_fee" field in this mutation.
func (m *OrderMainMutation) AddedBuyerPaidShippingFee() (r float64, exists bool) {
	v := m.addbuyer_paid_shipping_fee
	if v == nil {
		return
	}
	return *v, true
}

// ClearBuyerPaidShippingFee clears the value of the "buyer_paid_shipping_fee" field.
func (m *OrderMainMutation) ClearBuyerPaidShippingFee() {
	m.buyer_paid_shipping_fee = nil
	m.addbuyer_paid_shipping_fee = nil
	m.clearedFields[ordermain.FieldBuyerPaidShippingFee] = struct{}{}
}

// BuyerPaidShippingFeeCleared returns if the "buyer_paid_shipping_fee" field was cleared in this mutation.
func (m *OrderMainMutation) BuyerPaidShippingFeeCleared() bool {
	_, ok := m.clearedFields[ordermain.FieldBuyerPaidShippingFee]
	return ok
}

// ResetBuyerPaidShippingFee resets all changes to the "buyer_paid_shipping_fee" field.
func (m *OrderMainMutation) ResetBuyerPaidShippingFee() {
	m.buyer_paid_shipping_fee = nil
	m.addbuyer_paid_shipping_fee = nil
	delete(m.clearedFields, ordermain.FieldBuyerPaidShippingFee)
}

// Where appends a list predicates to the OrderMainMutation builder.
func (m *OrderMainMutation) Where(ps ...predicate.OrderMain) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderMainMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderMain).
func (m *OrderMainMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMainMutation) Fields() []string {
	fields := make([]string, 0, 113)
	if m.order_code != nil {
		fields = append(fields, ordermain.FieldOrderCode)
	}
	if m.order_status != nil {
		fields = append(fields, ordermain.FieldOrderStatus)
	}
	if m.exception_type != nil {
		fields = append(fields, ordermain.FieldExceptionType)
	}
	if m.store_order_code != nil {
		fields = append(fields, ordermain.FieldStoreOrderCode)
	}
	if m.platform != nil {
		fields = append(fields, ordermain.FieldPlatform)
	}
	if m.shop_name != nil {
		fields = append(fields, ordermain.FieldShopName)
	}
	if m.ship_first_name != nil {
		fields = append(fields, ordermain.FieldShipFirstName)
	}
	if m.ship_last_name != nil {
		fields = append(fields, ordermain.FieldShipLastName)
	}
	if m.ship_company != nil {
		fields = append(fields, ordermain.FieldShipCompany)
	}
	if m.ship_street1 != nil {
		fields = append(fields, ordermain.FieldShipStreet1)
	}
	if m.ship_street2 != nil {
		fields = append(fields, ordermain.FieldShipStreet2)
	}
	if m.ship_city != nil {
		fields = append(fields, ordermain.FieldShipCity)
	}
	if m.ship_state != nil {
		fields = append(fields, ordermain.FieldShipState)
	}
	if m.ship_zip != nil {
		fields = append(fields, ordermain.FieldShipZip)
	}
	if m.ship_country != nil {
		fields = append(fields, ordermain.FieldShipCountry)
	}
	if m.ship_country_code != nil {
		fields = append(fields, ordermain.FieldShipCountryCode)
	}
	if m.ship_phone != nil {
		fields = append(fields, ordermain.FieldShipPhone)
	}
	if m.ship_fax != nil {
		fields = append(fields, ordermain.FieldShipFax)
	}
	if m.ship_remark != nil {
		fields = append(fields, ordermain.FieldShipRemark)
	}
	if m.ship_house != nil {
		fields = append(fields, ordermain.FieldShipHouse)
	}
	if m.ship_certificate_code != nil {
		fields = append(fields, ordermain.FieldShipCertificateCode)
	}
	if m.order_user_email != nil {
		fields = append(fields, ordermain.FieldOrderUserEmail)
	}
	if m.orders_user_id != nil {
		fields = append(fields, ordermain.FieldOrdersUserID)
	}
	if m.currency != nil {
		fields = append(fields, ordermain.FieldCurrency)
	}
	if m.currencies_id != nil {
		fields = append(fields, ordermain.FieldCurrenciesID)
	}
	if m.currency_rate != nil {
		fields = append(fields, ordermain.FieldCurrencyRate)
	}
	if m.shipping_method != nil {
		fields = append(fields, ordermain.FieldShippingMethod)
	}
	if m.shipping_method_orig != nil {
		fields = append(fields, ordermain.FieldShippingMethodOrig)
	}
	if m.shipping_method_name != nil {
		fields = append(fields, ordermain.FieldShippingMethodName)
	}
	if m.grand_total != nil {
		fields = append(fields, ordermain.FieldGrandTotal)
	}
	if m.track_number != nil {
		fields = append(fields, ordermain.FieldTrackNumber)
	}
	if m.follow_number != nil {
		fields = append(fields, ordermain.FieldFollowNumber)
	}
	if m.date_payment != nil {
		fields = append(fields, ordermain.FieldDatePayment)
	}
	if m.transaction_number != nil {
		fields = append(fields, ordermain.FieldTransactionNumber)
	}
	if m.transaction_fee != nil {
		fields = append(fields, ordermain.FieldTransactionFee)
	}
	if m.update_track_time != nil {
		fields = append(fields, ordermain.FieldUpdateTrackTime)
	}
	if m.update_follow_time != nil {
		fields = append(fields, ordermain.FieldUpdateFollowTime)
	}
	if m.shipping_cost != nil {
		fields = append(fields, ordermain.FieldShippingCost)
	}
	if m.shipping_cost_ext != nil {
		fields = append(fields, ordermain.FieldShippingCostExt)
	}
	if m.taxes_number != nil {
		fields = append(fields, ordermain.FieldTaxesNumber)
	}
	if m.tax != nil {
		fields = append(fields, ordermain.FieldTax)
	}
	if m.order_discount != nil {
		fields = append(fields, ordermain.FieldOrderDiscount)
	}
	if m.insurance != nil {
		fields = append(fields, ordermain.FieldInsurance)
	}
	if m.order_weight != nil {
		fields = append(fields, ordermain.FieldOrderWeight)
	}
	if m.order_cretate_type != nil {
		fields = append(fields, ordermain.FieldOrderCretateType)
	}
	if m.order_type != nil {
		fields = append(fields, ordermain.FieldOrderType)
	}
	if m.store_created_at != nil {
		fields = append(fields, ordermain.FieldStoreCreatedAt)
	}
	if m.sub_orders_code != nil {
		fields = append(fields, ordermain.FieldSubOrdersCode)
	}
	if m.updated_at != nil {
		fields = append(fields, ordermain.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, ordermain.FieldCreatedAt)
	}
	if m.warehouse_id != nil {
		fields = append(fields, ordermain.FieldWarehouseID)
	}
	if m.order_list_type != nil {
		fields = append(fields, ordermain.FieldOrderListType)
	}
	if m.order_batch_no != nil {
		fields = append(fields, ordermain.FieldOrderBatchNo)
	}
	if m.shop_id != nil {
		fields = append(fields, ordermain.FieldShopID)
	}
	if m.subtotal != nil {
		fields = append(fields, ordermain.FieldSubtotal)
	}
	if m.shipping_free != nil {
		fields = append(fields, ordermain.FieldShippingFree)
	}
	if m.order_cost != nil {
		fields = append(fields, ordermain.FieldOrderCost)
	}
	if m.order_profit != nil {
		fields = append(fields, ordermain.FieldOrderProfit)
	}
	if m.ship_date != nil {
		fields = append(fields, ordermain.FieldShipDate)
	}
	if m.commission != nil {
		fields = append(fields, ordermain.FieldCommission)
	}
	if m.intercept_state != nil {
		fields = append(fields, ordermain.FieldInterceptState)
	}
	if m.send_order_time != nil {
		fields = append(fields, ordermain.FieldSendOrderTime)
	}
	if m.send_order_user != nil {
		fields = append(fields, ordermain.FieldSendOrderUser)
	}
	if m.provider_type != nil {
		fields = append(fields, ordermain.FieldProviderType)
	}
	if m.order_pack_cost != nil {
		fields = append(fields, ordermain.FieldOrderPackCost)
	}
	if m.payment_fix_cost != nil {
		fields = append(fields, ordermain.FieldPaymentFixCost)
	}
	if m.is_fba_behalf != nil {
		fields = append(fields, ordermain.FieldIsFbaBehalf)
	}
	if m.fulfill_type != nil {
		fields = append(fields, ordermain.FieldFulfillType)
	}
	if m.fulfill_exception != nil {
		fields = append(fields, ordermain.FieldFulfillException)
	}
	if m.ioss_number != nil {
		fields = append(fields, ordermain.FieldIossNumber)
	}
	if m.warehouse_shop_id != nil {
		fields = append(fields, ordermain.FieldWarehouseShopID)
	}
	if m.sales_record_number != nil {
		fields = append(fields, ordermain.FieldSalesRecordNumber)
	}
	if m.ticket_code != nil {
		fields = append(fields, ordermain.FieldTicketCode)
	}
	if m.overseas_warehouse_status != nil {
		fields = append(fields, ordermain.FieldOverseasWarehouseStatus)
	}
	if m.pay_pal_id != nil {
		fields = append(fields, ordermain.FieldPayPalID)
	}
	if m.is_update != nil {
		fields = append(fields, ordermain.FieldIsUpdate)
	}
	if m.order_sale_state != nil {
		fields = append(fields, ordermain.FieldOrderSaleState)
	}
	if m.product_cost != nil {
		fields = append(fields, ordermain.FieldProductCost)
	}
	if m.head_cost != nil {
		fields = append(fields, ordermain.FieldHeadCost)
	}
	if m.carrier_code != nil {
		fields = append(fields, ordermain.FieldCarrierCode)
	}
	if m.withheld_tax != nil {
		fields = append(fields, ordermain.FieldWithheldTax)
	}
	if m.other_fee != nil {
		fields = append(fields, ordermain.FieldOtherFee)
	}
	if m.escrow_tax != nil {
		fields = append(fields, ordermain.FieldEscrowTax)
	}
	if m.final_product_vat_tax != nil {
		fields = append(fields, ordermain.FieldFinalProductVatTax)
	}
	if m.final_shipping_vat_tax != nil {
		fields = append(fields, ordermain.FieldFinalShippingVatTax)
	}
	if m.shipping_charge != nil {
		fields = append(fields, ordermain.FieldShippingCharge)
	}
	if m.voucher_platform != nil {
		fields = append(fields, ordermain.FieldVoucherPlatform)
	}
	if m.over_time_left != nil {
		fields = append(fields, ordermain.FieldOverTimeLeft)
	}
	if m.shipping_rebate != nil {
		fields = append(fields, ordermain.FieldShippingRebate)
	}
	if m.label_list != nil {
		fields = append(fields, ordermain.FieldLabelList)
	}
	if m.out_real_grand_total != nil {
		fields = append(fields, ordermain.FieldOutRealGrandTotal)
	}
	if m.bill_list != nil {
		fields = append(fields, ordermain.FieldBillList)
	}
	if m.out_grand_total != nil {
		fields = append(fields, ordermain.FieldOutGrandTotal)
	}
	if m.deliver_shop != nil {
		fields = append(fields, ordermain.FieldDeliverShop)
	}
	if m.shipping_cost_final != nil {
		fields = append(fields, ordermain.FieldShippingCostFinal)
	}
	if m.shipping_free_about != nil {
		fields = append(fields, ordermain.FieldShippingFreeAbout)
	}
	if m.create_order_status != nil {
		fields = append(fields, ordermain.FieldCreateOrderStatus)
	}
	if m.finance_time != nil {
		fields = append(fields, ordermain.FieldFinanceTime)
	}
	if m.is_qcc != nil {
		fields = append(fields, ordermain.FieldIsQcc)
	}
	if m.reject_reason != nil {
		fields = append(fields, ordermain.FieldRejectReason)
	}
	if m.order_local_time != nil {
		fields = append(fields, ordermain.FieldOrderLocalTime)
	}
	if m.discount_code != nil {
		fields = append(fields, ordermain.FieldDiscountCode)
	}
	if m.stockout_status != nil {
		fields = append(fields, ordermain.FieldStockoutStatus)
	}
	if m.order_length != nil {
		fields = append(fields, ordermain.FieldOrderLength)
	}
	if m.order_width != nil {
		fields = append(fields, ordermain.FieldOrderWidth)
	}
	if m.order_height != nil {
		fields = append(fields, ordermain.FieldOrderHeight)
	}
	if m.first_side != nil {
		fields = append(fields, ordermain.FieldFirstSide)
	}
	if m.second_side != nil {
		fields = append(fields, ordermain.FieldSecondSide)
	}
	if m.third_side != nil {
		fields = append(fields, ordermain.FieldThirdSide)
	}
	if m.order_fee_weight != nil {
		fields = append(fields, ordermain.FieldOrderFeeWeight)
	}
	if m.shop_manager != nil {
		fields = append(fields, ordermain.FieldShopManager)
	}
	if m.push_status != nil {
		fields = append(fields, ordermain.FieldPushStatus)
	}
	if m.buyer_paid_shipping_fee != nil {
		fields = append(fields, ordermain.FieldBuyerPaidShippingFee)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMainMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ordermain.FieldOrderCode:
		return m.OrderCode()
	case ordermain.FieldOrderStatus:
		return m.OrderStatus()
	case ordermain.FieldExceptionType:
		return m.ExceptionType()
	case ordermain.FieldStoreOrderCode:
		return m.StoreOrderCode()
	case ordermain.FieldPlatform:
		return m.Platform()
	case ordermain.FieldShopName:
		return m.ShopName()
	case ordermain.FieldShipFirstName:
		return m.ShipFirstName()
	case ordermain.FieldShipLastName:
		return m.ShipLastName()
	case ordermain.FieldShipCompany:
		return m.ShipCompany()
	case ordermain.FieldShipStreet1:
		return m.ShipStreet1()
	case ordermain.FieldShipStreet2:
		return m.ShipStreet2()
	case ordermain.FieldShipCity:
		return m.ShipCity()
	case ordermain.FieldShipState:
		return m.ShipState()
	case ordermain.FieldShipZip:
		return m.ShipZip()
	case ordermain.FieldShipCountry:
		return m.ShipCountry()
	case ordermain.FieldShipCountryCode:
		return m.ShipCountryCode()
	case ordermain.FieldShipPhone:
		return m.ShipPhone()
	case ordermain.FieldShipFax:
		return m.ShipFax()
	case ordermain.FieldShipRemark:
		return m.ShipRemark()
	case ordermain.FieldShipHouse:
		return m.ShipHouse()
	case ordermain.FieldShipCertificateCode:
		return m.ShipCertificateCode()
	case ordermain.FieldOrderUserEmail:
		return m.OrderUserEmail()
	case ordermain.FieldOrdersUserID:
		return m.OrdersUserID()
	case ordermain.FieldCurrency:
		return m.Currency()
	case ordermain.FieldCurrenciesID:
		return m.CurrenciesID()
	case ordermain.FieldCurrencyRate:
		return m.CurrencyRate()
	case ordermain.FieldShippingMethod:
		return m.ShippingMethod()
	case ordermain.FieldShippingMethodOrig:
		return m.ShippingMethodOrig()
	case ordermain.FieldShippingMethodName:
		return m.ShippingMethodName()
	case ordermain.FieldGrandTotal:
		return m.GrandTotal()
	case ordermain.FieldTrackNumber:
		return m.TrackNumber()
	case ordermain.FieldFollowNumber:
		return m.FollowNumber()
	case ordermain.FieldDatePayment:
		return m.DatePayment()
	case ordermain.FieldTransactionNumber:
		return m.TransactionNumber()
	case ordermain.FieldTransactionFee:
		return m.TransactionFee()
	case ordermain.FieldUpdateTrackTime:
		return m.UpdateTrackTime()
	case ordermain.FieldUpdateFollowTime:
		return m.UpdateFollowTime()
	case ordermain.FieldShippingCost:
		return m.ShippingCost()
	case ordermain.FieldShippingCostExt:
		return m.ShippingCostExt()
	case ordermain.FieldTaxesNumber:
		return m.TaxesNumber()
	case ordermain.FieldTax:
		return m.Tax()
	case ordermain.FieldOrderDiscount:
		return m.OrderDiscount()
	case ordermain.FieldInsurance:
		return m.Insurance()
	case ordermain.FieldOrderWeight:
		return m.OrderWeight()
	case ordermain.FieldOrderCretateType:
		return m.OrderCretateType()
	case ordermain.FieldOrderType:
		return m.OrderType()
	case ordermain.FieldStoreCreatedAt:
		return m.StoreCreatedAt()
	case ordermain.FieldSubOrdersCode:
		return m.SubOrdersCode()
	case ordermain.FieldUpdatedAt:
		return m.UpdatedAt()
	case ordermain.FieldCreatedAt:
		return m.CreatedAt()
	case ordermain.FieldWarehouseID:
		return m.WarehouseID()
	case ordermain.FieldOrderListType:
		return m.OrderListType()
	case ordermain.FieldOrderBatchNo:
		return m.OrderBatchNo()
	case ordermain.FieldShopID:
		return m.ShopID()
	case ordermain.FieldSubtotal:
		return m.Subtotal()
	case ordermain.FieldShippingFree:
		return m.ShippingFree()
	case ordermain.FieldOrderCost:
		return m.OrderCost()
	case ordermain.FieldOrderProfit:
		return m.OrderProfit()
	case ordermain.FieldShipDate:
		return m.ShipDate()
	case ordermain.FieldCommission:
		return m.Commission()
	case ordermain.FieldInterceptState:
		return m.InterceptState()
	case ordermain.FieldSendOrderTime:
		return m.SendOrderTime()
	case ordermain.FieldSendOrderUser:
		return m.SendOrderUser()
	case ordermain.FieldProviderType:
		return m.ProviderType()
	case ordermain.FieldOrderPackCost:
		return m.OrderPackCost()
	case ordermain.FieldPaymentFixCost:
		return m.PaymentFixCost()
	case ordermain.FieldIsFbaBehalf:
		return m.IsFbaBehalf()
	case ordermain.FieldFulfillType:
		return m.FulfillType()
	case ordermain.FieldFulfillException:
		return m.FulfillException()
	case ordermain.FieldIossNumber:
		return m.IossNumber()
	case ordermain.FieldWarehouseShopID:
		return m.WarehouseShopID()
	case ordermain.FieldSalesRecordNumber:
		return m.SalesRecordNumber()
	case ordermain.FieldTicketCode:
		return m.TicketCode()
	case ordermain.FieldOverseasWarehouseStatus:
		return m.OverseasWarehouseStatus()
	case ordermain.FieldPayPalID:
		return m.PayPalID()
	case ordermain.FieldIsUpdate:
		return m.IsUpdate()
	case ordermain.FieldOrderSaleState:
		return m.OrderSaleState()
	case ordermain.FieldProductCost:
		return m.ProductCost()
	case ordermain.FieldHeadCost:
		return m.HeadCost()
	case ordermain.FieldCarrierCode:
		return m.CarrierCode()
	case ordermain.FieldWithheldTax:
		return m.WithheldTax()
	case ordermain.FieldOtherFee:
		return m.OtherFee()
	case ordermain.FieldEscrowTax:
		return m.EscrowTax()
	case ordermain.FieldFinalProductVatTax:
		return m.FinalProductVatTax()
	case ordermain.FieldFinalShippingVatTax:
		return m.FinalShippingVatTax()
	case ordermain.FieldShippingCharge:
		return m.ShippingCharge()
	case ordermain.FieldVoucherPlatform:
		return m.VoucherPlatform()
	case ordermain.FieldOverTimeLeft:
		return m.OverTimeLeft()
	case ordermain.FieldShippingRebate:
		return m.ShippingRebate()
	case ordermain.FieldLabelList:
		return m.LabelList()
	case ordermain.FieldOutRealGrandTotal:
		return m.OutRealGrandTotal()
	case ordermain.FieldBillList:
		return m.BillList()
	case ordermain.FieldOutGrandTotal:
		return m.OutGrandTotal()
	case ordermain.FieldDeliverShop:
		return m.DeliverShop()
	case ordermain.FieldShippingCostFinal:
		return m.ShippingCostFinal()
	case ordermain.FieldShippingFreeAbout:
		return m.ShippingFreeAbout()
	case ordermain.FieldCreateOrderStatus:
		return m.CreateOrderStatus()
	case ordermain.FieldFinanceTime:
		return m.FinanceTime()
	case ordermain.FieldIsQcc:
		return m.IsQcc()
	case ordermain.FieldRejectReason:
		return m.RejectReason()
	case ordermain.FieldOrderLocalTime:
		return m.OrderLocalTime()
	case ordermain.FieldDiscountCode:
		return m.DiscountCode()
	case ordermain.FieldStockoutStatus:
		return m.StockoutStatus()
	case ordermain.FieldOrderLength:
		return m.OrderLength()
	case ordermain.FieldOrderWidth:
		return m.OrderWidth()
	case ordermain.FieldOrderHeight:
		return m.OrderHeight()
	case ordermain.FieldFirstSide:
		return m.FirstSide()
	case ordermain.FieldSecondSide:
		return m.SecondSide()
	case ordermain.FieldThirdSide:
		return m.ThirdSide()
	case ordermain.FieldOrderFeeWeight:
		return m.OrderFeeWeight()
	case ordermain.FieldShopManager:
		return m.ShopManager()
	case ordermain.FieldPushStatus:
		return m.PushStatus()
	case ordermain.FieldBuyerPaidShippingFee:
		return m.BuyerPaidShippingFee()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMainMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ordermain.FieldOrderCode:
		return m.OldOrderCode(ctx)
	case ordermain.FieldOrderStatus:
		return m.OldOrderStatus(ctx)
	case ordermain.FieldExceptionType:
		return m.OldExceptionType(ctx)
	case ordermain.FieldStoreOrderCode:
		return m.OldStoreOrderCode(ctx)
	case ordermain.FieldPlatform:
		return m.OldPlatform(ctx)
	case ordermain.FieldShopName:
		return m.OldShopName(ctx)
	case ordermain.FieldShipFirstName:
		return m.OldShipFirstName(ctx)
	case ordermain.FieldShipLastName:
		return m.OldShipLastName(ctx)
	case ordermain.FieldShipCompany:
		return m.OldShipCompany(ctx)
	case ordermain.FieldShipStreet1:
		return m.OldShipStreet1(ctx)
	case ordermain.FieldShipStreet2:
		return m.OldShipStreet2(ctx)
	case ordermain.FieldShipCity:
		return m.OldShipCity(ctx)
	case ordermain.FieldShipState:
		return m.OldShipState(ctx)
	case ordermain.FieldShipZip:
		return m.OldShipZip(ctx)
	case ordermain.FieldShipCountry:
		return m.OldShipCountry(ctx)
	case ordermain.FieldShipCountryCode:
		return m.OldShipCountryCode(ctx)
	case ordermain.FieldShipPhone:
		return m.OldShipPhone(ctx)
	case ordermain.FieldShipFax:
		return m.OldShipFax(ctx)
	case ordermain.FieldShipRemark:
		return m.OldShipRemark(ctx)
	case ordermain.FieldShipHouse:
		return m.OldShipHouse(ctx)
	case ordermain.FieldShipCertificateCode:
		return m.OldShipCertificateCode(ctx)
	case ordermain.FieldOrderUserEmail:
		return m.OldOrderUserEmail(ctx)
	case ordermain.FieldOrdersUserID:
		return m.OldOrdersUserID(ctx)
	case ordermain.FieldCurrency:
		return m.OldCurrency(ctx)
	case ordermain.FieldCurrenciesID:
		return m.OldCurrenciesID(ctx)
	case ordermain.FieldCurrencyRate:
		return m.OldCurrencyRate(ctx)
	case ordermain.FieldShippingMethod:
		return m.OldShippingMethod(ctx)
	case ordermain.FieldShippingMethodOrig:
		return m.OldShippingMethodOrig(ctx)
	case ordermain.FieldShippingMethodName:
		return m.OldShippingMethodName(ctx)
	case ordermain.FieldGrandTotal:
		return m.OldGrandTotal(ctx)
	case ordermain.FieldTrackNumber:
		return m.OldTrackNumber(ctx)
	case ordermain.FieldFollowNumber:
		return m.OldFollowNumber(ctx)
	case ordermain.FieldDatePayment:
		return m.OldDatePayment(ctx)
	case ordermain.FieldTransactionNumber:
		return m.OldTransactionNumber(ctx)
	case ordermain.FieldTransactionFee:
		return m.OldTransactionFee(ctx)
	case ordermain.FieldUpdateTrackTime:
		return m.OldUpdateTrackTime(ctx)
	case ordermain.FieldUpdateFollowTime:
		return m.OldUpdateFollowTime(ctx)
	case ordermain.FieldShippingCost:
		return m.OldShippingCost(ctx)
	case ordermain.FieldShippingCostExt:
		return m.OldShippingCostExt(ctx)
	case ordermain.FieldTaxesNumber:
		return m.OldTaxesNumber(ctx)
	case ordermain.FieldTax:
		return m.OldTax(ctx)
	case ordermain.FieldOrderDiscount:
		return m.OldOrderDiscount(ctx)
	case ordermain.FieldInsurance:
		return m.OldInsurance(ctx)
	case ordermain.FieldOrderWeight:
		return m.OldOrderWeight(ctx)
	case ordermain.FieldOrderCretateType:
		return m.OldOrderCretateType(ctx)
	case ordermain.FieldOrderType:
		return m.OldOrderType(ctx)
	case ordermain.FieldStoreCreatedAt:
		return m.OldStoreCreatedAt(ctx)
	case ordermain.FieldSubOrdersCode:
		return m.OldSubOrdersCode(ctx)
	case ordermain.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case ordermain.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ordermain.FieldWarehouseID:
		return m.OldWarehouseID(ctx)
	case ordermain.FieldOrderListType:
		return m.OldOrderListType(ctx)
	case ordermain.FieldOrderBatchNo:
		return m.OldOrderBatchNo(ctx)
	case ordermain.FieldShopID:
		return m.OldShopID(ctx)
	case ordermain.FieldSubtotal:
		return m.OldSubtotal(ctx)
	case ordermain.FieldShippingFree:
		return m.OldShippingFree(ctx)
	case ordermain.FieldOrderCost:
		return m.OldOrderCost(ctx)
	case ordermain.FieldOrderProfit:
		return m.OldOrderProfit(ctx)
	case ordermain.FieldShipDate:
		return m.OldShipDate(ctx)
	case ordermain.FieldCommission:
		return m.OldCommission(ctx)
	case ordermain.FieldInterceptState:
		return m.OldInterceptState(ctx)
	case ordermain.FieldSendOrderTime:
		return m.OldSendOrderTime(ctx)
	case ordermain.FieldSendOrderUser:
		return m.OldSendOrderUser(ctx)
	case ordermain.FieldProviderType:
		return m.OldProviderType(ctx)
	case ordermain.FieldOrderPackCost:
		return m.OldOrderPackCost(ctx)
	case ordermain.FieldPaymentFixCost:
		return m.OldPaymentFixCost(ctx)
	case ordermain.FieldIsFbaBehalf:
		return m.OldIsFbaBehalf(ctx)
	case ordermain.FieldFulfillType:
		return m.OldFulfillType(ctx)
	case ordermain.FieldFulfillException:
		return m.OldFulfillException(ctx)
	case ordermain.FieldIossNumber:
		return m.OldIossNumber(ctx)
	case ordermain.FieldWarehouseShopID:
		return m.OldWarehouseShopID(ctx)
	case ordermain.FieldSalesRecordNumber:
		return m.OldSalesRecordNumber(ctx)
	case ordermain.FieldTicketCode:
		return m.OldTicketCode(ctx)
	case ordermain.FieldOverseasWarehouseStatus:
		return m.OldOverseasWarehouseStatus(ctx)
	case ordermain.FieldPayPalID:
		return m.OldPayPalID(ctx)
	case ordermain.FieldIsUpdate:
		return m.OldIsUpdate(ctx)
	case ordermain.FieldOrderSaleState:
		return m.OldOrderSaleState(ctx)
	case ordermain.FieldProductCost:
		return m.OldProductCost(ctx)
	case ordermain.FieldHeadCost:
		return m.OldHeadCost(ctx)
	case ordermain.FieldCarrierCode:
		return m.OldCarrierCode(ctx)
	case ordermain.FieldWithheldTax:
		return m.OldWithheldTax(ctx)
	case ordermain.FieldOtherFee:
		return m.OldOtherFee(ctx)
	case ordermain.FieldEscrowTax:
		return m.OldEscrowTax(ctx)
	case ordermain.FieldFinalProductVatTax:
		return m.OldFinalProductVatTax(ctx)
	case ordermain.FieldFinalShippingVatTax:
		return m.OldFinalShippingVatTax(ctx)
	case ordermain.FieldShippingCharge:
		return m.OldShippingCharge(ctx)
	case ordermain.FieldVoucherPlatform:
		return m.OldVoucherPlatform(ctx)
	case ordermain.FieldOverTimeLeft:
		return m.OldOverTimeLeft(ctx)
	case ordermain.FieldShippingRebate:
		return m.OldShippingRebate(ctx)
	case ordermain.FieldLabelList:
		return m.OldLabelList(ctx)
	case ordermain.FieldOutRealGrandTotal:
		return m.OldOutRealGrandTotal(ctx)
	case ordermain.FieldBillList:
		return m.OldBillList(ctx)
	case ordermain.FieldOutGrandTotal:
		return m.OldOutGrandTotal(ctx)
	case ordermain.FieldDeliverShop:
		return m.OldDeliverShop(ctx)
	case ordermain.FieldShippingCostFinal:
		return m.OldShippingCostFinal(ctx)
	case ordermain.FieldShippingFreeAbout:
		return m.OldShippingFreeAbout(ctx)
	case ordermain.FieldCreateOrderStatus:
		return m.OldCreateOrderStatus(ctx)
	case ordermain.FieldFinanceTime:
		return m.OldFinanceTime(ctx)
	case ordermain.FieldIsQcc:
		return m.OldIsQcc(ctx)
	case ordermain.FieldRejectReason:
		return m.OldRejectReason(ctx)
	case ordermain.FieldOrderLocalTime:
		return m.OldOrderLocalTime(ctx)
	case ordermain.FieldDiscountCode:
		return m.OldDiscountCode(ctx)
	case ordermain.FieldStockoutStatus:
		return m.OldStockoutStatus(ctx)
	case ordermain.FieldOrderLength:
		return m.OldOrderLength(ctx)
	case ordermain.FieldOrderWidth:
		return m.OldOrderWidth(ctx)
	case ordermain.FieldOrderHeight:
		return m.OldOrderHeight(ctx)
	case ordermain.FieldFirstSide:
		return m.OldFirstSide(ctx)
	case ordermain.FieldSecondSide:
		return m.OldSecondSide(ctx)
	case ordermain.FieldThirdSide:
		return m.OldThirdSide(ctx)
	case ordermain.FieldOrderFeeWeight:
		return m.OldOrderFeeWeight(ctx)
	case ordermain.FieldShopManager:
		return m.OldShopManager(ctx)
	case ordermain.FieldPushStatus:
		return m.OldPushStatus(ctx)
	case ordermain.FieldBuyerPaidShippingFee:
		return m.OldBuyerPaidShippingFee(ctx)
	}
	return nil, fmt.Errorf("unknown OrderMain field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMainMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ordermain.FieldOrderCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderCode(v)
		return nil
	case ordermain.FieldOrderStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderStatus(v)
		return nil
	case ordermain.FieldExceptionType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExceptionType(v)
		return nil
	case ordermain.FieldStoreOrderCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreOrderCode(v)
		return nil
	case ordermain.FieldPlatform:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case ordermain.FieldShopName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopName(v)
		return nil
	case ordermain.FieldShipFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipFirstName(v)
		return nil
	case ordermain.FieldShipLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipLastName(v)
		return nil
	case ordermain.FieldShipCompany:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipCompany(v)
		return nil
	case ordermain.FieldShipStreet1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipStreet1(v)
		return nil
	case ordermain.FieldShipStreet2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipStreet2(v)
		return nil
	case ordermain.FieldShipCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipCity(v)
		return nil
	case ordermain.FieldShipState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipState(v)
		return nil
	case ordermain.FieldShipZip:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipZip(v)
		return nil
	case ordermain.FieldShipCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipCountry(v)
		return nil
	case ordermain.FieldShipCountryCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipCountryCode(v)
		return nil
	case ordermain.FieldShipPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipPhone(v)
		return nil
	case ordermain.FieldShipFax:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipFax(v)
		return nil
	case ordermain.FieldShipRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipRemark(v)
		return nil
	case ordermain.FieldShipHouse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipHouse(v)
		return nil
	case ordermain.FieldShipCertificateCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipCertificateCode(v)
		return nil
	case ordermain.FieldOrderUserEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderUserEmail(v)
		return nil
	case ordermain.FieldOrdersUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrdersUserID(v)
		return nil
	case ordermain.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case ordermain.FieldCurrenciesID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrenciesID(v)
		return nil
	case ordermain.FieldCurrencyRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrencyRate(v)
		return nil
	case ordermain.FieldShippingMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingMethod(v)
		return nil
	case ordermain.FieldShippingMethodOrig:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingMethodOrig(v)
		return nil
	case ordermain.FieldShippingMethodName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingMethodName(v)
		return nil
	case ordermain.FieldGrandTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrandTotal(v)
		return nil
	case ordermain.FieldTrackNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrackNumber(v)
		return nil
	case ordermain.FieldFollowNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowNumber(v)
		return nil
	case ordermain.FieldDatePayment:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatePayment(v)
		return nil
	case ordermain.FieldTransactionNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionNumber(v)
		return nil
	case ordermain.FieldTransactionFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionFee(v)
		return nil
	case ordermain.FieldUpdateTrackTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTrackTime(v)
		return nil
	case ordermain.FieldUpdateFollowTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateFollowTime(v)
		return nil
	case ordermain.FieldShippingCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingCost(v)
		return nil
	case ordermain.FieldShippingCostExt:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingCostExt(v)
		return nil
	case ordermain.FieldTaxesNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaxesNumber(v)
		return nil
	case ordermain.FieldTax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTax(v)
		return nil
	case ordermain.FieldOrderDiscount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderDiscount(v)
		return nil
	case ordermain.FieldInsurance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInsurance(v)
		return nil
	case ordermain.FieldOrderWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderWeight(v)
		return nil
	case ordermain.FieldOrderCretateType:
		v, ok := value.(ordermain.OrderCretateType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderCretateType(v)
		return nil
	case ordermain.FieldOrderType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderType(v)
		return nil
	case ordermain.FieldStoreCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreCreatedAt(v)
		return nil
	case ordermain.FieldSubOrdersCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubOrdersCode(v)
		return nil
	case ordermain.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case ordermain.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ordermain.FieldWarehouseID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWarehouseID(v)
		return nil
	case ordermain.FieldOrderListType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderListType(v)
		return nil
	case ordermain.FieldOrderBatchNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderBatchNo(v)
		return nil
	case ordermain.FieldShopID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopID(v)
		return nil
	case ordermain.FieldSubtotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubtotal(v)
		return nil
	case ordermain.FieldShippingFree:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingFree(v)
		return nil
	case ordermain.FieldOrderCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderCost(v)
		return nil
	case ordermain.FieldOrderProfit:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderProfit(v)
		return nil
	case ordermain.FieldShipDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipDate(v)
		return nil
	case ordermain.FieldCommission:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommission(v)
		return nil
	case ordermain.FieldInterceptState:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInterceptState(v)
		return nil
	case ordermain.FieldSendOrderTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSendOrderTime(v)
		return nil
	case ordermain.FieldSendOrderUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSendOrderUser(v)
		return nil
	case ordermain.FieldProviderType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderType(v)
		return nil
	case ordermain.FieldOrderPackCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderPackCost(v)
		return nil
	case ordermain.FieldPaymentFixCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentFixCost(v)
		return nil
	case ordermain.FieldIsFbaBehalf:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsFbaBehalf(v)
		return nil
	case ordermain.FieldFulfillType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFulfillType(v)
		return nil
	case ordermain.FieldFulfillException:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFulfillException(v)
		return nil
	case ordermain.FieldIossNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIossNumber(v)
		return nil
	case ordermain.FieldWarehouseShopID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWarehouseShopID(v)
		return nil
	case ordermain.FieldSalesRecordNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalesRecordNumber(v)
		return nil
	case ordermain.FieldTicketCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketCode(v)
		return nil
	case ordermain.FieldOverseasWarehouseStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverseasWarehouseStatus(v)
		return nil
	case ordermain.FieldPayPalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayPalID(v)
		return nil
	case ordermain.FieldIsUpdate:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUpdate(v)
		return nil
	case ordermain.FieldOrderSaleState:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderSaleState(v)
		return nil
	case ordermain.FieldProductCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductCost(v)
		return nil
	case ordermain.FieldHeadCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeadCost(v)
		return nil
	case ordermain.FieldCarrierCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCarrierCode(v)
		return nil
	case ordermain.FieldWithheldTax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithheldTax(v)
		return nil
	case ordermain.FieldOtherFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherFee(v)
		return nil
	case ordermain.FieldEscrowTax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEscrowTax(v)
		return nil
	case ordermain.FieldFinalProductVatTax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalProductVatTax(v)
		return nil
	case ordermain.FieldFinalShippingVatTax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalShippingVatTax(v)
		return nil
	case ordermain.FieldShippingCharge:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingCharge(v)
		return nil
	case ordermain.FieldVoucherPlatform:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoucherPlatform(v)
		return nil
	case ordermain.FieldOverTimeLeft:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverTimeLeft(v)
		return nil
	case ordermain.FieldShippingRebate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingRebate(v)
		return nil
	case ordermain.FieldLabelList:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabelList(v)
		return nil
	case ordermain.FieldOutRealGrandTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutRealGrandTotal(v)
		return nil
	case ordermain.FieldBillList:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillList(v)
		return nil
	case ordermain.FieldOutGrandTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutGrandTotal(v)
		return nil
	case ordermain.FieldDeliverShop:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeliverShop(v)
		return nil
	case ordermain.FieldShippingCostFinal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingCostFinal(v)
		return nil
	case ordermain.FieldShippingFreeAbout:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingFreeAbout(v)
		return nil
	case ordermain.FieldCreateOrderStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateOrderStatus(v)
		return nil
	case ordermain.FieldFinanceTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinanceTime(v)
		return nil
	case ordermain.FieldIsQcc:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsQcc(v)
		return nil
	case ordermain.FieldRejectReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRejectReason(v)
		return nil
	case ordermain.FieldOrderLocalTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderLocalTime(v)
		return nil
	case ordermain.FieldDiscountCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountCode(v)
		return nil
	case ordermain.FieldStockoutStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStockoutStatus(v)
		return nil
	case ordermain.FieldOrderLength:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderLength(v)
		return nil
	case ordermain.FieldOrderWidth:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderWidth(v)
		return nil
	case ordermain.FieldOrderHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderHeight(v)
		return nil
	case ordermain.FieldFirstSide:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstSide(v)
		return nil
	case ordermain.FieldSecondSide:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecondSide(v)
		return nil
	case ordermain.FieldThirdSide:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThirdSide(v)
		return nil
	case ordermain.FieldOrderFeeWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderFeeWeight(v)
		return nil
	case ordermain.FieldShopManager:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopManager(v)
		return nil
	case ordermain.FieldPushStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPushStatus(v)
		return nil
	case ordermain.FieldBuyerPaidShippingFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuyerPaidShippingFee(v)
		return nil
	}
	return fmt.Errorf("unknown OrderMain field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMainMutation) AddedFields() []string {
	var fields []string
	if m.addorder_status != nil {
		fields = append(fields, ordermain.FieldOrderStatus)
	}
	if m.addexception_type != nil {
		fields = append(fields, ordermain.FieldExceptionType)
	}
	if m.addcurrencies_id != nil {
		fields = append(fields, ordermain.FieldCurrenciesID)
	}
	if m.addcurrency_rate != nil {
		fields = append(fields, ordermain.FieldCurrencyRate)
	}
	if m.addgrand_total != nil {
		fields = append(fields, ordermain.FieldGrandTotal)
	}
	if m.addtransaction_fee != nil {
		fields = append(fields, ordermain.FieldTransactionFee)
	}
	if m.addshipping_cost != nil {
		fields = append(fields, ordermain.FieldShippingCost)
	}
	if m.addshipping_cost_ext != nil {
		fields = append(fields, ordermain.FieldShippingCostExt)
	}
	if m.addtax != nil {
		fields = append(fields, ordermain.FieldTax)
	}
	if m.addorder_discount != nil {
		fields = append(fields, ordermain.FieldOrderDiscount)
	}
	if m.addinsurance != nil {
		fields = append(fields, ordermain.FieldInsurance)
	}
	if m.addorder_weight != nil {
		fields = append(fields, ordermain.FieldOrderWeight)
	}
	if m.addorder_type != nil {
		fields = append(fields, ordermain.FieldOrderType)
	}
	if m.addorder_list_type != nil {
		fields = append(fields, ordermain.FieldOrderListType)
	}
	if m.addshop_id != nil {
		fields = append(fields, ordermain.FieldShopID)
	}
	if m.addsubtotal != nil {
		fields = append(fields, ordermain.FieldSubtotal)
	}
	if m.addshipping_free != nil {
		fields = append(fields, ordermain.FieldShippingFree)
	}
	if m.addorder_cost != nil {
		fields = append(fields, ordermain.FieldOrderCost)
	}
	if m.addorder_profit != nil {
		fields = append(fields, ordermain.FieldOrderProfit)
	}
	if m.addcommission != nil {
		fields = append(fields, ordermain.FieldCommission)
	}
	if m.addintercept_state != nil {
		fields = append(fields, ordermain.FieldInterceptState)
	}
	if m.addprovider_type != nil {
		fields = append(fields, ordermain.FieldProviderType)
	}
	if m.addorder_pack_cost != nil {
		fields = append(fields, ordermain.FieldOrderPackCost)
	}
	if m.addpayment_fix_cost != nil {
		fields = append(fields, ordermain.FieldPaymentFixCost)
	}
	if m.addis_fba_behalf != nil {
		fields = append(fields, ordermain.FieldIsFbaBehalf)
	}
	if m.addfulfill_type != nil {
		fields = append(fields, ordermain.FieldFulfillType)
	}
	if m.addfulfill_exception != nil {
		fields = append(fields, ordermain.FieldFulfillException)
	}
	if m.addwarehouse_shop_id != nil {
		fields = append(fields, ordermain.FieldWarehouseShopID)
	}
	if m.addis_update != nil {
		fields = append(fields, ordermain.FieldIsUpdate)
	}
	if m.addorder_sale_state != nil {
		fields = append(fields, ordermain.FieldOrderSaleState)
	}
	if m.addproduct_cost != nil {
		fields = append(fields, ordermain.FieldProductCost)
	}
	if m.addhead_cost != nil {
		fields = append(fields, ordermain.FieldHeadCost)
	}
	if m.addwithheld_tax != nil {
		fields = append(fields, ordermain.FieldWithheldTax)
	}
	if m.addother_fee != nil {
		fields = append(fields, ordermain.FieldOtherFee)
	}
	if m.addescrow_tax != nil {
		fields = append(fields, ordermain.FieldEscrowTax)
	}
	if m.addfinal_product_vat_tax != nil {
		fields = append(fields, ordermain.FieldFinalProductVatTax)
	}
	if m.addfinal_shipping_vat_tax != nil {
		fields = append(fields, ordermain.FieldFinalShippingVatTax)
	}
	if m.addshipping_charge != nil {
		fields = append(fields, ordermain.FieldShippingCharge)
	}
	if m.addvoucher_platform != nil {
		fields = append(fields, ordermain.FieldVoucherPlatform)
	}
	if m.addshipping_rebate != nil {
		fields = append(fields, ordermain.FieldShippingRebate)
	}
	if m.addout_real_grand_total != nil {
		fields = append(fields, ordermain.FieldOutRealGrandTotal)
	}
	if m.addout_grand_total != nil {
		fields = append(fields, ordermain.FieldOutGrandTotal)
	}
	if m.addshipping_cost_final != nil {
		fields = append(fields, ordermain.FieldShippingCostFinal)
	}
	if m.addshipping_free_about != nil {
		fields = append(fields, ordermain.FieldShippingFreeAbout)
	}
	if m.addcreate_order_status != nil {
		fields = append(fields, ordermain.FieldCreateOrderStatus)
	}
	if m.addis_qcc != nil {
		fields = append(fields, ordermain.FieldIsQcc)
	}
	if m.addstockout_status != nil {
		fields = append(fields, ordermain.FieldStockoutStatus)
	}
	if m.addorder_length != nil {
		fields = append(fields, ordermain.FieldOrderLength)
	}
	if m.addorder_width != nil {
		fields = append(fields, ordermain.FieldOrderWidth)
	}
	if m.addorder_height != nil {
		fields = append(fields, ordermain.FieldOrderHeight)
	}
	if m.addfirst_side != nil {
		fields = append(fields, ordermain.FieldFirstSide)
	}
	if m.addsecond_side != nil {
		fields = append(fields, ordermain.FieldSecondSide)
	}
	if m.addthird_side != nil {
		fields = append(fields, ordermain.FieldThirdSide)
	}
	if m.addorder_fee_weight != nil {
		fields = append(fields, ordermain.FieldOrderFeeWeight)
	}
	if m.addpush_status != nil {
		fields = append(fields, ordermain.FieldPushStatus)
	}
	if m.addbuyer_paid_shipping_fee != nil {
		fields = append(fields, ordermain.FieldBuyerPaidShippingFee)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMainMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ordermain.FieldOrderStatus:
		return m.AddedOrderStatus()
	case ordermain.FieldExceptionType:
		return m.AddedExceptionType()
	case ordermain.FieldCurrenciesID:
		return m.AddedCurrenciesID()
	case ordermain.FieldCurrencyRate:
		return m.AddedCurrencyRate()
	case ordermain.FieldGrandTotal:
		return m.AddedGrandTotal()
	case ordermain.FieldTransactionFee:
		return m.AddedTransactionFee()
	case ordermain.FieldShippingCost:
		return m.AddedShippingCost()
	case ordermain.FieldShippingCostExt:
		return m.AddedShippingCostExt()
	case ordermain.FieldTax:
		return m.AddedTax()
	case ordermain.FieldOrderDiscount:
		return m.AddedOrderDiscount()
	case ordermain.FieldInsurance:
		return m.AddedInsurance()
	case ordermain.FieldOrderWeight:
		return m.AddedOrderWeight()
	case ordermain.FieldOrderType:
		return m.AddedOrderType()
	case ordermain.FieldOrderListType:
		return m.AddedOrderListType()
	case ordermain.FieldShopID:
		return m.AddedShopID()
	case ordermain.FieldSubtotal:
		return m.AddedSubtotal()
	case ordermain.FieldShippingFree:
		return m.AddedShippingFree()
	case ordermain.FieldOrderCost:
		return m.AddedOrderCost()
	case ordermain.FieldOrderProfit:
		return m.AddedOrderProfit()
	case ordermain.FieldCommission:
		return m.AddedCommission()
	case ordermain.FieldInterceptState:
		return m.AddedInterceptState()
	case ordermain.FieldProviderType:
		return m.AddedProviderType()
	case ordermain.FieldOrderPackCost:
		return m.AddedOrderPackCost()
	case ordermain.FieldPaymentFixCost:
		return m.AddedPaymentFixCost()
	case ordermain.FieldIsFbaBehalf:
		return m.AddedIsFbaBehalf()
	case ordermain.FieldFulfillType:
		return m.AddedFulfillType()
	case ordermain.FieldFulfillException:
		return m.AddedFulfillException()
	case ordermain.FieldWarehouseShopID:
		return m.AddedWarehouseShopID()
	case ordermain.FieldIsUpdate:
		return m.AddedIsUpdate()
	case ordermain.FieldOrderSaleState:
		return m.AddedOrderSaleState()
	case ordermain.FieldProductCost:
		return m.AddedProductCost()
	case ordermain.FieldHeadCost:
		return m.AddedHeadCost()
	case ordermain.FieldWithheldTax:
		return m.AddedWithheldTax()
	case ordermain.FieldOtherFee:
		return m.AddedOtherFee()
	case ordermain.FieldEscrowTax:
		return m.AddedEscrowTax()
	case ordermain.FieldFinalProductVatTax:
		return m.AddedFinalProductVatTax()
	case ordermain.FieldFinalShippingVatTax:
		return m.AddedFinalShippingVatTax()
	case ordermain.FieldShippingCharge:
		return m.AddedShippingCharge()
	case ordermain.FieldVoucherPlatform:
		return m.AddedVoucherPlatform()
	case ordermain.FieldShippingRebate:
		return m.AddedShippingRebate()
	case ordermain.FieldOutRealGrandTotal:
		return m.AddedOutRealGrandTotal()
	case ordermain.FieldOutGrandTotal:
		return m.AddedOutGrandTotal()
	case ordermain.FieldShippingCostFinal:
		return m.AddedShippingCostFinal()
	case ordermain.FieldShippingFreeAbout:
		return m.AddedShippingFreeAbout()
	case ordermain.FieldCreateOrderStatus:
		return m.AddedCreateOrderStatus()
	case ordermain.FieldIsQcc:
		return m.AddedIsQcc()
	case ordermain.FieldStockoutStatus:
		return m.AddedStockoutStatus()
	case ordermain.FieldOrderLength:
		return m.AddedOrderLength()
	case ordermain.FieldOrderWidth:
		return m.AddedOrderWidth()
	case ordermain.FieldOrderHeight:
		return m.AddedOrderHeight()
	case ordermain.FieldFirstSide:
		return m.AddedFirstSide()
	case ordermain.FieldSecondSide:
		return m.AddedSecondSide()
	case ordermain.FieldThirdSide:
		return m.AddedThirdSide()
	case ordermain.FieldOrderFeeWeight:
		return m.AddedOrderFeeWeight()
	case ordermain.FieldPushStatus:
		return m.AddedPushStatus()
	case ordermain.FieldBuyerPaidShippingFee:
		return m.AddedBuyerPaidShippingFee()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMainMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ordermain.FieldOrderStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderStatus(v)
		return nil
	case ordermain.FieldExceptionType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExceptionType(v)
		return nil
	case ordermain.FieldCurrenciesID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrenciesID(v)
		return nil
	case ordermain.FieldCurrencyRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrencyRate(v)
		return nil
	case ordermain.FieldGrandTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGrandTotal(v)
		return nil
	case ordermain.FieldTransactionFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTransactionFee(v)
		return nil
	case ordermain.FieldShippingCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShippingCost(v)
		return nil
	case ordermain.FieldShippingCostExt:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShippingCostExt(v)
		return nil
	case ordermain.FieldTax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTax(v)
		return nil
	case ordermain.FieldOrderDiscount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderDiscount(v)
		return nil
	case ordermain.FieldInsurance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInsurance(v)
		return nil
	case ordermain.FieldOrderWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderWeight(v)
		return nil
	case ordermain.FieldOrderType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderType(v)
		return nil
	case ordermain.FieldOrderListType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderListType(v)
		return nil
	case ordermain.FieldShopID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShopID(v)
		return nil
	case ordermain.FieldSubtotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSubtotal(v)
		return nil
	case ordermain.FieldShippingFree:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShippingFree(v)
		return nil
	case ordermain.FieldOrderCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderCost(v)
		return nil
	case ordermain.FieldOrderProfit:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderProfit(v)
		return nil
	case ordermain.FieldCommission:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCommission(v)
		return nil
	case ordermain.FieldInterceptState:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInterceptState(v)
		return nil
	case ordermain.FieldProviderType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProviderType(v)
		return nil
	case ordermain.FieldOrderPackCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderPackCost(v)
		return nil
	case ordermain.FieldPaymentFixCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentFixCost(v)
		return nil
	case ordermain.FieldIsFbaBehalf:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsFbaBehalf(v)
		return nil
	case ordermain.FieldFulfillType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFulfillType(v)
		return nil
	case ordermain.FieldFulfillException:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFulfillException(v)
		return nil
	case ordermain.FieldWarehouseShopID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWarehouseShopID(v)
		return nil
	case ordermain.FieldIsUpdate:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsUpdate(v)
		return nil
	case ordermain.FieldOrderSaleState:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderSaleState(v)
		return nil
	case ordermain.FieldProductCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductCost(v)
		return nil
	case ordermain.FieldHeadCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeadCost(v)
		return nil
	case ordermain.FieldWithheldTax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWithheldTax(v)
		return nil
	case ordermain.FieldOtherFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOtherFee(v)
		return nil
	case ordermain.FieldEscrowTax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEscrowTax(v)
		return nil
	case ordermain.FieldFinalProductVatTax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFinalProductVatTax(v)
		return nil
	case ordermain.FieldFinalShippingVatTax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFinalShippingVatTax(v)
		return nil
	case ordermain.FieldShippingCharge:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShippingCharge(v)
		return nil
	case ordermain.FieldVoucherPlatform:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVoucherPlatform(v)
		return nil
	case ordermain.FieldShippingRebate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShippingRebate(v)
		return nil
	case ordermain.FieldOutRealGrandTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutRealGrandTotal(v)
		return nil
	case ordermain.FieldOutGrandTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutGrandTotal(v)
		return nil
	case ordermain.FieldShippingCostFinal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShippingCostFinal(v)
		return nil
	case ordermain.FieldShippingFreeAbout:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShippingFreeAbout(v)
		return nil
	case ordermain.FieldCreateOrderStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateOrderStatus(v)
		return nil
	case ordermain.FieldIsQcc:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsQcc(v)
		return nil
	case ordermain.FieldStockoutStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStockoutStatus(v)
		return nil
	case ordermain.FieldOrderLength:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderLength(v)
		return nil
	case ordermain.FieldOrderWidth:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderWidth(v)
		return nil
	case ordermain.FieldOrderHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderHeight(v)
		return nil
	case ordermain.FieldFirstSide:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFirstSide(v)
		return nil
	case ordermain.FieldSecondSide:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSecondSide(v)
		return nil
	case ordermain.FieldThirdSide:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThirdSide(v)
		return nil
	case ordermain.FieldOrderFeeWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderFeeWeight(v)
		return nil
	case ordermain.FieldPushStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPushStatus(v)
		return nil
	case ordermain.FieldBuyerPaidShippingFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBuyerPaidShippingFee(v)
		return nil
	}
	return fmt.Errorf("unknown OrderMain numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMainMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ordermain.FieldOverTimeLeft) {
		fields = append(fields, ordermain.FieldOverTimeLeft)
	}
	if m.FieldCleared(ordermain.FieldBuyerPaidShippingFee) {
		fields = append(fields, ordermain.FieldBuyerPaidShippingFee)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMainMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMainMutation) ClearField(name string) error {
	switch name {
	case ordermain.FieldOverTimeLeft:
		m.ClearOverTimeLeft()
		return nil
	case ordermain.FieldBuyerPaidShippingFee:
		m.ClearBuyerPaidShippingFee()
		return nil
	}
	return fmt.Errorf("unknown OrderMain nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMainMutation) ResetField(name string) error {
	switch name {
	case ordermain.FieldOrderCode:
		m.ResetOrderCode()
		return nil
	case ordermain.FieldOrderStatus:
		m.ResetOrderStatus()
		return nil
	case ordermain.FieldExceptionType:
		m.ResetExceptionType()
		return nil
	case ordermain.FieldStoreOrderCode:
		m.ResetStoreOrderCode()
		return nil
	case ordermain.FieldPlatform:
		m.ResetPlatform()
		return nil
	case ordermain.FieldShopName:
		m.ResetShopName()
		return nil
	case ordermain.FieldShipFirstName:
		m.ResetShipFirstName()
		return nil
	case ordermain.FieldShipLastName:
		m.ResetShipLastName()
		return nil
	case ordermain.FieldShipCompany:
		m.ResetShipCompany()
		return nil
	case ordermain.FieldShipStreet1:
		m.ResetShipStreet1()
		return nil
	case ordermain.FieldShipStreet2:
		m.ResetShipStreet2()
		return nil
	case ordermain.FieldShipCity:
		m.ResetShipCity()
		return nil
	case ordermain.FieldShipState:
		m.ResetShipState()
		return nil
	case ordermain.FieldShipZip:
		m.ResetShipZip()
		return nil
	case ordermain.FieldShipCountry:
		m.ResetShipCountry()
		return nil
	case ordermain.FieldShipCountryCode:
		m.ResetShipCountryCode()
		return nil
	case ordermain.FieldShipPhone:
		m.ResetShipPhone()
		return nil
	case ordermain.FieldShipFax:
		m.ResetShipFax()
		return nil
	case ordermain.FieldShipRemark:
		m.ResetShipRemark()
		return nil
	case ordermain.FieldShipHouse:
		m.ResetShipHouse()
		return nil
	case ordermain.FieldShipCertificateCode:
		m.ResetShipCertificateCode()
		return nil
	case ordermain.FieldOrderUserEmail:
		m.ResetOrderUserEmail()
		return nil
	case ordermain.FieldOrdersUserID:
		m.ResetOrdersUserID()
		return nil
	case ordermain.FieldCurrency:
		m.ResetCurrency()
		return nil
	case ordermain.FieldCurrenciesID:
		m.ResetCurrenciesID()
		return nil
	case ordermain.FieldCurrencyRate:
		m.ResetCurrencyRate()
		return nil
	case ordermain.FieldShippingMethod:
		m.ResetShippingMethod()
		return nil
	case ordermain.FieldShippingMethodOrig:
		m.ResetShippingMethodOrig()
		return nil
	case ordermain.FieldShippingMethodName:
		m.ResetShippingMethodName()
		return nil
	case ordermain.FieldGrandTotal:
		m.ResetGrandTotal()
		return nil
	case ordermain.FieldTrackNumber:
		m.ResetTrackNumber()
		return nil
	case ordermain.FieldFollowNumber:
		m.ResetFollowNumber()
		return nil
	case ordermain.FieldDatePayment:
		m.ResetDatePayment()
		return nil
	case ordermain.FieldTransactionNumber:
		m.ResetTransactionNumber()
		return nil
	case ordermain.FieldTransactionFee:
		m.ResetTransactionFee()
		return nil
	case ordermain.FieldUpdateTrackTime:
		m.ResetUpdateTrackTime()
		return nil
	case ordermain.FieldUpdateFollowTime:
		m.ResetUpdateFollowTime()
		return nil
	case ordermain.FieldShippingCost:
		m.ResetShippingCost()
		return nil
	case ordermain.FieldShippingCostExt:
		m.ResetShippingCostExt()
		return nil
	case ordermain.FieldTaxesNumber:
		m.ResetTaxesNumber()
		return nil
	case ordermain.FieldTax:
		m.ResetTax()
		return nil
	case ordermain.FieldOrderDiscount:
		m.ResetOrderDiscount()
		return nil
	case ordermain.FieldInsurance:
		m.ResetInsurance()
		return nil
	case ordermain.FieldOrderWeight:
		m.ResetOrderWeight()
		return nil
	case ordermain.FieldOrderCretateType:
		m.ResetOrderCretateType()
		return nil
	case ordermain.FieldOrderType:
		m.ResetOrderType()
		return nil
	case ordermain.FieldStoreCreatedAt:
		m.ResetStoreCreatedAt()
		return nil
	case ordermain.FieldSubOrdersCode:
		m.ResetSubOrdersCode()
		return nil
	case ordermain.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case ordermain.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ordermain.FieldWarehouseID:
		m.ResetWarehouseID()
		return nil
	case ordermain.FieldOrderListType:
		m.ResetOrderListType()
		return nil
	case ordermain.FieldOrderBatchNo:
		m.ResetOrderBatchNo()
		return nil
	case ordermain.FieldShopID:
		m.ResetShopID()
		return nil
	case ordermain.FieldSubtotal:
		m.ResetSubtotal()
		return nil
	case ordermain.FieldShippingFree:
		m.ResetShippingFree()
		return nil
	case ordermain.FieldOrderCost:
		m.ResetOrderCost()
		return nil
	case ordermain.FieldOrderProfit:
		m.ResetOrderProfit()
		return nil
	case ordermain.FieldShipDate:
		m.ResetShipDate()
		return nil
	case ordermain.FieldCommission:
		m.ResetCommission()
		return nil
	case ordermain.FieldInterceptState:
		m.ResetInterceptState()
		return nil
	case ordermain.FieldSendOrderTime:
		m.ResetSendOrderTime()
		return nil
	case ordermain.FieldSendOrderUser:
		m.ResetSendOrderUser()
		return nil
	case ordermain.FieldProviderType:
		m.ResetProviderType()
		return nil
	case ordermain.FieldOrderPackCost:
		m.ResetOrderPackCost()
		return nil
	case ordermain.FieldPaymentFixCost:
		m.ResetPaymentFixCost()
		return nil
	case ordermain.FieldIsFbaBehalf:
		m.ResetIsFbaBehalf()
		return nil
	case ordermain.FieldFulfillType:
		m.ResetFulfillType()
		return nil
	case ordermain.FieldFulfillException:
		m.ResetFulfillException()
		return nil
	case ordermain.FieldIossNumber:
		m.ResetIossNumber()
		return nil
	case ordermain.FieldWarehouseShopID:
		m.ResetWarehouseShopID()
		return nil
	case ordermain.FieldSalesRecordNumber:
		m.ResetSalesRecordNumber()
		return nil
	case ordermain.FieldTicketCode:
		m.ResetTicketCode()
		return nil
	case ordermain.FieldOverseasWarehouseStatus:
		m.ResetOverseasWarehouseStatus()
		return nil
	case ordermain.FieldPayPalID:
		m.ResetPayPalID()
		return nil
	case ordermain.FieldIsUpdate:
		m.ResetIsUpdate()
		return nil
	case ordermain.FieldOrderSaleState:
		m.ResetOrderSaleState()
		return nil
	case ordermain.FieldProductCost:
		m.ResetProductCost()
		return nil
	case ordermain.FieldHeadCost:
		m.ResetHeadCost()
		return nil
	case ordermain.FieldCarrierCode:
		m.ResetCarrierCode()
		return nil
	case ordermain.FieldWithheldTax:
		m.ResetWithheldTax()
		return nil
	case ordermain.FieldOtherFee:
		m.ResetOtherFee()
		return nil
	case ordermain.FieldEscrowTax:
		m.ResetEscrowTax()
		return nil
	case ordermain.FieldFinalProductVatTax:
		m.ResetFinalProductVatTax()
		return nil
	case ordermain.FieldFinalShippingVatTax:
		m.ResetFinalShippingVatTax()
		return nil
	case ordermain.FieldShippingCharge:
		m.ResetShippingCharge()
		return nil
	case ordermain.FieldVoucherPlatform:
		m.ResetVoucherPlatform()
		return nil
	case ordermain.FieldOverTimeLeft:
		m.ResetOverTimeLeft()
		return nil
	case ordermain.FieldShippingRebate:
		m.ResetShippingRebate()
		return nil
	case ordermain.FieldLabelList:
		m.ResetLabelList()
		return nil
	case ordermain.FieldOutRealGrandTotal:
		m.ResetOutRealGrandTotal()
		return nil
	case ordermain.FieldBillList:
		m.ResetBillList()
		return nil
	case ordermain.FieldOutGrandTotal:
		m.ResetOutGrandTotal()
		return nil
	case ordermain.FieldDeliverShop:
		m.ResetDeliverShop()
		return nil
	case ordermain.FieldShippingCostFinal:
		m.ResetShippingCostFinal()
		return nil
	case ordermain.FieldShippingFreeAbout:
		m.ResetShippingFreeAbout()
		return nil
	case ordermain.FieldCreateOrderStatus:
		m.ResetCreateOrderStatus()
		return nil
	case ordermain.FieldFinanceTime:
		m.ResetFinanceTime()
		return nil
	case ordermain.FieldIsQcc:
		m.ResetIsQcc()
		return nil
	case ordermain.FieldRejectReason:
		m.ResetRejectReason()
		return nil
	case ordermain.FieldOrderLocalTime:
		m.ResetOrderLocalTime()
		return nil
	case ordermain.FieldDiscountCode:
		m.ResetDiscountCode()
		return nil
	case ordermain.FieldStockoutStatus:
		m.ResetStockoutStatus()
		return nil
	case ordermain.FieldOrderLength:
		m.ResetOrderLength()
		return nil
	case ordermain.FieldOrderWidth:
		m.ResetOrderWidth()
		return nil
	case ordermain.FieldOrderHeight:
		m.ResetOrderHeight()
		return nil
	case ordermain.FieldFirstSide:
		m.ResetFirstSide()
		return nil
	case ordermain.FieldSecondSide:
		m.ResetSecondSide()
		return nil
	case ordermain.FieldThirdSide:
		m.ResetThirdSide()
		return nil
	case ordermain.FieldOrderFeeWeight:
		m.ResetOrderFeeWeight()
		return nil
	case ordermain.FieldShopManager:
		m.ResetShopManager()
		return nil
	case ordermain.FieldPushStatus:
		m.ResetPushStatus()
		return nil
	case ordermain.FieldBuyerPaidShippingFee:
		m.ResetBuyerPaidShippingFee()
		return nil
	}
	return fmt.Errorf("unknown OrderMain field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMainMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMainMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMainMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMainMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMainMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMainMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMainMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OrderMain unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMainMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OrderMain edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
