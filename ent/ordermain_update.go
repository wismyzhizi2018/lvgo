// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"order/ent/ordermain"
	"order/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderMainUpdate is the builder for updating OrderMain entities.
type OrderMainUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMainMutation
}

// Where appends a list predicates to the OrderMainUpdate builder.
func (omu *OrderMainUpdate) Where(ps ...predicate.OrderMain) *OrderMainUpdate {
	omu.mutation.Where(ps...)
	return omu
}

// SetOrderCode sets the "order_code" field.
func (omu *OrderMainUpdate) SetOrderCode(s string) *OrderMainUpdate {
	omu.mutation.SetOrderCode(s)
	return omu
}

// SetNillableOrderCode sets the "order_code" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderCode(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetOrderCode(*s)
	}
	return omu
}

// SetOrderStatus sets the "order_status" field.
func (omu *OrderMainUpdate) SetOrderStatus(i int8) *OrderMainUpdate {
	omu.mutation.ResetOrderStatus()
	omu.mutation.SetOrderStatus(i)
	return omu
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderStatus(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetOrderStatus(*i)
	}
	return omu
}

// AddOrderStatus adds i to the "order_status" field.
func (omu *OrderMainUpdate) AddOrderStatus(i int8) *OrderMainUpdate {
	omu.mutation.AddOrderStatus(i)
	return omu
}

// SetExceptionType sets the "exception_type" field.
func (omu *OrderMainUpdate) SetExceptionType(i int8) *OrderMainUpdate {
	omu.mutation.ResetExceptionType()
	omu.mutation.SetExceptionType(i)
	return omu
}

// AddExceptionType adds i to the "exception_type" field.
func (omu *OrderMainUpdate) AddExceptionType(i int8) *OrderMainUpdate {
	omu.mutation.AddExceptionType(i)
	return omu
}

// SetStoreOrderCode sets the "store_order_code" field.
func (omu *OrderMainUpdate) SetStoreOrderCode(s string) *OrderMainUpdate {
	omu.mutation.SetStoreOrderCode(s)
	return omu
}

// SetNillableStoreOrderCode sets the "store_order_code" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableStoreOrderCode(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetStoreOrderCode(*s)
	}
	return omu
}

// SetPlatform sets the "platform" field.
func (omu *OrderMainUpdate) SetPlatform(s string) *OrderMainUpdate {
	omu.mutation.SetPlatform(s)
	return omu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillablePlatform(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetPlatform(*s)
	}
	return omu
}

// SetShopName sets the "shop_name" field.
func (omu *OrderMainUpdate) SetShopName(s string) *OrderMainUpdate {
	omu.mutation.SetShopName(s)
	return omu
}

// SetNillableShopName sets the "shop_name" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShopName(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShopName(*s)
	}
	return omu
}

// SetShipFirstName sets the "ship_first_name" field.
func (omu *OrderMainUpdate) SetShipFirstName(s string) *OrderMainUpdate {
	omu.mutation.SetShipFirstName(s)
	return omu
}

// SetNillableShipFirstName sets the "ship_first_name" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipFirstName(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipFirstName(*s)
	}
	return omu
}

// SetShipLastName sets the "ship_last_name" field.
func (omu *OrderMainUpdate) SetShipLastName(s string) *OrderMainUpdate {
	omu.mutation.SetShipLastName(s)
	return omu
}

// SetNillableShipLastName sets the "ship_last_name" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipLastName(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipLastName(*s)
	}
	return omu
}

// SetShipCompany sets the "ship_company" field.
func (omu *OrderMainUpdate) SetShipCompany(s string) *OrderMainUpdate {
	omu.mutation.SetShipCompany(s)
	return omu
}

// SetNillableShipCompany sets the "ship_company" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipCompany(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipCompany(*s)
	}
	return omu
}

// SetShipStreet1 sets the "ship_street1" field.
func (omu *OrderMainUpdate) SetShipStreet1(s string) *OrderMainUpdate {
	omu.mutation.SetShipStreet1(s)
	return omu
}

// SetNillableShipStreet1 sets the "ship_street1" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipStreet1(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipStreet1(*s)
	}
	return omu
}

// SetShipStreet2 sets the "ship_street2" field.
func (omu *OrderMainUpdate) SetShipStreet2(s string) *OrderMainUpdate {
	omu.mutation.SetShipStreet2(s)
	return omu
}

// SetNillableShipStreet2 sets the "ship_street2" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipStreet2(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipStreet2(*s)
	}
	return omu
}

// SetShipCity sets the "ship_city" field.
func (omu *OrderMainUpdate) SetShipCity(s string) *OrderMainUpdate {
	omu.mutation.SetShipCity(s)
	return omu
}

// SetNillableShipCity sets the "ship_city" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipCity(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipCity(*s)
	}
	return omu
}

// SetShipState sets the "ship_state" field.
func (omu *OrderMainUpdate) SetShipState(s string) *OrderMainUpdate {
	omu.mutation.SetShipState(s)
	return omu
}

// SetNillableShipState sets the "ship_state" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipState(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipState(*s)
	}
	return omu
}

// SetShipZip sets the "ship_zip" field.
func (omu *OrderMainUpdate) SetShipZip(s string) *OrderMainUpdate {
	omu.mutation.SetShipZip(s)
	return omu
}

// SetNillableShipZip sets the "ship_zip" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipZip(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipZip(*s)
	}
	return omu
}

// SetShipCountry sets the "ship_country" field.
func (omu *OrderMainUpdate) SetShipCountry(s string) *OrderMainUpdate {
	omu.mutation.SetShipCountry(s)
	return omu
}

// SetNillableShipCountry sets the "ship_country" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipCountry(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipCountry(*s)
	}
	return omu
}

// SetShipCountryCode sets the "ship_country_code" field.
func (omu *OrderMainUpdate) SetShipCountryCode(s string) *OrderMainUpdate {
	omu.mutation.SetShipCountryCode(s)
	return omu
}

// SetNillableShipCountryCode sets the "ship_country_code" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipCountryCode(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipCountryCode(*s)
	}
	return omu
}

// SetShipPhone sets the "ship_phone" field.
func (omu *OrderMainUpdate) SetShipPhone(s string) *OrderMainUpdate {
	omu.mutation.SetShipPhone(s)
	return omu
}

// SetNillableShipPhone sets the "ship_phone" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipPhone(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipPhone(*s)
	}
	return omu
}

// SetShipFax sets the "ship_fax" field.
func (omu *OrderMainUpdate) SetShipFax(s string) *OrderMainUpdate {
	omu.mutation.SetShipFax(s)
	return omu
}

// SetNillableShipFax sets the "ship_fax" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipFax(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipFax(*s)
	}
	return omu
}

// SetShipRemark sets the "ship_remark" field.
func (omu *OrderMainUpdate) SetShipRemark(s string) *OrderMainUpdate {
	omu.mutation.SetShipRemark(s)
	return omu
}

// SetNillableShipRemark sets the "ship_remark" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipRemark(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipRemark(*s)
	}
	return omu
}

// SetShipHouse sets the "ship_house" field.
func (omu *OrderMainUpdate) SetShipHouse(s string) *OrderMainUpdate {
	omu.mutation.SetShipHouse(s)
	return omu
}

// SetNillableShipHouse sets the "ship_house" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipHouse(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipHouse(*s)
	}
	return omu
}

// SetShipCertificateCode sets the "ship_certificate_code" field.
func (omu *OrderMainUpdate) SetShipCertificateCode(s string) *OrderMainUpdate {
	omu.mutation.SetShipCertificateCode(s)
	return omu
}

// SetNillableShipCertificateCode sets the "ship_certificate_code" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShipCertificateCode(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShipCertificateCode(*s)
	}
	return omu
}

// SetOrderUserEmail sets the "order_user_email" field.
func (omu *OrderMainUpdate) SetOrderUserEmail(s string) *OrderMainUpdate {
	omu.mutation.SetOrderUserEmail(s)
	return omu
}

// SetNillableOrderUserEmail sets the "order_user_email" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderUserEmail(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetOrderUserEmail(*s)
	}
	return omu
}

// SetOrdersUserID sets the "orders_user_id" field.
func (omu *OrderMainUpdate) SetOrdersUserID(s string) *OrderMainUpdate {
	omu.mutation.SetOrdersUserID(s)
	return omu
}

// SetCurrency sets the "currency" field.
func (omu *OrderMainUpdate) SetCurrency(s string) *OrderMainUpdate {
	omu.mutation.SetCurrency(s)
	return omu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableCurrency(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetCurrency(*s)
	}
	return omu
}

// SetCurrenciesID sets the "currencies_id" field.
func (omu *OrderMainUpdate) SetCurrenciesID(i int32) *OrderMainUpdate {
	omu.mutation.ResetCurrenciesID()
	omu.mutation.SetCurrenciesID(i)
	return omu
}

// SetNillableCurrenciesID sets the "currencies_id" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableCurrenciesID(i *int32) *OrderMainUpdate {
	if i != nil {
		omu.SetCurrenciesID(*i)
	}
	return omu
}

// AddCurrenciesID adds i to the "currencies_id" field.
func (omu *OrderMainUpdate) AddCurrenciesID(i int32) *OrderMainUpdate {
	omu.mutation.AddCurrenciesID(i)
	return omu
}

// SetCurrencyRate sets the "currency_rate" field.
func (omu *OrderMainUpdate) SetCurrencyRate(f float64) *OrderMainUpdate {
	omu.mutation.ResetCurrencyRate()
	omu.mutation.SetCurrencyRate(f)
	return omu
}

// SetNillableCurrencyRate sets the "currency_rate" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableCurrencyRate(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetCurrencyRate(*f)
	}
	return omu
}

// AddCurrencyRate adds f to the "currency_rate" field.
func (omu *OrderMainUpdate) AddCurrencyRate(f float64) *OrderMainUpdate {
	omu.mutation.AddCurrencyRate(f)
	return omu
}

// SetShippingMethod sets the "shipping_method" field.
func (omu *OrderMainUpdate) SetShippingMethod(s string) *OrderMainUpdate {
	omu.mutation.SetShippingMethod(s)
	return omu
}

// SetNillableShippingMethod sets the "shipping_method" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShippingMethod(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShippingMethod(*s)
	}
	return omu
}

// SetShippingMethodOrig sets the "shipping_method_orig" field.
func (omu *OrderMainUpdate) SetShippingMethodOrig(s string) *OrderMainUpdate {
	omu.mutation.SetShippingMethodOrig(s)
	return omu
}

// SetNillableShippingMethodOrig sets the "shipping_method_orig" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShippingMethodOrig(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShippingMethodOrig(*s)
	}
	return omu
}

// SetShippingMethodName sets the "shipping_method_name" field.
func (omu *OrderMainUpdate) SetShippingMethodName(s string) *OrderMainUpdate {
	omu.mutation.SetShippingMethodName(s)
	return omu
}

// SetNillableShippingMethodName sets the "shipping_method_name" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShippingMethodName(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShippingMethodName(*s)
	}
	return omu
}

// SetGrandTotal sets the "grand_total" field.
func (omu *OrderMainUpdate) SetGrandTotal(f float64) *OrderMainUpdate {
	omu.mutation.ResetGrandTotal()
	omu.mutation.SetGrandTotal(f)
	return omu
}

// SetNillableGrandTotal sets the "grand_total" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableGrandTotal(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetGrandTotal(*f)
	}
	return omu
}

// AddGrandTotal adds f to the "grand_total" field.
func (omu *OrderMainUpdate) AddGrandTotal(f float64) *OrderMainUpdate {
	omu.mutation.AddGrandTotal(f)
	return omu
}

// SetTrackNumber sets the "track_number" field.
func (omu *OrderMainUpdate) SetTrackNumber(s string) *OrderMainUpdate {
	omu.mutation.SetTrackNumber(s)
	return omu
}

// SetNillableTrackNumber sets the "track_number" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableTrackNumber(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetTrackNumber(*s)
	}
	return omu
}

// SetFollowNumber sets the "follow_number" field.
func (omu *OrderMainUpdate) SetFollowNumber(s string) *OrderMainUpdate {
	omu.mutation.SetFollowNumber(s)
	return omu
}

// SetNillableFollowNumber sets the "follow_number" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableFollowNumber(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetFollowNumber(*s)
	}
	return omu
}

// SetDatePayment sets the "date_payment" field.
func (omu *OrderMainUpdate) SetDatePayment(t time.Time) *OrderMainUpdate {
	omu.mutation.SetDatePayment(t)
	return omu
}

// SetTransactionNumber sets the "transaction_number" field.
func (omu *OrderMainUpdate) SetTransactionNumber(s string) *OrderMainUpdate {
	omu.mutation.SetTransactionNumber(s)
	return omu
}

// SetNillableTransactionNumber sets the "transaction_number" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableTransactionNumber(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetTransactionNumber(*s)
	}
	return omu
}

// SetTransactionFee sets the "transaction_fee" field.
func (omu *OrderMainUpdate) SetTransactionFee(f float64) *OrderMainUpdate {
	omu.mutation.ResetTransactionFee()
	omu.mutation.SetTransactionFee(f)
	return omu
}

// SetNillableTransactionFee sets the "transaction_fee" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableTransactionFee(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetTransactionFee(*f)
	}
	return omu
}

// AddTransactionFee adds f to the "transaction_fee" field.
func (omu *OrderMainUpdate) AddTransactionFee(f float64) *OrderMainUpdate {
	omu.mutation.AddTransactionFee(f)
	return omu
}

// SetUpdateTrackTime sets the "update_track_time" field.
func (omu *OrderMainUpdate) SetUpdateTrackTime(t time.Time) *OrderMainUpdate {
	omu.mutation.SetUpdateTrackTime(t)
	return omu
}

// SetUpdateFollowTime sets the "update_follow_time" field.
func (omu *OrderMainUpdate) SetUpdateFollowTime(t time.Time) *OrderMainUpdate {
	omu.mutation.SetUpdateFollowTime(t)
	return omu
}

// SetShippingCost sets the "shipping_cost" field.
func (omu *OrderMainUpdate) SetShippingCost(f float64) *OrderMainUpdate {
	omu.mutation.ResetShippingCost()
	omu.mutation.SetShippingCost(f)
	return omu
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShippingCost(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetShippingCost(*f)
	}
	return omu
}

// AddShippingCost adds f to the "shipping_cost" field.
func (omu *OrderMainUpdate) AddShippingCost(f float64) *OrderMainUpdate {
	omu.mutation.AddShippingCost(f)
	return omu
}

// SetShippingCostExt sets the "shipping_cost_ext" field.
func (omu *OrderMainUpdate) SetShippingCostExt(f float64) *OrderMainUpdate {
	omu.mutation.ResetShippingCostExt()
	omu.mutation.SetShippingCostExt(f)
	return omu
}

// SetNillableShippingCostExt sets the "shipping_cost_ext" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShippingCostExt(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetShippingCostExt(*f)
	}
	return omu
}

// AddShippingCostExt adds f to the "shipping_cost_ext" field.
func (omu *OrderMainUpdate) AddShippingCostExt(f float64) *OrderMainUpdate {
	omu.mutation.AddShippingCostExt(f)
	return omu
}

// SetTaxesNumber sets the "taxes_number" field.
func (omu *OrderMainUpdate) SetTaxesNumber(s string) *OrderMainUpdate {
	omu.mutation.SetTaxesNumber(s)
	return omu
}

// SetNillableTaxesNumber sets the "taxes_number" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableTaxesNumber(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetTaxesNumber(*s)
	}
	return omu
}

// SetTax sets the "tax" field.
func (omu *OrderMainUpdate) SetTax(f float64) *OrderMainUpdate {
	omu.mutation.ResetTax()
	omu.mutation.SetTax(f)
	return omu
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableTax(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetTax(*f)
	}
	return omu
}

// AddTax adds f to the "tax" field.
func (omu *OrderMainUpdate) AddTax(f float64) *OrderMainUpdate {
	omu.mutation.AddTax(f)
	return omu
}

// SetOrderDiscount sets the "order_discount" field.
func (omu *OrderMainUpdate) SetOrderDiscount(f float64) *OrderMainUpdate {
	omu.mutation.ResetOrderDiscount()
	omu.mutation.SetOrderDiscount(f)
	return omu
}

// SetNillableOrderDiscount sets the "order_discount" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderDiscount(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOrderDiscount(*f)
	}
	return omu
}

// AddOrderDiscount adds f to the "order_discount" field.
func (omu *OrderMainUpdate) AddOrderDiscount(f float64) *OrderMainUpdate {
	omu.mutation.AddOrderDiscount(f)
	return omu
}

// SetInsurance sets the "insurance" field.
func (omu *OrderMainUpdate) SetInsurance(f float64) *OrderMainUpdate {
	omu.mutation.ResetInsurance()
	omu.mutation.SetInsurance(f)
	return omu
}

// SetNillableInsurance sets the "insurance" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableInsurance(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetInsurance(*f)
	}
	return omu
}

// AddInsurance adds f to the "insurance" field.
func (omu *OrderMainUpdate) AddInsurance(f float64) *OrderMainUpdate {
	omu.mutation.AddInsurance(f)
	return omu
}

// SetOrderWeight sets the "order_weight" field.
func (omu *OrderMainUpdate) SetOrderWeight(f float64) *OrderMainUpdate {
	omu.mutation.ResetOrderWeight()
	omu.mutation.SetOrderWeight(f)
	return omu
}

// SetNillableOrderWeight sets the "order_weight" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderWeight(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOrderWeight(*f)
	}
	return omu
}

// AddOrderWeight adds f to the "order_weight" field.
func (omu *OrderMainUpdate) AddOrderWeight(f float64) *OrderMainUpdate {
	omu.mutation.AddOrderWeight(f)
	return omu
}

// SetOrderCretateType sets the "order_cretate_type" field.
func (omu *OrderMainUpdate) SetOrderCretateType(oct ordermain.OrderCretateType) *OrderMainUpdate {
	omu.mutation.SetOrderCretateType(oct)
	return omu
}

// SetNillableOrderCretateType sets the "order_cretate_type" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderCretateType(oct *ordermain.OrderCretateType) *OrderMainUpdate {
	if oct != nil {
		omu.SetOrderCretateType(*oct)
	}
	return omu
}

// SetOrderType sets the "order_type" field.
func (omu *OrderMainUpdate) SetOrderType(i int8) *OrderMainUpdate {
	omu.mutation.ResetOrderType()
	omu.mutation.SetOrderType(i)
	return omu
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderType(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetOrderType(*i)
	}
	return omu
}

// AddOrderType adds i to the "order_type" field.
func (omu *OrderMainUpdate) AddOrderType(i int8) *OrderMainUpdate {
	omu.mutation.AddOrderType(i)
	return omu
}

// SetStoreCreatedAt sets the "store_created_at" field.
func (omu *OrderMainUpdate) SetStoreCreatedAt(t time.Time) *OrderMainUpdate {
	omu.mutation.SetStoreCreatedAt(t)
	return omu
}

// SetSubOrdersCode sets the "sub_orders_code" field.
func (omu *OrderMainUpdate) SetSubOrdersCode(s string) *OrderMainUpdate {
	omu.mutation.SetSubOrdersCode(s)
	return omu
}

// SetNillableSubOrdersCode sets the "sub_orders_code" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableSubOrdersCode(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetSubOrdersCode(*s)
	}
	return omu
}

// SetUpdatedAt sets the "updated_at" field.
func (omu *OrderMainUpdate) SetUpdatedAt(t time.Time) *OrderMainUpdate {
	omu.mutation.SetUpdatedAt(t)
	return omu
}

// SetCreatedAt sets the "created_at" field.
func (omu *OrderMainUpdate) SetCreatedAt(t time.Time) *OrderMainUpdate {
	omu.mutation.SetCreatedAt(t)
	return omu
}

// SetWarehouseID sets the "warehouse_id" field.
func (omu *OrderMainUpdate) SetWarehouseID(s string) *OrderMainUpdate {
	omu.mutation.SetWarehouseID(s)
	return omu
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableWarehouseID(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetWarehouseID(*s)
	}
	return omu
}

// SetOrderListType sets the "order_list_type" field.
func (omu *OrderMainUpdate) SetOrderListType(i int8) *OrderMainUpdate {
	omu.mutation.ResetOrderListType()
	omu.mutation.SetOrderListType(i)
	return omu
}

// SetNillableOrderListType sets the "order_list_type" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderListType(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetOrderListType(*i)
	}
	return omu
}

// AddOrderListType adds i to the "order_list_type" field.
func (omu *OrderMainUpdate) AddOrderListType(i int8) *OrderMainUpdate {
	omu.mutation.AddOrderListType(i)
	return omu
}

// SetOrderBatchNo sets the "order_batch_no" field.
func (omu *OrderMainUpdate) SetOrderBatchNo(s string) *OrderMainUpdate {
	omu.mutation.SetOrderBatchNo(s)
	return omu
}

// SetNillableOrderBatchNo sets the "order_batch_no" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderBatchNo(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetOrderBatchNo(*s)
	}
	return omu
}

// SetShopID sets the "shop_id" field.
func (omu *OrderMainUpdate) SetShopID(i int32) *OrderMainUpdate {
	omu.mutation.ResetShopID()
	omu.mutation.SetShopID(i)
	return omu
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShopID(i *int32) *OrderMainUpdate {
	if i != nil {
		omu.SetShopID(*i)
	}
	return omu
}

// AddShopID adds i to the "shop_id" field.
func (omu *OrderMainUpdate) AddShopID(i int32) *OrderMainUpdate {
	omu.mutation.AddShopID(i)
	return omu
}

// SetSubtotal sets the "subtotal" field.
func (omu *OrderMainUpdate) SetSubtotal(f float64) *OrderMainUpdate {
	omu.mutation.ResetSubtotal()
	omu.mutation.SetSubtotal(f)
	return omu
}

// AddSubtotal adds f to the "subtotal" field.
func (omu *OrderMainUpdate) AddSubtotal(f float64) *OrderMainUpdate {
	omu.mutation.AddSubtotal(f)
	return omu
}

// SetShippingFree sets the "shipping_free" field.
func (omu *OrderMainUpdate) SetShippingFree(f float64) *OrderMainUpdate {
	omu.mutation.ResetShippingFree()
	omu.mutation.SetShippingFree(f)
	return omu
}

// AddShippingFree adds f to the "shipping_free" field.
func (omu *OrderMainUpdate) AddShippingFree(f float64) *OrderMainUpdate {
	omu.mutation.AddShippingFree(f)
	return omu
}

// SetOrderCost sets the "order_cost" field.
func (omu *OrderMainUpdate) SetOrderCost(f float64) *OrderMainUpdate {
	omu.mutation.ResetOrderCost()
	omu.mutation.SetOrderCost(f)
	return omu
}

// SetNillableOrderCost sets the "order_cost" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderCost(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOrderCost(*f)
	}
	return omu
}

// AddOrderCost adds f to the "order_cost" field.
func (omu *OrderMainUpdate) AddOrderCost(f float64) *OrderMainUpdate {
	omu.mutation.AddOrderCost(f)
	return omu
}

// SetOrderProfit sets the "order_profit" field.
func (omu *OrderMainUpdate) SetOrderProfit(f float64) *OrderMainUpdate {
	omu.mutation.ResetOrderProfit()
	omu.mutation.SetOrderProfit(f)
	return omu
}

// SetNillableOrderProfit sets the "order_profit" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderProfit(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOrderProfit(*f)
	}
	return omu
}

// AddOrderProfit adds f to the "order_profit" field.
func (omu *OrderMainUpdate) AddOrderProfit(f float64) *OrderMainUpdate {
	omu.mutation.AddOrderProfit(f)
	return omu
}

// SetShipDate sets the "ship_date" field.
func (omu *OrderMainUpdate) SetShipDate(t time.Time) *OrderMainUpdate {
	omu.mutation.SetShipDate(t)
	return omu
}

// SetCommission sets the "commission" field.
func (omu *OrderMainUpdate) SetCommission(f float64) *OrderMainUpdate {
	omu.mutation.ResetCommission()
	omu.mutation.SetCommission(f)
	return omu
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableCommission(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetCommission(*f)
	}
	return omu
}

// AddCommission adds f to the "commission" field.
func (omu *OrderMainUpdate) AddCommission(f float64) *OrderMainUpdate {
	omu.mutation.AddCommission(f)
	return omu
}

// SetInterceptState sets the "intercept_state" field.
func (omu *OrderMainUpdate) SetInterceptState(i int8) *OrderMainUpdate {
	omu.mutation.ResetInterceptState()
	omu.mutation.SetInterceptState(i)
	return omu
}

// SetNillableInterceptState sets the "intercept_state" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableInterceptState(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetInterceptState(*i)
	}
	return omu
}

// AddInterceptState adds i to the "intercept_state" field.
func (omu *OrderMainUpdate) AddInterceptState(i int8) *OrderMainUpdate {
	omu.mutation.AddInterceptState(i)
	return omu
}

// SetSendOrderTime sets the "send_order_time" field.
func (omu *OrderMainUpdate) SetSendOrderTime(t time.Time) *OrderMainUpdate {
	omu.mutation.SetSendOrderTime(t)
	return omu
}

// SetSendOrderUser sets the "send_order_user" field.
func (omu *OrderMainUpdate) SetSendOrderUser(s string) *OrderMainUpdate {
	omu.mutation.SetSendOrderUser(s)
	return omu
}

// SetProviderType sets the "provider_type" field.
func (omu *OrderMainUpdate) SetProviderType(i int8) *OrderMainUpdate {
	omu.mutation.ResetProviderType()
	omu.mutation.SetProviderType(i)
	return omu
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableProviderType(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetProviderType(*i)
	}
	return omu
}

// AddProviderType adds i to the "provider_type" field.
func (omu *OrderMainUpdate) AddProviderType(i int8) *OrderMainUpdate {
	omu.mutation.AddProviderType(i)
	return omu
}

// SetOrderPackCost sets the "order_pack_cost" field.
func (omu *OrderMainUpdate) SetOrderPackCost(f float64) *OrderMainUpdate {
	omu.mutation.ResetOrderPackCost()
	omu.mutation.SetOrderPackCost(f)
	return omu
}

// SetNillableOrderPackCost sets the "order_pack_cost" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderPackCost(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOrderPackCost(*f)
	}
	return omu
}

// AddOrderPackCost adds f to the "order_pack_cost" field.
func (omu *OrderMainUpdate) AddOrderPackCost(f float64) *OrderMainUpdate {
	omu.mutation.AddOrderPackCost(f)
	return omu
}

// SetPaymentFixCost sets the "payment_fix_cost" field.
func (omu *OrderMainUpdate) SetPaymentFixCost(f float64) *OrderMainUpdate {
	omu.mutation.ResetPaymentFixCost()
	omu.mutation.SetPaymentFixCost(f)
	return omu
}

// SetNillablePaymentFixCost sets the "payment_fix_cost" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillablePaymentFixCost(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetPaymentFixCost(*f)
	}
	return omu
}

// AddPaymentFixCost adds f to the "payment_fix_cost" field.
func (omu *OrderMainUpdate) AddPaymentFixCost(f float64) *OrderMainUpdate {
	omu.mutation.AddPaymentFixCost(f)
	return omu
}

// SetIsFbaBehalf sets the "is_fba_behalf" field.
func (omu *OrderMainUpdate) SetIsFbaBehalf(i int8) *OrderMainUpdate {
	omu.mutation.ResetIsFbaBehalf()
	omu.mutation.SetIsFbaBehalf(i)
	return omu
}

// SetNillableIsFbaBehalf sets the "is_fba_behalf" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableIsFbaBehalf(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetIsFbaBehalf(*i)
	}
	return omu
}

// AddIsFbaBehalf adds i to the "is_fba_behalf" field.
func (omu *OrderMainUpdate) AddIsFbaBehalf(i int8) *OrderMainUpdate {
	omu.mutation.AddIsFbaBehalf(i)
	return omu
}

// SetFulfillType sets the "fulfill_type" field.
func (omu *OrderMainUpdate) SetFulfillType(i int8) *OrderMainUpdate {
	omu.mutation.ResetFulfillType()
	omu.mutation.SetFulfillType(i)
	return omu
}

// SetNillableFulfillType sets the "fulfill_type" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableFulfillType(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetFulfillType(*i)
	}
	return omu
}

// AddFulfillType adds i to the "fulfill_type" field.
func (omu *OrderMainUpdate) AddFulfillType(i int8) *OrderMainUpdate {
	omu.mutation.AddFulfillType(i)
	return omu
}

// SetFulfillException sets the "fulfill_exception" field.
func (omu *OrderMainUpdate) SetFulfillException(i int8) *OrderMainUpdate {
	omu.mutation.ResetFulfillException()
	omu.mutation.SetFulfillException(i)
	return omu
}

// SetNillableFulfillException sets the "fulfill_exception" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableFulfillException(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetFulfillException(*i)
	}
	return omu
}

// AddFulfillException adds i to the "fulfill_exception" field.
func (omu *OrderMainUpdate) AddFulfillException(i int8) *OrderMainUpdate {
	omu.mutation.AddFulfillException(i)
	return omu
}

// SetIossNumber sets the "ioss_number" field.
func (omu *OrderMainUpdate) SetIossNumber(s string) *OrderMainUpdate {
	omu.mutation.SetIossNumber(s)
	return omu
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableIossNumber(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetIossNumber(*s)
	}
	return omu
}

// SetWarehouseShopID sets the "warehouse_shop_id" field.
func (omu *OrderMainUpdate) SetWarehouseShopID(i int32) *OrderMainUpdate {
	omu.mutation.ResetWarehouseShopID()
	omu.mutation.SetWarehouseShopID(i)
	return omu
}

// AddWarehouseShopID adds i to the "warehouse_shop_id" field.
func (omu *OrderMainUpdate) AddWarehouseShopID(i int32) *OrderMainUpdate {
	omu.mutation.AddWarehouseShopID(i)
	return omu
}

// SetSalesRecordNumber sets the "sales_record_number" field.
func (omu *OrderMainUpdate) SetSalesRecordNumber(s string) *OrderMainUpdate {
	omu.mutation.SetSalesRecordNumber(s)
	return omu
}

// SetNillableSalesRecordNumber sets the "sales_record_number" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableSalesRecordNumber(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetSalesRecordNumber(*s)
	}
	return omu
}

// SetTicketCode sets the "ticket_code" field.
func (omu *OrderMainUpdate) SetTicketCode(s string) *OrderMainUpdate {
	omu.mutation.SetTicketCode(s)
	return omu
}

// SetNillableTicketCode sets the "ticket_code" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableTicketCode(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetTicketCode(*s)
	}
	return omu
}

// SetOverseasWarehouseStatus sets the "overseas_warehouse_status" field.
func (omu *OrderMainUpdate) SetOverseasWarehouseStatus(s string) *OrderMainUpdate {
	omu.mutation.SetOverseasWarehouseStatus(s)
	return omu
}

// SetNillableOverseasWarehouseStatus sets the "overseas_warehouse_status" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOverseasWarehouseStatus(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetOverseasWarehouseStatus(*s)
	}
	return omu
}

// SetPayPalID sets the "pay_pal_id" field.
func (omu *OrderMainUpdate) SetPayPalID(s string) *OrderMainUpdate {
	omu.mutation.SetPayPalID(s)
	return omu
}

// SetNillablePayPalID sets the "pay_pal_id" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillablePayPalID(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetPayPalID(*s)
	}
	return omu
}

// SetIsUpdate sets the "is_update" field.
func (omu *OrderMainUpdate) SetIsUpdate(i int8) *OrderMainUpdate {
	omu.mutation.ResetIsUpdate()
	omu.mutation.SetIsUpdate(i)
	return omu
}

// SetNillableIsUpdate sets the "is_update" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableIsUpdate(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetIsUpdate(*i)
	}
	return omu
}

// AddIsUpdate adds i to the "is_update" field.
func (omu *OrderMainUpdate) AddIsUpdate(i int8) *OrderMainUpdate {
	omu.mutation.AddIsUpdate(i)
	return omu
}

// SetOrderSaleState sets the "order_sale_state" field.
func (omu *OrderMainUpdate) SetOrderSaleState(i int8) *OrderMainUpdate {
	omu.mutation.ResetOrderSaleState()
	omu.mutation.SetOrderSaleState(i)
	return omu
}

// SetNillableOrderSaleState sets the "order_sale_state" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderSaleState(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetOrderSaleState(*i)
	}
	return omu
}

// AddOrderSaleState adds i to the "order_sale_state" field.
func (omu *OrderMainUpdate) AddOrderSaleState(i int8) *OrderMainUpdate {
	omu.mutation.AddOrderSaleState(i)
	return omu
}

// SetProductCost sets the "product_cost" field.
func (omu *OrderMainUpdate) SetProductCost(f float64) *OrderMainUpdate {
	omu.mutation.ResetProductCost()
	omu.mutation.SetProductCost(f)
	return omu
}

// SetNillableProductCost sets the "product_cost" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableProductCost(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetProductCost(*f)
	}
	return omu
}

// AddProductCost adds f to the "product_cost" field.
func (omu *OrderMainUpdate) AddProductCost(f float64) *OrderMainUpdate {
	omu.mutation.AddProductCost(f)
	return omu
}

// SetHeadCost sets the "head_cost" field.
func (omu *OrderMainUpdate) SetHeadCost(f float64) *OrderMainUpdate {
	omu.mutation.ResetHeadCost()
	omu.mutation.SetHeadCost(f)
	return omu
}

// SetNillableHeadCost sets the "head_cost" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableHeadCost(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetHeadCost(*f)
	}
	return omu
}

// AddHeadCost adds f to the "head_cost" field.
func (omu *OrderMainUpdate) AddHeadCost(f float64) *OrderMainUpdate {
	omu.mutation.AddHeadCost(f)
	return omu
}

// SetCarrierCode sets the "carrier_code" field.
func (omu *OrderMainUpdate) SetCarrierCode(s string) *OrderMainUpdate {
	omu.mutation.SetCarrierCode(s)
	return omu
}

// SetNillableCarrierCode sets the "carrier_code" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableCarrierCode(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetCarrierCode(*s)
	}
	return omu
}

// SetWithheldTax sets the "withheld_tax" field.
func (omu *OrderMainUpdate) SetWithheldTax(f float64) *OrderMainUpdate {
	omu.mutation.ResetWithheldTax()
	omu.mutation.SetWithheldTax(f)
	return omu
}

// SetNillableWithheldTax sets the "withheld_tax" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableWithheldTax(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetWithheldTax(*f)
	}
	return omu
}

// AddWithheldTax adds f to the "withheld_tax" field.
func (omu *OrderMainUpdate) AddWithheldTax(f float64) *OrderMainUpdate {
	omu.mutation.AddWithheldTax(f)
	return omu
}

// SetOtherFee sets the "other_fee" field.
func (omu *OrderMainUpdate) SetOtherFee(f float64) *OrderMainUpdate {
	omu.mutation.ResetOtherFee()
	omu.mutation.SetOtherFee(f)
	return omu
}

// SetNillableOtherFee sets the "other_fee" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOtherFee(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOtherFee(*f)
	}
	return omu
}

// AddOtherFee adds f to the "other_fee" field.
func (omu *OrderMainUpdate) AddOtherFee(f float64) *OrderMainUpdate {
	omu.mutation.AddOtherFee(f)
	return omu
}

// SetEscrowTax sets the "escrow_tax" field.
func (omu *OrderMainUpdate) SetEscrowTax(f float64) *OrderMainUpdate {
	omu.mutation.ResetEscrowTax()
	omu.mutation.SetEscrowTax(f)
	return omu
}

// SetNillableEscrowTax sets the "escrow_tax" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableEscrowTax(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetEscrowTax(*f)
	}
	return omu
}

// AddEscrowTax adds f to the "escrow_tax" field.
func (omu *OrderMainUpdate) AddEscrowTax(f float64) *OrderMainUpdate {
	omu.mutation.AddEscrowTax(f)
	return omu
}

// SetFinalProductVatTax sets the "final_product_vat_tax" field.
func (omu *OrderMainUpdate) SetFinalProductVatTax(f float64) *OrderMainUpdate {
	omu.mutation.ResetFinalProductVatTax()
	omu.mutation.SetFinalProductVatTax(f)
	return omu
}

// SetNillableFinalProductVatTax sets the "final_product_vat_tax" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableFinalProductVatTax(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetFinalProductVatTax(*f)
	}
	return omu
}

// AddFinalProductVatTax adds f to the "final_product_vat_tax" field.
func (omu *OrderMainUpdate) AddFinalProductVatTax(f float64) *OrderMainUpdate {
	omu.mutation.AddFinalProductVatTax(f)
	return omu
}

// SetFinalShippingVatTax sets the "final_shipping_vat_tax" field.
func (omu *OrderMainUpdate) SetFinalShippingVatTax(f float64) *OrderMainUpdate {
	omu.mutation.ResetFinalShippingVatTax()
	omu.mutation.SetFinalShippingVatTax(f)
	return omu
}

// SetNillableFinalShippingVatTax sets the "final_shipping_vat_tax" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableFinalShippingVatTax(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetFinalShippingVatTax(*f)
	}
	return omu
}

// AddFinalShippingVatTax adds f to the "final_shipping_vat_tax" field.
func (omu *OrderMainUpdate) AddFinalShippingVatTax(f float64) *OrderMainUpdate {
	omu.mutation.AddFinalShippingVatTax(f)
	return omu
}

// SetShippingCharge sets the "shipping_charge" field.
func (omu *OrderMainUpdate) SetShippingCharge(f float64) *OrderMainUpdate {
	omu.mutation.ResetShippingCharge()
	omu.mutation.SetShippingCharge(f)
	return omu
}

// SetNillableShippingCharge sets the "shipping_charge" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShippingCharge(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetShippingCharge(*f)
	}
	return omu
}

// AddShippingCharge adds f to the "shipping_charge" field.
func (omu *OrderMainUpdate) AddShippingCharge(f float64) *OrderMainUpdate {
	omu.mutation.AddShippingCharge(f)
	return omu
}

// SetVoucherPlatform sets the "voucher_platform" field.
func (omu *OrderMainUpdate) SetVoucherPlatform(f float64) *OrderMainUpdate {
	omu.mutation.ResetVoucherPlatform()
	omu.mutation.SetVoucherPlatform(f)
	return omu
}

// SetNillableVoucherPlatform sets the "voucher_platform" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableVoucherPlatform(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetVoucherPlatform(*f)
	}
	return omu
}

// AddVoucherPlatform adds f to the "voucher_platform" field.
func (omu *OrderMainUpdate) AddVoucherPlatform(f float64) *OrderMainUpdate {
	omu.mutation.AddVoucherPlatform(f)
	return omu
}

// SetOverTimeLeft sets the "over_time_left" field.
func (omu *OrderMainUpdate) SetOverTimeLeft(t time.Time) *OrderMainUpdate {
	omu.mutation.SetOverTimeLeft(t)
	return omu
}

// SetNillableOverTimeLeft sets the "over_time_left" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOverTimeLeft(t *time.Time) *OrderMainUpdate {
	if t != nil {
		omu.SetOverTimeLeft(*t)
	}
	return omu
}

// ClearOverTimeLeft clears the value of the "over_time_left" field.
func (omu *OrderMainUpdate) ClearOverTimeLeft() *OrderMainUpdate {
	omu.mutation.ClearOverTimeLeft()
	return omu
}

// SetShippingRebate sets the "shipping_rebate" field.
func (omu *OrderMainUpdate) SetShippingRebate(f float64) *OrderMainUpdate {
	omu.mutation.ResetShippingRebate()
	omu.mutation.SetShippingRebate(f)
	return omu
}

// SetNillableShippingRebate sets the "shipping_rebate" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShippingRebate(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetShippingRebate(*f)
	}
	return omu
}

// AddShippingRebate adds f to the "shipping_rebate" field.
func (omu *OrderMainUpdate) AddShippingRebate(f float64) *OrderMainUpdate {
	omu.mutation.AddShippingRebate(f)
	return omu
}

// SetLabelList sets the "label_list" field.
func (omu *OrderMainUpdate) SetLabelList(s string) *OrderMainUpdate {
	omu.mutation.SetLabelList(s)
	return omu
}

// SetNillableLabelList sets the "label_list" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableLabelList(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetLabelList(*s)
	}
	return omu
}

// SetOutRealGrandTotal sets the "out_real_grand_total" field.
func (omu *OrderMainUpdate) SetOutRealGrandTotal(f float64) *OrderMainUpdate {
	omu.mutation.ResetOutRealGrandTotal()
	omu.mutation.SetOutRealGrandTotal(f)
	return omu
}

// SetNillableOutRealGrandTotal sets the "out_real_grand_total" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOutRealGrandTotal(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOutRealGrandTotal(*f)
	}
	return omu
}

// AddOutRealGrandTotal adds f to the "out_real_grand_total" field.
func (omu *OrderMainUpdate) AddOutRealGrandTotal(f float64) *OrderMainUpdate {
	omu.mutation.AddOutRealGrandTotal(f)
	return omu
}

// SetBillList sets the "bill_list" field.
func (omu *OrderMainUpdate) SetBillList(s string) *OrderMainUpdate {
	omu.mutation.SetBillList(s)
	return omu
}

// SetNillableBillList sets the "bill_list" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableBillList(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetBillList(*s)
	}
	return omu
}

// SetOutGrandTotal sets the "out_grand_total" field.
func (omu *OrderMainUpdate) SetOutGrandTotal(f float64) *OrderMainUpdate {
	omu.mutation.ResetOutGrandTotal()
	omu.mutation.SetOutGrandTotal(f)
	return omu
}

// SetNillableOutGrandTotal sets the "out_grand_total" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOutGrandTotal(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOutGrandTotal(*f)
	}
	return omu
}

// AddOutGrandTotal adds f to the "out_grand_total" field.
func (omu *OrderMainUpdate) AddOutGrandTotal(f float64) *OrderMainUpdate {
	omu.mutation.AddOutGrandTotal(f)
	return omu
}

// SetDeliverShop sets the "deliver_shop" field.
func (omu *OrderMainUpdate) SetDeliverShop(s string) *OrderMainUpdate {
	omu.mutation.SetDeliverShop(s)
	return omu
}

// SetNillableDeliverShop sets the "deliver_shop" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableDeliverShop(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetDeliverShop(*s)
	}
	return omu
}

// SetShippingCostFinal sets the "shipping_cost_final" field.
func (omu *OrderMainUpdate) SetShippingCostFinal(f float64) *OrderMainUpdate {
	omu.mutation.ResetShippingCostFinal()
	omu.mutation.SetShippingCostFinal(f)
	return omu
}

// SetNillableShippingCostFinal sets the "shipping_cost_final" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShippingCostFinal(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetShippingCostFinal(*f)
	}
	return omu
}

// AddShippingCostFinal adds f to the "shipping_cost_final" field.
func (omu *OrderMainUpdate) AddShippingCostFinal(f float64) *OrderMainUpdate {
	omu.mutation.AddShippingCostFinal(f)
	return omu
}

// SetShippingFreeAbout sets the "shipping_free_about" field.
func (omu *OrderMainUpdate) SetShippingFreeAbout(f float64) *OrderMainUpdate {
	omu.mutation.ResetShippingFreeAbout()
	omu.mutation.SetShippingFreeAbout(f)
	return omu
}

// SetNillableShippingFreeAbout sets the "shipping_free_about" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShippingFreeAbout(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetShippingFreeAbout(*f)
	}
	return omu
}

// AddShippingFreeAbout adds f to the "shipping_free_about" field.
func (omu *OrderMainUpdate) AddShippingFreeAbout(f float64) *OrderMainUpdate {
	omu.mutation.AddShippingFreeAbout(f)
	return omu
}

// SetCreateOrderStatus sets the "create_order_status" field.
func (omu *OrderMainUpdate) SetCreateOrderStatus(i int8) *OrderMainUpdate {
	omu.mutation.ResetCreateOrderStatus()
	omu.mutation.SetCreateOrderStatus(i)
	return omu
}

// SetNillableCreateOrderStatus sets the "create_order_status" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableCreateOrderStatus(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetCreateOrderStatus(*i)
	}
	return omu
}

// AddCreateOrderStatus adds i to the "create_order_status" field.
func (omu *OrderMainUpdate) AddCreateOrderStatus(i int8) *OrderMainUpdate {
	omu.mutation.AddCreateOrderStatus(i)
	return omu
}

// SetFinanceTime sets the "finance_time" field.
func (omu *OrderMainUpdate) SetFinanceTime(t time.Time) *OrderMainUpdate {
	omu.mutation.SetFinanceTime(t)
	return omu
}

// SetIsQcc sets the "is_qcc" field.
func (omu *OrderMainUpdate) SetIsQcc(i int8) *OrderMainUpdate {
	omu.mutation.ResetIsQcc()
	omu.mutation.SetIsQcc(i)
	return omu
}

// SetNillableIsQcc sets the "is_qcc" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableIsQcc(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetIsQcc(*i)
	}
	return omu
}

// AddIsQcc adds i to the "is_qcc" field.
func (omu *OrderMainUpdate) AddIsQcc(i int8) *OrderMainUpdate {
	omu.mutation.AddIsQcc(i)
	return omu
}

// SetRejectReason sets the "reject_reason" field.
func (omu *OrderMainUpdate) SetRejectReason(s string) *OrderMainUpdate {
	omu.mutation.SetRejectReason(s)
	return omu
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableRejectReason(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetRejectReason(*s)
	}
	return omu
}

// SetOrderLocalTime sets the "order_local_time" field.
func (omu *OrderMainUpdate) SetOrderLocalTime(t time.Time) *OrderMainUpdate {
	omu.mutation.SetOrderLocalTime(t)
	return omu
}

// SetDiscountCode sets the "discount_code" field.
func (omu *OrderMainUpdate) SetDiscountCode(s string) *OrderMainUpdate {
	omu.mutation.SetDiscountCode(s)
	return omu
}

// SetNillableDiscountCode sets the "discount_code" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableDiscountCode(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetDiscountCode(*s)
	}
	return omu
}

// SetStockoutStatus sets the "stockout_status" field.
func (omu *OrderMainUpdate) SetStockoutStatus(i int8) *OrderMainUpdate {
	omu.mutation.ResetStockoutStatus()
	omu.mutation.SetStockoutStatus(i)
	return omu
}

// SetNillableStockoutStatus sets the "stockout_status" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableStockoutStatus(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetStockoutStatus(*i)
	}
	return omu
}

// AddStockoutStatus adds i to the "stockout_status" field.
func (omu *OrderMainUpdate) AddStockoutStatus(i int8) *OrderMainUpdate {
	omu.mutation.AddStockoutStatus(i)
	return omu
}

// SetOrderLength sets the "order_length" field.
func (omu *OrderMainUpdate) SetOrderLength(f float64) *OrderMainUpdate {
	omu.mutation.ResetOrderLength()
	omu.mutation.SetOrderLength(f)
	return omu
}

// SetNillableOrderLength sets the "order_length" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderLength(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOrderLength(*f)
	}
	return omu
}

// AddOrderLength adds f to the "order_length" field.
func (omu *OrderMainUpdate) AddOrderLength(f float64) *OrderMainUpdate {
	omu.mutation.AddOrderLength(f)
	return omu
}

// SetOrderWidth sets the "order_width" field.
func (omu *OrderMainUpdate) SetOrderWidth(f float64) *OrderMainUpdate {
	omu.mutation.ResetOrderWidth()
	omu.mutation.SetOrderWidth(f)
	return omu
}

// SetNillableOrderWidth sets the "order_width" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderWidth(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOrderWidth(*f)
	}
	return omu
}

// AddOrderWidth adds f to the "order_width" field.
func (omu *OrderMainUpdate) AddOrderWidth(f float64) *OrderMainUpdate {
	omu.mutation.AddOrderWidth(f)
	return omu
}

// SetOrderHeight sets the "order_height" field.
func (omu *OrderMainUpdate) SetOrderHeight(f float64) *OrderMainUpdate {
	omu.mutation.ResetOrderHeight()
	omu.mutation.SetOrderHeight(f)
	return omu
}

// SetNillableOrderHeight sets the "order_height" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderHeight(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOrderHeight(*f)
	}
	return omu
}

// AddOrderHeight adds f to the "order_height" field.
func (omu *OrderMainUpdate) AddOrderHeight(f float64) *OrderMainUpdate {
	omu.mutation.AddOrderHeight(f)
	return omu
}

// SetFirstSide sets the "first_side" field.
func (omu *OrderMainUpdate) SetFirstSide(f float64) *OrderMainUpdate {
	omu.mutation.ResetFirstSide()
	omu.mutation.SetFirstSide(f)
	return omu
}

// SetNillableFirstSide sets the "first_side" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableFirstSide(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetFirstSide(*f)
	}
	return omu
}

// AddFirstSide adds f to the "first_side" field.
func (omu *OrderMainUpdate) AddFirstSide(f float64) *OrderMainUpdate {
	omu.mutation.AddFirstSide(f)
	return omu
}

// SetSecondSide sets the "second_side" field.
func (omu *OrderMainUpdate) SetSecondSide(f float64) *OrderMainUpdate {
	omu.mutation.ResetSecondSide()
	omu.mutation.SetSecondSide(f)
	return omu
}

// SetNillableSecondSide sets the "second_side" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableSecondSide(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetSecondSide(*f)
	}
	return omu
}

// AddSecondSide adds f to the "second_side" field.
func (omu *OrderMainUpdate) AddSecondSide(f float64) *OrderMainUpdate {
	omu.mutation.AddSecondSide(f)
	return omu
}

// SetThirdSide sets the "third_side" field.
func (omu *OrderMainUpdate) SetThirdSide(f float64) *OrderMainUpdate {
	omu.mutation.ResetThirdSide()
	omu.mutation.SetThirdSide(f)
	return omu
}

// SetNillableThirdSide sets the "third_side" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableThirdSide(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetThirdSide(*f)
	}
	return omu
}

// AddThirdSide adds f to the "third_side" field.
func (omu *OrderMainUpdate) AddThirdSide(f float64) *OrderMainUpdate {
	omu.mutation.AddThirdSide(f)
	return omu
}

// SetOrderFeeWeight sets the "order_fee_weight" field.
func (omu *OrderMainUpdate) SetOrderFeeWeight(f float64) *OrderMainUpdate {
	omu.mutation.ResetOrderFeeWeight()
	omu.mutation.SetOrderFeeWeight(f)
	return omu
}

// SetNillableOrderFeeWeight sets the "order_fee_weight" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableOrderFeeWeight(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetOrderFeeWeight(*f)
	}
	return omu
}

// AddOrderFeeWeight adds f to the "order_fee_weight" field.
func (omu *OrderMainUpdate) AddOrderFeeWeight(f float64) *OrderMainUpdate {
	omu.mutation.AddOrderFeeWeight(f)
	return omu
}

// SetShopManager sets the "shop_manager" field.
func (omu *OrderMainUpdate) SetShopManager(s string) *OrderMainUpdate {
	omu.mutation.SetShopManager(s)
	return omu
}

// SetNillableShopManager sets the "shop_manager" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableShopManager(s *string) *OrderMainUpdate {
	if s != nil {
		omu.SetShopManager(*s)
	}
	return omu
}

// SetPushStatus sets the "push_status" field.
func (omu *OrderMainUpdate) SetPushStatus(i int8) *OrderMainUpdate {
	omu.mutation.ResetPushStatus()
	omu.mutation.SetPushStatus(i)
	return omu
}

// SetNillablePushStatus sets the "push_status" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillablePushStatus(i *int8) *OrderMainUpdate {
	if i != nil {
		omu.SetPushStatus(*i)
	}
	return omu
}

// AddPushStatus adds i to the "push_status" field.
func (omu *OrderMainUpdate) AddPushStatus(i int8) *OrderMainUpdate {
	omu.mutation.AddPushStatus(i)
	return omu
}

// SetBuyerPaidShippingFee sets the "buyer_paid_shipping_fee" field.
func (omu *OrderMainUpdate) SetBuyerPaidShippingFee(f float64) *OrderMainUpdate {
	omu.mutation.ResetBuyerPaidShippingFee()
	omu.mutation.SetBuyerPaidShippingFee(f)
	return omu
}

// SetNillableBuyerPaidShippingFee sets the "buyer_paid_shipping_fee" field if the given value is not nil.
func (omu *OrderMainUpdate) SetNillableBuyerPaidShippingFee(f *float64) *OrderMainUpdate {
	if f != nil {
		omu.SetBuyerPaidShippingFee(*f)
	}
	return omu
}

// AddBuyerPaidShippingFee adds f to the "buyer_paid_shipping_fee" field.
func (omu *OrderMainUpdate) AddBuyerPaidShippingFee(f float64) *OrderMainUpdate {
	omu.mutation.AddBuyerPaidShippingFee(f)
	return omu
}

// ClearBuyerPaidShippingFee clears the value of the "buyer_paid_shipping_fee" field.
func (omu *OrderMainUpdate) ClearBuyerPaidShippingFee() *OrderMainUpdate {
	omu.mutation.ClearBuyerPaidShippingFee()
	return omu
}

// Mutation returns the OrderMainMutation object of the builder.
func (omu *OrderMainUpdate) Mutation() *OrderMainMutation {
	return omu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (omu *OrderMainUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(omu.hooks) == 0 {
		if err = omu.check(); err != nil {
			return 0, err
		}
		affected, err = omu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = omu.check(); err != nil {
				return 0, err
			}
			omu.mutation = mutation
			affected, err = omu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(omu.hooks) - 1; i >= 0; i-- {
			if omu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = omu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, omu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (omu *OrderMainUpdate) SaveX(ctx context.Context) int {
	affected, err := omu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (omu *OrderMainUpdate) Exec(ctx context.Context) error {
	_, err := omu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omu *OrderMainUpdate) ExecX(ctx context.Context) {
	if err := omu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omu *OrderMainUpdate) check() error {
	if v, ok := omu.mutation.OrderCretateType(); ok {
		if err := ordermain.OrderCretateTypeValidator(v); err != nil {
			return &ValidationError{Name: "order_cretate_type", err: fmt.Errorf(`ent: validator failed for field "OrderMain.order_cretate_type": %w`, err)}
		}
	}
	return nil
}

func (omu *OrderMainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordermain.Table,
			Columns: ordermain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: ordermain.FieldID,
			},
		},
	}
	if ps := omu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := omu.mutation.OrderCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrderCode,
		})
	}
	if value, ok := omu.mutation.OrderStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderStatus,
		})
	}
	if value, ok := omu.mutation.AddedOrderStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderStatus,
		})
	}
	if value, ok := omu.mutation.ExceptionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldExceptionType,
		})
	}
	if value, ok := omu.mutation.AddedExceptionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldExceptionType,
		})
	}
	if value, ok := omu.mutation.StoreOrderCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldStoreOrderCode,
		})
	}
	if value, ok := omu.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldPlatform,
		})
	}
	if value, ok := omu.mutation.ShopName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShopName,
		})
	}
	if value, ok := omu.mutation.ShipFirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipFirstName,
		})
	}
	if value, ok := omu.mutation.ShipLastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipLastName,
		})
	}
	if value, ok := omu.mutation.ShipCompany(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCompany,
		})
	}
	if value, ok := omu.mutation.ShipStreet1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipStreet1,
		})
	}
	if value, ok := omu.mutation.ShipStreet2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipStreet2,
		})
	}
	if value, ok := omu.mutation.ShipCity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCity,
		})
	}
	if value, ok := omu.mutation.ShipState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipState,
		})
	}
	if value, ok := omu.mutation.ShipZip(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipZip,
		})
	}
	if value, ok := omu.mutation.ShipCountry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCountry,
		})
	}
	if value, ok := omu.mutation.ShipCountryCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCountryCode,
		})
	}
	if value, ok := omu.mutation.ShipPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipPhone,
		})
	}
	if value, ok := omu.mutation.ShipFax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipFax,
		})
	}
	if value, ok := omu.mutation.ShipRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipRemark,
		})
	}
	if value, ok := omu.mutation.ShipHouse(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipHouse,
		})
	}
	if value, ok := omu.mutation.ShipCertificateCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCertificateCode,
		})
	}
	if value, ok := omu.mutation.OrderUserEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrderUserEmail,
		})
	}
	if value, ok := omu.mutation.OrdersUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrdersUserID,
		})
	}
	if value, ok := omu.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldCurrency,
		})
	}
	if value, ok := omu.mutation.CurrenciesID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldCurrenciesID,
		})
	}
	if value, ok := omu.mutation.AddedCurrenciesID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldCurrenciesID,
		})
	}
	if value, ok := omu.mutation.CurrencyRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldCurrencyRate,
		})
	}
	if value, ok := omu.mutation.AddedCurrencyRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldCurrencyRate,
		})
	}
	if value, ok := omu.mutation.ShippingMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShippingMethod,
		})
	}
	if value, ok := omu.mutation.ShippingMethodOrig(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShippingMethodOrig,
		})
	}
	if value, ok := omu.mutation.ShippingMethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShippingMethodName,
		})
	}
	if value, ok := omu.mutation.GrandTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldGrandTotal,
		})
	}
	if value, ok := omu.mutation.AddedGrandTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldGrandTotal,
		})
	}
	if value, ok := omu.mutation.TrackNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTrackNumber,
		})
	}
	if value, ok := omu.mutation.FollowNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldFollowNumber,
		})
	}
	if value, ok := omu.mutation.DatePayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldDatePayment,
		})
	}
	if value, ok := omu.mutation.TransactionNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTransactionNumber,
		})
	}
	if value, ok := omu.mutation.TransactionFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldTransactionFee,
		})
	}
	if value, ok := omu.mutation.AddedTransactionFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldTransactionFee,
		})
	}
	if value, ok := omu.mutation.UpdateTrackTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldUpdateTrackTime,
		})
	}
	if value, ok := omu.mutation.UpdateFollowTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldUpdateFollowTime,
		})
	}
	if value, ok := omu.mutation.ShippingCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCost,
		})
	}
	if value, ok := omu.mutation.AddedShippingCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCost,
		})
	}
	if value, ok := omu.mutation.ShippingCostExt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCostExt,
		})
	}
	if value, ok := omu.mutation.AddedShippingCostExt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCostExt,
		})
	}
	if value, ok := omu.mutation.TaxesNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTaxesNumber,
		})
	}
	if value, ok := omu.mutation.Tax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldTax,
		})
	}
	if value, ok := omu.mutation.AddedTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldTax,
		})
	}
	if value, ok := omu.mutation.OrderDiscount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderDiscount,
		})
	}
	if value, ok := omu.mutation.AddedOrderDiscount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderDiscount,
		})
	}
	if value, ok := omu.mutation.Insurance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldInsurance,
		})
	}
	if value, ok := omu.mutation.AddedInsurance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldInsurance,
		})
	}
	if value, ok := omu.mutation.OrderWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderWeight,
		})
	}
	if value, ok := omu.mutation.AddedOrderWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderWeight,
		})
	}
	if value, ok := omu.mutation.OrderCretateType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ordermain.FieldOrderCretateType,
		})
	}
	if value, ok := omu.mutation.OrderType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderType,
		})
	}
	if value, ok := omu.mutation.AddedOrderType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderType,
		})
	}
	if value, ok := omu.mutation.StoreCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldStoreCreatedAt,
		})
	}
	if value, ok := omu.mutation.SubOrdersCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldSubOrdersCode,
		})
	}
	if value, ok := omu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldUpdatedAt,
		})
	}
	if value, ok := omu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldCreatedAt,
		})
	}
	if value, ok := omu.mutation.WarehouseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldWarehouseID,
		})
	}
	if value, ok := omu.mutation.OrderListType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderListType,
		})
	}
	if value, ok := omu.mutation.AddedOrderListType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderListType,
		})
	}
	if value, ok := omu.mutation.OrderBatchNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrderBatchNo,
		})
	}
	if value, ok := omu.mutation.ShopID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldShopID,
		})
	}
	if value, ok := omu.mutation.AddedShopID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldShopID,
		})
	}
	if value, ok := omu.mutation.Subtotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldSubtotal,
		})
	}
	if value, ok := omu.mutation.AddedSubtotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldSubtotal,
		})
	}
	if value, ok := omu.mutation.ShippingFree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingFree,
		})
	}
	if value, ok := omu.mutation.AddedShippingFree(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingFree,
		})
	}
	if value, ok := omu.mutation.OrderCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderCost,
		})
	}
	if value, ok := omu.mutation.AddedOrderCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderCost,
		})
	}
	if value, ok := omu.mutation.OrderProfit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderProfit,
		})
	}
	if value, ok := omu.mutation.AddedOrderProfit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderProfit,
		})
	}
	if value, ok := omu.mutation.ShipDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldShipDate,
		})
	}
	if value, ok := omu.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldCommission,
		})
	}
	if value, ok := omu.mutation.AddedCommission(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldCommission,
		})
	}
	if value, ok := omu.mutation.InterceptState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldInterceptState,
		})
	}
	if value, ok := omu.mutation.AddedInterceptState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldInterceptState,
		})
	}
	if value, ok := omu.mutation.SendOrderTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldSendOrderTime,
		})
	}
	if value, ok := omu.mutation.SendOrderUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldSendOrderUser,
		})
	}
	if value, ok := omu.mutation.ProviderType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldProviderType,
		})
	}
	if value, ok := omu.mutation.AddedProviderType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldProviderType,
		})
	}
	if value, ok := omu.mutation.OrderPackCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderPackCost,
		})
	}
	if value, ok := omu.mutation.AddedOrderPackCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderPackCost,
		})
	}
	if value, ok := omu.mutation.PaymentFixCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldPaymentFixCost,
		})
	}
	if value, ok := omu.mutation.AddedPaymentFixCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldPaymentFixCost,
		})
	}
	if value, ok := omu.mutation.IsFbaBehalf(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsFbaBehalf,
		})
	}
	if value, ok := omu.mutation.AddedIsFbaBehalf(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsFbaBehalf,
		})
	}
	if value, ok := omu.mutation.FulfillType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldFulfillType,
		})
	}
	if value, ok := omu.mutation.AddedFulfillType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldFulfillType,
		})
	}
	if value, ok := omu.mutation.FulfillException(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldFulfillException,
		})
	}
	if value, ok := omu.mutation.AddedFulfillException(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldFulfillException,
		})
	}
	if value, ok := omu.mutation.IossNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldIossNumber,
		})
	}
	if value, ok := omu.mutation.WarehouseShopID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldWarehouseShopID,
		})
	}
	if value, ok := omu.mutation.AddedWarehouseShopID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldWarehouseShopID,
		})
	}
	if value, ok := omu.mutation.SalesRecordNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldSalesRecordNumber,
		})
	}
	if value, ok := omu.mutation.TicketCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTicketCode,
		})
	}
	if value, ok := omu.mutation.OverseasWarehouseStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOverseasWarehouseStatus,
		})
	}
	if value, ok := omu.mutation.PayPalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldPayPalID,
		})
	}
	if value, ok := omu.mutation.IsUpdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsUpdate,
		})
	}
	if value, ok := omu.mutation.AddedIsUpdate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsUpdate,
		})
	}
	if value, ok := omu.mutation.OrderSaleState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderSaleState,
		})
	}
	if value, ok := omu.mutation.AddedOrderSaleState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderSaleState,
		})
	}
	if value, ok := omu.mutation.ProductCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldProductCost,
		})
	}
	if value, ok := omu.mutation.AddedProductCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldProductCost,
		})
	}
	if value, ok := omu.mutation.HeadCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldHeadCost,
		})
	}
	if value, ok := omu.mutation.AddedHeadCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldHeadCost,
		})
	}
	if value, ok := omu.mutation.CarrierCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldCarrierCode,
		})
	}
	if value, ok := omu.mutation.WithheldTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldWithheldTax,
		})
	}
	if value, ok := omu.mutation.AddedWithheldTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldWithheldTax,
		})
	}
	if value, ok := omu.mutation.OtherFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOtherFee,
		})
	}
	if value, ok := omu.mutation.AddedOtherFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOtherFee,
		})
	}
	if value, ok := omu.mutation.EscrowTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldEscrowTax,
		})
	}
	if value, ok := omu.mutation.AddedEscrowTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldEscrowTax,
		})
	}
	if value, ok := omu.mutation.FinalProductVatTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFinalProductVatTax,
		})
	}
	if value, ok := omu.mutation.AddedFinalProductVatTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFinalProductVatTax,
		})
	}
	if value, ok := omu.mutation.FinalShippingVatTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFinalShippingVatTax,
		})
	}
	if value, ok := omu.mutation.AddedFinalShippingVatTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFinalShippingVatTax,
		})
	}
	if value, ok := omu.mutation.ShippingCharge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCharge,
		})
	}
	if value, ok := omu.mutation.AddedShippingCharge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCharge,
		})
	}
	if value, ok := omu.mutation.VoucherPlatform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldVoucherPlatform,
		})
	}
	if value, ok := omu.mutation.AddedVoucherPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldVoucherPlatform,
		})
	}
	if value, ok := omu.mutation.OverTimeLeft(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldOverTimeLeft,
		})
	}
	if omu.mutation.OverTimeLeftCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: ordermain.FieldOverTimeLeft,
		})
	}
	if value, ok := omu.mutation.ShippingRebate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingRebate,
		})
	}
	if value, ok := omu.mutation.AddedShippingRebate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingRebate,
		})
	}
	if value, ok := omu.mutation.LabelList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldLabelList,
		})
	}
	if value, ok := omu.mutation.OutRealGrandTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOutRealGrandTotal,
		})
	}
	if value, ok := omu.mutation.AddedOutRealGrandTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOutRealGrandTotal,
		})
	}
	if value, ok := omu.mutation.BillList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldBillList,
		})
	}
	if value, ok := omu.mutation.OutGrandTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOutGrandTotal,
		})
	}
	if value, ok := omu.mutation.AddedOutGrandTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOutGrandTotal,
		})
	}
	if value, ok := omu.mutation.DeliverShop(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldDeliverShop,
		})
	}
	if value, ok := omu.mutation.ShippingCostFinal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCostFinal,
		})
	}
	if value, ok := omu.mutation.AddedShippingCostFinal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCostFinal,
		})
	}
	if value, ok := omu.mutation.ShippingFreeAbout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingFreeAbout,
		})
	}
	if value, ok := omu.mutation.AddedShippingFreeAbout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingFreeAbout,
		})
	}
	if value, ok := omu.mutation.CreateOrderStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldCreateOrderStatus,
		})
	}
	if value, ok := omu.mutation.AddedCreateOrderStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldCreateOrderStatus,
		})
	}
	if value, ok := omu.mutation.FinanceTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldFinanceTime,
		})
	}
	if value, ok := omu.mutation.IsQcc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsQcc,
		})
	}
	if value, ok := omu.mutation.AddedIsQcc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsQcc,
		})
	}
	if value, ok := omu.mutation.RejectReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldRejectReason,
		})
	}
	if value, ok := omu.mutation.OrderLocalTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldOrderLocalTime,
		})
	}
	if value, ok := omu.mutation.DiscountCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldDiscountCode,
		})
	}
	if value, ok := omu.mutation.StockoutStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldStockoutStatus,
		})
	}
	if value, ok := omu.mutation.AddedStockoutStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldStockoutStatus,
		})
	}
	if value, ok := omu.mutation.OrderLength(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderLength,
		})
	}
	if value, ok := omu.mutation.AddedOrderLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderLength,
		})
	}
	if value, ok := omu.mutation.OrderWidth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderWidth,
		})
	}
	if value, ok := omu.mutation.AddedOrderWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderWidth,
		})
	}
	if value, ok := omu.mutation.OrderHeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderHeight,
		})
	}
	if value, ok := omu.mutation.AddedOrderHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderHeight,
		})
	}
	if value, ok := omu.mutation.FirstSide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFirstSide,
		})
	}
	if value, ok := omu.mutation.AddedFirstSide(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFirstSide,
		})
	}
	if value, ok := omu.mutation.SecondSide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldSecondSide,
		})
	}
	if value, ok := omu.mutation.AddedSecondSide(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldSecondSide,
		})
	}
	if value, ok := omu.mutation.ThirdSide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldThirdSide,
		})
	}
	if value, ok := omu.mutation.AddedThirdSide(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldThirdSide,
		})
	}
	if value, ok := omu.mutation.OrderFeeWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderFeeWeight,
		})
	}
	if value, ok := omu.mutation.AddedOrderFeeWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderFeeWeight,
		})
	}
	if value, ok := omu.mutation.ShopManager(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShopManager,
		})
	}
	if value, ok := omu.mutation.PushStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldPushStatus,
		})
	}
	if value, ok := omu.mutation.AddedPushStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldPushStatus,
		})
	}
	if value, ok := omu.mutation.BuyerPaidShippingFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldBuyerPaidShippingFee,
		})
	}
	if value, ok := omu.mutation.AddedBuyerPaidShippingFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldBuyerPaidShippingFee,
		})
	}
	if omu.mutation.BuyerPaidShippingFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: ordermain.FieldBuyerPaidShippingFee,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, omu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordermain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderMainUpdateOne is the builder for updating a single OrderMain entity.
type OrderMainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMainMutation
}

// SetOrderCode sets the "order_code" field.
func (omuo *OrderMainUpdateOne) SetOrderCode(s string) *OrderMainUpdateOne {
	omuo.mutation.SetOrderCode(s)
	return omuo
}

// SetNillableOrderCode sets the "order_code" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderCode(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetOrderCode(*s)
	}
	return omuo
}

// SetOrderStatus sets the "order_status" field.
func (omuo *OrderMainUpdateOne) SetOrderStatus(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderStatus()
	omuo.mutation.SetOrderStatus(i)
	return omuo
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderStatus(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetOrderStatus(*i)
	}
	return omuo
}

// AddOrderStatus adds i to the "order_status" field.
func (omuo *OrderMainUpdateOne) AddOrderStatus(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddOrderStatus(i)
	return omuo
}

// SetExceptionType sets the "exception_type" field.
func (omuo *OrderMainUpdateOne) SetExceptionType(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetExceptionType()
	omuo.mutation.SetExceptionType(i)
	return omuo
}

// AddExceptionType adds i to the "exception_type" field.
func (omuo *OrderMainUpdateOne) AddExceptionType(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddExceptionType(i)
	return omuo
}

// SetStoreOrderCode sets the "store_order_code" field.
func (omuo *OrderMainUpdateOne) SetStoreOrderCode(s string) *OrderMainUpdateOne {
	omuo.mutation.SetStoreOrderCode(s)
	return omuo
}

// SetNillableStoreOrderCode sets the "store_order_code" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableStoreOrderCode(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetStoreOrderCode(*s)
	}
	return omuo
}

// SetPlatform sets the "platform" field.
func (omuo *OrderMainUpdateOne) SetPlatform(s string) *OrderMainUpdateOne {
	omuo.mutation.SetPlatform(s)
	return omuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillablePlatform(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetPlatform(*s)
	}
	return omuo
}

// SetShopName sets the "shop_name" field.
func (omuo *OrderMainUpdateOne) SetShopName(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShopName(s)
	return omuo
}

// SetNillableShopName sets the "shop_name" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShopName(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShopName(*s)
	}
	return omuo
}

// SetShipFirstName sets the "ship_first_name" field.
func (omuo *OrderMainUpdateOne) SetShipFirstName(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipFirstName(s)
	return omuo
}

// SetNillableShipFirstName sets the "ship_first_name" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipFirstName(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipFirstName(*s)
	}
	return omuo
}

// SetShipLastName sets the "ship_last_name" field.
func (omuo *OrderMainUpdateOne) SetShipLastName(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipLastName(s)
	return omuo
}

// SetNillableShipLastName sets the "ship_last_name" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipLastName(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipLastName(*s)
	}
	return omuo
}

// SetShipCompany sets the "ship_company" field.
func (omuo *OrderMainUpdateOne) SetShipCompany(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipCompany(s)
	return omuo
}

// SetNillableShipCompany sets the "ship_company" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipCompany(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipCompany(*s)
	}
	return omuo
}

// SetShipStreet1 sets the "ship_street1" field.
func (omuo *OrderMainUpdateOne) SetShipStreet1(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipStreet1(s)
	return omuo
}

// SetNillableShipStreet1 sets the "ship_street1" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipStreet1(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipStreet1(*s)
	}
	return omuo
}

// SetShipStreet2 sets the "ship_street2" field.
func (omuo *OrderMainUpdateOne) SetShipStreet2(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipStreet2(s)
	return omuo
}

// SetNillableShipStreet2 sets the "ship_street2" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipStreet2(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipStreet2(*s)
	}
	return omuo
}

// SetShipCity sets the "ship_city" field.
func (omuo *OrderMainUpdateOne) SetShipCity(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipCity(s)
	return omuo
}

// SetNillableShipCity sets the "ship_city" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipCity(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipCity(*s)
	}
	return omuo
}

// SetShipState sets the "ship_state" field.
func (omuo *OrderMainUpdateOne) SetShipState(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipState(s)
	return omuo
}

// SetNillableShipState sets the "ship_state" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipState(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipState(*s)
	}
	return omuo
}

// SetShipZip sets the "ship_zip" field.
func (omuo *OrderMainUpdateOne) SetShipZip(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipZip(s)
	return omuo
}

// SetNillableShipZip sets the "ship_zip" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipZip(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipZip(*s)
	}
	return omuo
}

// SetShipCountry sets the "ship_country" field.
func (omuo *OrderMainUpdateOne) SetShipCountry(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipCountry(s)
	return omuo
}

// SetNillableShipCountry sets the "ship_country" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipCountry(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipCountry(*s)
	}
	return omuo
}

// SetShipCountryCode sets the "ship_country_code" field.
func (omuo *OrderMainUpdateOne) SetShipCountryCode(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipCountryCode(s)
	return omuo
}

// SetNillableShipCountryCode sets the "ship_country_code" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipCountryCode(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipCountryCode(*s)
	}
	return omuo
}

// SetShipPhone sets the "ship_phone" field.
func (omuo *OrderMainUpdateOne) SetShipPhone(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipPhone(s)
	return omuo
}

// SetNillableShipPhone sets the "ship_phone" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipPhone(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipPhone(*s)
	}
	return omuo
}

// SetShipFax sets the "ship_fax" field.
func (omuo *OrderMainUpdateOne) SetShipFax(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipFax(s)
	return omuo
}

// SetNillableShipFax sets the "ship_fax" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipFax(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipFax(*s)
	}
	return omuo
}

// SetShipRemark sets the "ship_remark" field.
func (omuo *OrderMainUpdateOne) SetShipRemark(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipRemark(s)
	return omuo
}

// SetNillableShipRemark sets the "ship_remark" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipRemark(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipRemark(*s)
	}
	return omuo
}

// SetShipHouse sets the "ship_house" field.
func (omuo *OrderMainUpdateOne) SetShipHouse(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipHouse(s)
	return omuo
}

// SetNillableShipHouse sets the "ship_house" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipHouse(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipHouse(*s)
	}
	return omuo
}

// SetShipCertificateCode sets the "ship_certificate_code" field.
func (omuo *OrderMainUpdateOne) SetShipCertificateCode(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShipCertificateCode(s)
	return omuo
}

// SetNillableShipCertificateCode sets the "ship_certificate_code" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShipCertificateCode(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShipCertificateCode(*s)
	}
	return omuo
}

// SetOrderUserEmail sets the "order_user_email" field.
func (omuo *OrderMainUpdateOne) SetOrderUserEmail(s string) *OrderMainUpdateOne {
	omuo.mutation.SetOrderUserEmail(s)
	return omuo
}

// SetNillableOrderUserEmail sets the "order_user_email" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderUserEmail(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetOrderUserEmail(*s)
	}
	return omuo
}

// SetOrdersUserID sets the "orders_user_id" field.
func (omuo *OrderMainUpdateOne) SetOrdersUserID(s string) *OrderMainUpdateOne {
	omuo.mutation.SetOrdersUserID(s)
	return omuo
}

// SetCurrency sets the "currency" field.
func (omuo *OrderMainUpdateOne) SetCurrency(s string) *OrderMainUpdateOne {
	omuo.mutation.SetCurrency(s)
	return omuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableCurrency(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetCurrency(*s)
	}
	return omuo
}

// SetCurrenciesID sets the "currencies_id" field.
func (omuo *OrderMainUpdateOne) SetCurrenciesID(i int32) *OrderMainUpdateOne {
	omuo.mutation.ResetCurrenciesID()
	omuo.mutation.SetCurrenciesID(i)
	return omuo
}

// SetNillableCurrenciesID sets the "currencies_id" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableCurrenciesID(i *int32) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetCurrenciesID(*i)
	}
	return omuo
}

// AddCurrenciesID adds i to the "currencies_id" field.
func (omuo *OrderMainUpdateOne) AddCurrenciesID(i int32) *OrderMainUpdateOne {
	omuo.mutation.AddCurrenciesID(i)
	return omuo
}

// SetCurrencyRate sets the "currency_rate" field.
func (omuo *OrderMainUpdateOne) SetCurrencyRate(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetCurrencyRate()
	omuo.mutation.SetCurrencyRate(f)
	return omuo
}

// SetNillableCurrencyRate sets the "currency_rate" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableCurrencyRate(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetCurrencyRate(*f)
	}
	return omuo
}

// AddCurrencyRate adds f to the "currency_rate" field.
func (omuo *OrderMainUpdateOne) AddCurrencyRate(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddCurrencyRate(f)
	return omuo
}

// SetShippingMethod sets the "shipping_method" field.
func (omuo *OrderMainUpdateOne) SetShippingMethod(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShippingMethod(s)
	return omuo
}

// SetNillableShippingMethod sets the "shipping_method" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShippingMethod(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShippingMethod(*s)
	}
	return omuo
}

// SetShippingMethodOrig sets the "shipping_method_orig" field.
func (omuo *OrderMainUpdateOne) SetShippingMethodOrig(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShippingMethodOrig(s)
	return omuo
}

// SetNillableShippingMethodOrig sets the "shipping_method_orig" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShippingMethodOrig(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShippingMethodOrig(*s)
	}
	return omuo
}

// SetShippingMethodName sets the "shipping_method_name" field.
func (omuo *OrderMainUpdateOne) SetShippingMethodName(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShippingMethodName(s)
	return omuo
}

// SetNillableShippingMethodName sets the "shipping_method_name" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShippingMethodName(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShippingMethodName(*s)
	}
	return omuo
}

// SetGrandTotal sets the "grand_total" field.
func (omuo *OrderMainUpdateOne) SetGrandTotal(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetGrandTotal()
	omuo.mutation.SetGrandTotal(f)
	return omuo
}

// SetNillableGrandTotal sets the "grand_total" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableGrandTotal(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetGrandTotal(*f)
	}
	return omuo
}

// AddGrandTotal adds f to the "grand_total" field.
func (omuo *OrderMainUpdateOne) AddGrandTotal(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddGrandTotal(f)
	return omuo
}

// SetTrackNumber sets the "track_number" field.
func (omuo *OrderMainUpdateOne) SetTrackNumber(s string) *OrderMainUpdateOne {
	omuo.mutation.SetTrackNumber(s)
	return omuo
}

// SetNillableTrackNumber sets the "track_number" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableTrackNumber(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetTrackNumber(*s)
	}
	return omuo
}

// SetFollowNumber sets the "follow_number" field.
func (omuo *OrderMainUpdateOne) SetFollowNumber(s string) *OrderMainUpdateOne {
	omuo.mutation.SetFollowNumber(s)
	return omuo
}

// SetNillableFollowNumber sets the "follow_number" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableFollowNumber(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetFollowNumber(*s)
	}
	return omuo
}

// SetDatePayment sets the "date_payment" field.
func (omuo *OrderMainUpdateOne) SetDatePayment(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetDatePayment(t)
	return omuo
}

// SetTransactionNumber sets the "transaction_number" field.
func (omuo *OrderMainUpdateOne) SetTransactionNumber(s string) *OrderMainUpdateOne {
	omuo.mutation.SetTransactionNumber(s)
	return omuo
}

// SetNillableTransactionNumber sets the "transaction_number" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableTransactionNumber(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetTransactionNumber(*s)
	}
	return omuo
}

// SetTransactionFee sets the "transaction_fee" field.
func (omuo *OrderMainUpdateOne) SetTransactionFee(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetTransactionFee()
	omuo.mutation.SetTransactionFee(f)
	return omuo
}

// SetNillableTransactionFee sets the "transaction_fee" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableTransactionFee(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetTransactionFee(*f)
	}
	return omuo
}

// AddTransactionFee adds f to the "transaction_fee" field.
func (omuo *OrderMainUpdateOne) AddTransactionFee(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddTransactionFee(f)
	return omuo
}

// SetUpdateTrackTime sets the "update_track_time" field.
func (omuo *OrderMainUpdateOne) SetUpdateTrackTime(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetUpdateTrackTime(t)
	return omuo
}

// SetUpdateFollowTime sets the "update_follow_time" field.
func (omuo *OrderMainUpdateOne) SetUpdateFollowTime(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetUpdateFollowTime(t)
	return omuo
}

// SetShippingCost sets the "shipping_cost" field.
func (omuo *OrderMainUpdateOne) SetShippingCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetShippingCost()
	omuo.mutation.SetShippingCost(f)
	return omuo
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShippingCost(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetShippingCost(*f)
	}
	return omuo
}

// AddShippingCost adds f to the "shipping_cost" field.
func (omuo *OrderMainUpdateOne) AddShippingCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddShippingCost(f)
	return omuo
}

// SetShippingCostExt sets the "shipping_cost_ext" field.
func (omuo *OrderMainUpdateOne) SetShippingCostExt(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetShippingCostExt()
	omuo.mutation.SetShippingCostExt(f)
	return omuo
}

// SetNillableShippingCostExt sets the "shipping_cost_ext" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShippingCostExt(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetShippingCostExt(*f)
	}
	return omuo
}

// AddShippingCostExt adds f to the "shipping_cost_ext" field.
func (omuo *OrderMainUpdateOne) AddShippingCostExt(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddShippingCostExt(f)
	return omuo
}

// SetTaxesNumber sets the "taxes_number" field.
func (omuo *OrderMainUpdateOne) SetTaxesNumber(s string) *OrderMainUpdateOne {
	omuo.mutation.SetTaxesNumber(s)
	return omuo
}

// SetNillableTaxesNumber sets the "taxes_number" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableTaxesNumber(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetTaxesNumber(*s)
	}
	return omuo
}

// SetTax sets the "tax" field.
func (omuo *OrderMainUpdateOne) SetTax(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetTax()
	omuo.mutation.SetTax(f)
	return omuo
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableTax(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetTax(*f)
	}
	return omuo
}

// AddTax adds f to the "tax" field.
func (omuo *OrderMainUpdateOne) AddTax(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddTax(f)
	return omuo
}

// SetOrderDiscount sets the "order_discount" field.
func (omuo *OrderMainUpdateOne) SetOrderDiscount(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderDiscount()
	omuo.mutation.SetOrderDiscount(f)
	return omuo
}

// SetNillableOrderDiscount sets the "order_discount" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderDiscount(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOrderDiscount(*f)
	}
	return omuo
}

// AddOrderDiscount adds f to the "order_discount" field.
func (omuo *OrderMainUpdateOne) AddOrderDiscount(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOrderDiscount(f)
	return omuo
}

// SetInsurance sets the "insurance" field.
func (omuo *OrderMainUpdateOne) SetInsurance(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetInsurance()
	omuo.mutation.SetInsurance(f)
	return omuo
}

// SetNillableInsurance sets the "insurance" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableInsurance(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetInsurance(*f)
	}
	return omuo
}

// AddInsurance adds f to the "insurance" field.
func (omuo *OrderMainUpdateOne) AddInsurance(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddInsurance(f)
	return omuo
}

// SetOrderWeight sets the "order_weight" field.
func (omuo *OrderMainUpdateOne) SetOrderWeight(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderWeight()
	omuo.mutation.SetOrderWeight(f)
	return omuo
}

// SetNillableOrderWeight sets the "order_weight" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderWeight(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOrderWeight(*f)
	}
	return omuo
}

// AddOrderWeight adds f to the "order_weight" field.
func (omuo *OrderMainUpdateOne) AddOrderWeight(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOrderWeight(f)
	return omuo
}

// SetOrderCretateType sets the "order_cretate_type" field.
func (omuo *OrderMainUpdateOne) SetOrderCretateType(oct ordermain.OrderCretateType) *OrderMainUpdateOne {
	omuo.mutation.SetOrderCretateType(oct)
	return omuo
}

// SetNillableOrderCretateType sets the "order_cretate_type" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderCretateType(oct *ordermain.OrderCretateType) *OrderMainUpdateOne {
	if oct != nil {
		omuo.SetOrderCretateType(*oct)
	}
	return omuo
}

// SetOrderType sets the "order_type" field.
func (omuo *OrderMainUpdateOne) SetOrderType(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderType()
	omuo.mutation.SetOrderType(i)
	return omuo
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderType(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetOrderType(*i)
	}
	return omuo
}

// AddOrderType adds i to the "order_type" field.
func (omuo *OrderMainUpdateOne) AddOrderType(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddOrderType(i)
	return omuo
}

// SetStoreCreatedAt sets the "store_created_at" field.
func (omuo *OrderMainUpdateOne) SetStoreCreatedAt(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetStoreCreatedAt(t)
	return omuo
}

// SetSubOrdersCode sets the "sub_orders_code" field.
func (omuo *OrderMainUpdateOne) SetSubOrdersCode(s string) *OrderMainUpdateOne {
	omuo.mutation.SetSubOrdersCode(s)
	return omuo
}

// SetNillableSubOrdersCode sets the "sub_orders_code" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableSubOrdersCode(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetSubOrdersCode(*s)
	}
	return omuo
}

// SetUpdatedAt sets the "updated_at" field.
func (omuo *OrderMainUpdateOne) SetUpdatedAt(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetUpdatedAt(t)
	return omuo
}

// SetCreatedAt sets the "created_at" field.
func (omuo *OrderMainUpdateOne) SetCreatedAt(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetCreatedAt(t)
	return omuo
}

// SetWarehouseID sets the "warehouse_id" field.
func (omuo *OrderMainUpdateOne) SetWarehouseID(s string) *OrderMainUpdateOne {
	omuo.mutation.SetWarehouseID(s)
	return omuo
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableWarehouseID(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetWarehouseID(*s)
	}
	return omuo
}

// SetOrderListType sets the "order_list_type" field.
func (omuo *OrderMainUpdateOne) SetOrderListType(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderListType()
	omuo.mutation.SetOrderListType(i)
	return omuo
}

// SetNillableOrderListType sets the "order_list_type" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderListType(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetOrderListType(*i)
	}
	return omuo
}

// AddOrderListType adds i to the "order_list_type" field.
func (omuo *OrderMainUpdateOne) AddOrderListType(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddOrderListType(i)
	return omuo
}

// SetOrderBatchNo sets the "order_batch_no" field.
func (omuo *OrderMainUpdateOne) SetOrderBatchNo(s string) *OrderMainUpdateOne {
	omuo.mutation.SetOrderBatchNo(s)
	return omuo
}

// SetNillableOrderBatchNo sets the "order_batch_no" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderBatchNo(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetOrderBatchNo(*s)
	}
	return omuo
}

// SetShopID sets the "shop_id" field.
func (omuo *OrderMainUpdateOne) SetShopID(i int32) *OrderMainUpdateOne {
	omuo.mutation.ResetShopID()
	omuo.mutation.SetShopID(i)
	return omuo
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShopID(i *int32) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetShopID(*i)
	}
	return omuo
}

// AddShopID adds i to the "shop_id" field.
func (omuo *OrderMainUpdateOne) AddShopID(i int32) *OrderMainUpdateOne {
	omuo.mutation.AddShopID(i)
	return omuo
}

// SetSubtotal sets the "subtotal" field.
func (omuo *OrderMainUpdateOne) SetSubtotal(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetSubtotal()
	omuo.mutation.SetSubtotal(f)
	return omuo
}

// AddSubtotal adds f to the "subtotal" field.
func (omuo *OrderMainUpdateOne) AddSubtotal(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddSubtotal(f)
	return omuo
}

// SetShippingFree sets the "shipping_free" field.
func (omuo *OrderMainUpdateOne) SetShippingFree(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetShippingFree()
	omuo.mutation.SetShippingFree(f)
	return omuo
}

// AddShippingFree adds f to the "shipping_free" field.
func (omuo *OrderMainUpdateOne) AddShippingFree(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddShippingFree(f)
	return omuo
}

// SetOrderCost sets the "order_cost" field.
func (omuo *OrderMainUpdateOne) SetOrderCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderCost()
	omuo.mutation.SetOrderCost(f)
	return omuo
}

// SetNillableOrderCost sets the "order_cost" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderCost(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOrderCost(*f)
	}
	return omuo
}

// AddOrderCost adds f to the "order_cost" field.
func (omuo *OrderMainUpdateOne) AddOrderCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOrderCost(f)
	return omuo
}

// SetOrderProfit sets the "order_profit" field.
func (omuo *OrderMainUpdateOne) SetOrderProfit(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderProfit()
	omuo.mutation.SetOrderProfit(f)
	return omuo
}

// SetNillableOrderProfit sets the "order_profit" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderProfit(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOrderProfit(*f)
	}
	return omuo
}

// AddOrderProfit adds f to the "order_profit" field.
func (omuo *OrderMainUpdateOne) AddOrderProfit(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOrderProfit(f)
	return omuo
}

// SetShipDate sets the "ship_date" field.
func (omuo *OrderMainUpdateOne) SetShipDate(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetShipDate(t)
	return omuo
}

// SetCommission sets the "commission" field.
func (omuo *OrderMainUpdateOne) SetCommission(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetCommission()
	omuo.mutation.SetCommission(f)
	return omuo
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableCommission(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetCommission(*f)
	}
	return omuo
}

// AddCommission adds f to the "commission" field.
func (omuo *OrderMainUpdateOne) AddCommission(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddCommission(f)
	return omuo
}

// SetInterceptState sets the "intercept_state" field.
func (omuo *OrderMainUpdateOne) SetInterceptState(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetInterceptState()
	omuo.mutation.SetInterceptState(i)
	return omuo
}

// SetNillableInterceptState sets the "intercept_state" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableInterceptState(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetInterceptState(*i)
	}
	return omuo
}

// AddInterceptState adds i to the "intercept_state" field.
func (omuo *OrderMainUpdateOne) AddInterceptState(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddInterceptState(i)
	return omuo
}

// SetSendOrderTime sets the "send_order_time" field.
func (omuo *OrderMainUpdateOne) SetSendOrderTime(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetSendOrderTime(t)
	return omuo
}

// SetSendOrderUser sets the "send_order_user" field.
func (omuo *OrderMainUpdateOne) SetSendOrderUser(s string) *OrderMainUpdateOne {
	omuo.mutation.SetSendOrderUser(s)
	return omuo
}

// SetProviderType sets the "provider_type" field.
func (omuo *OrderMainUpdateOne) SetProviderType(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetProviderType()
	omuo.mutation.SetProviderType(i)
	return omuo
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableProviderType(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetProviderType(*i)
	}
	return omuo
}

// AddProviderType adds i to the "provider_type" field.
func (omuo *OrderMainUpdateOne) AddProviderType(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddProviderType(i)
	return omuo
}

// SetOrderPackCost sets the "order_pack_cost" field.
func (omuo *OrderMainUpdateOne) SetOrderPackCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderPackCost()
	omuo.mutation.SetOrderPackCost(f)
	return omuo
}

// SetNillableOrderPackCost sets the "order_pack_cost" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderPackCost(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOrderPackCost(*f)
	}
	return omuo
}

// AddOrderPackCost adds f to the "order_pack_cost" field.
func (omuo *OrderMainUpdateOne) AddOrderPackCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOrderPackCost(f)
	return omuo
}

// SetPaymentFixCost sets the "payment_fix_cost" field.
func (omuo *OrderMainUpdateOne) SetPaymentFixCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetPaymentFixCost()
	omuo.mutation.SetPaymentFixCost(f)
	return omuo
}

// SetNillablePaymentFixCost sets the "payment_fix_cost" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillablePaymentFixCost(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetPaymentFixCost(*f)
	}
	return omuo
}

// AddPaymentFixCost adds f to the "payment_fix_cost" field.
func (omuo *OrderMainUpdateOne) AddPaymentFixCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddPaymentFixCost(f)
	return omuo
}

// SetIsFbaBehalf sets the "is_fba_behalf" field.
func (omuo *OrderMainUpdateOne) SetIsFbaBehalf(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetIsFbaBehalf()
	omuo.mutation.SetIsFbaBehalf(i)
	return omuo
}

// SetNillableIsFbaBehalf sets the "is_fba_behalf" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableIsFbaBehalf(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetIsFbaBehalf(*i)
	}
	return omuo
}

// AddIsFbaBehalf adds i to the "is_fba_behalf" field.
func (omuo *OrderMainUpdateOne) AddIsFbaBehalf(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddIsFbaBehalf(i)
	return omuo
}

// SetFulfillType sets the "fulfill_type" field.
func (omuo *OrderMainUpdateOne) SetFulfillType(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetFulfillType()
	omuo.mutation.SetFulfillType(i)
	return omuo
}

// SetNillableFulfillType sets the "fulfill_type" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableFulfillType(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetFulfillType(*i)
	}
	return omuo
}

// AddFulfillType adds i to the "fulfill_type" field.
func (omuo *OrderMainUpdateOne) AddFulfillType(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddFulfillType(i)
	return omuo
}

// SetFulfillException sets the "fulfill_exception" field.
func (omuo *OrderMainUpdateOne) SetFulfillException(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetFulfillException()
	omuo.mutation.SetFulfillException(i)
	return omuo
}

// SetNillableFulfillException sets the "fulfill_exception" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableFulfillException(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetFulfillException(*i)
	}
	return omuo
}

// AddFulfillException adds i to the "fulfill_exception" field.
func (omuo *OrderMainUpdateOne) AddFulfillException(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddFulfillException(i)
	return omuo
}

// SetIossNumber sets the "ioss_number" field.
func (omuo *OrderMainUpdateOne) SetIossNumber(s string) *OrderMainUpdateOne {
	omuo.mutation.SetIossNumber(s)
	return omuo
}

// SetNillableIossNumber sets the "ioss_number" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableIossNumber(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetIossNumber(*s)
	}
	return omuo
}

// SetWarehouseShopID sets the "warehouse_shop_id" field.
func (omuo *OrderMainUpdateOne) SetWarehouseShopID(i int32) *OrderMainUpdateOne {
	omuo.mutation.ResetWarehouseShopID()
	omuo.mutation.SetWarehouseShopID(i)
	return omuo
}

// AddWarehouseShopID adds i to the "warehouse_shop_id" field.
func (omuo *OrderMainUpdateOne) AddWarehouseShopID(i int32) *OrderMainUpdateOne {
	omuo.mutation.AddWarehouseShopID(i)
	return omuo
}

// SetSalesRecordNumber sets the "sales_record_number" field.
func (omuo *OrderMainUpdateOne) SetSalesRecordNumber(s string) *OrderMainUpdateOne {
	omuo.mutation.SetSalesRecordNumber(s)
	return omuo
}

// SetNillableSalesRecordNumber sets the "sales_record_number" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableSalesRecordNumber(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetSalesRecordNumber(*s)
	}
	return omuo
}

// SetTicketCode sets the "ticket_code" field.
func (omuo *OrderMainUpdateOne) SetTicketCode(s string) *OrderMainUpdateOne {
	omuo.mutation.SetTicketCode(s)
	return omuo
}

// SetNillableTicketCode sets the "ticket_code" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableTicketCode(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetTicketCode(*s)
	}
	return omuo
}

// SetOverseasWarehouseStatus sets the "overseas_warehouse_status" field.
func (omuo *OrderMainUpdateOne) SetOverseasWarehouseStatus(s string) *OrderMainUpdateOne {
	omuo.mutation.SetOverseasWarehouseStatus(s)
	return omuo
}

// SetNillableOverseasWarehouseStatus sets the "overseas_warehouse_status" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOverseasWarehouseStatus(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetOverseasWarehouseStatus(*s)
	}
	return omuo
}

// SetPayPalID sets the "pay_pal_id" field.
func (omuo *OrderMainUpdateOne) SetPayPalID(s string) *OrderMainUpdateOne {
	omuo.mutation.SetPayPalID(s)
	return omuo
}

// SetNillablePayPalID sets the "pay_pal_id" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillablePayPalID(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetPayPalID(*s)
	}
	return omuo
}

// SetIsUpdate sets the "is_update" field.
func (omuo *OrderMainUpdateOne) SetIsUpdate(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetIsUpdate()
	omuo.mutation.SetIsUpdate(i)
	return omuo
}

// SetNillableIsUpdate sets the "is_update" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableIsUpdate(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetIsUpdate(*i)
	}
	return omuo
}

// AddIsUpdate adds i to the "is_update" field.
func (omuo *OrderMainUpdateOne) AddIsUpdate(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddIsUpdate(i)
	return omuo
}

// SetOrderSaleState sets the "order_sale_state" field.
func (omuo *OrderMainUpdateOne) SetOrderSaleState(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderSaleState()
	omuo.mutation.SetOrderSaleState(i)
	return omuo
}

// SetNillableOrderSaleState sets the "order_sale_state" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderSaleState(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetOrderSaleState(*i)
	}
	return omuo
}

// AddOrderSaleState adds i to the "order_sale_state" field.
func (omuo *OrderMainUpdateOne) AddOrderSaleState(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddOrderSaleState(i)
	return omuo
}

// SetProductCost sets the "product_cost" field.
func (omuo *OrderMainUpdateOne) SetProductCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetProductCost()
	omuo.mutation.SetProductCost(f)
	return omuo
}

// SetNillableProductCost sets the "product_cost" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableProductCost(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetProductCost(*f)
	}
	return omuo
}

// AddProductCost adds f to the "product_cost" field.
func (omuo *OrderMainUpdateOne) AddProductCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddProductCost(f)
	return omuo
}

// SetHeadCost sets the "head_cost" field.
func (omuo *OrderMainUpdateOne) SetHeadCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetHeadCost()
	omuo.mutation.SetHeadCost(f)
	return omuo
}

// SetNillableHeadCost sets the "head_cost" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableHeadCost(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetHeadCost(*f)
	}
	return omuo
}

// AddHeadCost adds f to the "head_cost" field.
func (omuo *OrderMainUpdateOne) AddHeadCost(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddHeadCost(f)
	return omuo
}

// SetCarrierCode sets the "carrier_code" field.
func (omuo *OrderMainUpdateOne) SetCarrierCode(s string) *OrderMainUpdateOne {
	omuo.mutation.SetCarrierCode(s)
	return omuo
}

// SetNillableCarrierCode sets the "carrier_code" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableCarrierCode(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetCarrierCode(*s)
	}
	return omuo
}

// SetWithheldTax sets the "withheld_tax" field.
func (omuo *OrderMainUpdateOne) SetWithheldTax(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetWithheldTax()
	omuo.mutation.SetWithheldTax(f)
	return omuo
}

// SetNillableWithheldTax sets the "withheld_tax" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableWithheldTax(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetWithheldTax(*f)
	}
	return omuo
}

// AddWithheldTax adds f to the "withheld_tax" field.
func (omuo *OrderMainUpdateOne) AddWithheldTax(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddWithheldTax(f)
	return omuo
}

// SetOtherFee sets the "other_fee" field.
func (omuo *OrderMainUpdateOne) SetOtherFee(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOtherFee()
	omuo.mutation.SetOtherFee(f)
	return omuo
}

// SetNillableOtherFee sets the "other_fee" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOtherFee(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOtherFee(*f)
	}
	return omuo
}

// AddOtherFee adds f to the "other_fee" field.
func (omuo *OrderMainUpdateOne) AddOtherFee(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOtherFee(f)
	return omuo
}

// SetEscrowTax sets the "escrow_tax" field.
func (omuo *OrderMainUpdateOne) SetEscrowTax(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetEscrowTax()
	omuo.mutation.SetEscrowTax(f)
	return omuo
}

// SetNillableEscrowTax sets the "escrow_tax" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableEscrowTax(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetEscrowTax(*f)
	}
	return omuo
}

// AddEscrowTax adds f to the "escrow_tax" field.
func (omuo *OrderMainUpdateOne) AddEscrowTax(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddEscrowTax(f)
	return omuo
}

// SetFinalProductVatTax sets the "final_product_vat_tax" field.
func (omuo *OrderMainUpdateOne) SetFinalProductVatTax(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetFinalProductVatTax()
	omuo.mutation.SetFinalProductVatTax(f)
	return omuo
}

// SetNillableFinalProductVatTax sets the "final_product_vat_tax" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableFinalProductVatTax(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetFinalProductVatTax(*f)
	}
	return omuo
}

// AddFinalProductVatTax adds f to the "final_product_vat_tax" field.
func (omuo *OrderMainUpdateOne) AddFinalProductVatTax(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddFinalProductVatTax(f)
	return omuo
}

// SetFinalShippingVatTax sets the "final_shipping_vat_tax" field.
func (omuo *OrderMainUpdateOne) SetFinalShippingVatTax(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetFinalShippingVatTax()
	omuo.mutation.SetFinalShippingVatTax(f)
	return omuo
}

// SetNillableFinalShippingVatTax sets the "final_shipping_vat_tax" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableFinalShippingVatTax(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetFinalShippingVatTax(*f)
	}
	return omuo
}

// AddFinalShippingVatTax adds f to the "final_shipping_vat_tax" field.
func (omuo *OrderMainUpdateOne) AddFinalShippingVatTax(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddFinalShippingVatTax(f)
	return omuo
}

// SetShippingCharge sets the "shipping_charge" field.
func (omuo *OrderMainUpdateOne) SetShippingCharge(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetShippingCharge()
	omuo.mutation.SetShippingCharge(f)
	return omuo
}

// SetNillableShippingCharge sets the "shipping_charge" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShippingCharge(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetShippingCharge(*f)
	}
	return omuo
}

// AddShippingCharge adds f to the "shipping_charge" field.
func (omuo *OrderMainUpdateOne) AddShippingCharge(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddShippingCharge(f)
	return omuo
}

// SetVoucherPlatform sets the "voucher_platform" field.
func (omuo *OrderMainUpdateOne) SetVoucherPlatform(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetVoucherPlatform()
	omuo.mutation.SetVoucherPlatform(f)
	return omuo
}

// SetNillableVoucherPlatform sets the "voucher_platform" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableVoucherPlatform(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetVoucherPlatform(*f)
	}
	return omuo
}

// AddVoucherPlatform adds f to the "voucher_platform" field.
func (omuo *OrderMainUpdateOne) AddVoucherPlatform(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddVoucherPlatform(f)
	return omuo
}

// SetOverTimeLeft sets the "over_time_left" field.
func (omuo *OrderMainUpdateOne) SetOverTimeLeft(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetOverTimeLeft(t)
	return omuo
}

// SetNillableOverTimeLeft sets the "over_time_left" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOverTimeLeft(t *time.Time) *OrderMainUpdateOne {
	if t != nil {
		omuo.SetOverTimeLeft(*t)
	}
	return omuo
}

// ClearOverTimeLeft clears the value of the "over_time_left" field.
func (omuo *OrderMainUpdateOne) ClearOverTimeLeft() *OrderMainUpdateOne {
	omuo.mutation.ClearOverTimeLeft()
	return omuo
}

// SetShippingRebate sets the "shipping_rebate" field.
func (omuo *OrderMainUpdateOne) SetShippingRebate(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetShippingRebate()
	omuo.mutation.SetShippingRebate(f)
	return omuo
}

// SetNillableShippingRebate sets the "shipping_rebate" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShippingRebate(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetShippingRebate(*f)
	}
	return omuo
}

// AddShippingRebate adds f to the "shipping_rebate" field.
func (omuo *OrderMainUpdateOne) AddShippingRebate(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddShippingRebate(f)
	return omuo
}

// SetLabelList sets the "label_list" field.
func (omuo *OrderMainUpdateOne) SetLabelList(s string) *OrderMainUpdateOne {
	omuo.mutation.SetLabelList(s)
	return omuo
}

// SetNillableLabelList sets the "label_list" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableLabelList(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetLabelList(*s)
	}
	return omuo
}

// SetOutRealGrandTotal sets the "out_real_grand_total" field.
func (omuo *OrderMainUpdateOne) SetOutRealGrandTotal(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOutRealGrandTotal()
	omuo.mutation.SetOutRealGrandTotal(f)
	return omuo
}

// SetNillableOutRealGrandTotal sets the "out_real_grand_total" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOutRealGrandTotal(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOutRealGrandTotal(*f)
	}
	return omuo
}

// AddOutRealGrandTotal adds f to the "out_real_grand_total" field.
func (omuo *OrderMainUpdateOne) AddOutRealGrandTotal(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOutRealGrandTotal(f)
	return omuo
}

// SetBillList sets the "bill_list" field.
func (omuo *OrderMainUpdateOne) SetBillList(s string) *OrderMainUpdateOne {
	omuo.mutation.SetBillList(s)
	return omuo
}

// SetNillableBillList sets the "bill_list" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableBillList(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetBillList(*s)
	}
	return omuo
}

// SetOutGrandTotal sets the "out_grand_total" field.
func (omuo *OrderMainUpdateOne) SetOutGrandTotal(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOutGrandTotal()
	omuo.mutation.SetOutGrandTotal(f)
	return omuo
}

// SetNillableOutGrandTotal sets the "out_grand_total" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOutGrandTotal(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOutGrandTotal(*f)
	}
	return omuo
}

// AddOutGrandTotal adds f to the "out_grand_total" field.
func (omuo *OrderMainUpdateOne) AddOutGrandTotal(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOutGrandTotal(f)
	return omuo
}

// SetDeliverShop sets the "deliver_shop" field.
func (omuo *OrderMainUpdateOne) SetDeliverShop(s string) *OrderMainUpdateOne {
	omuo.mutation.SetDeliverShop(s)
	return omuo
}

// SetNillableDeliverShop sets the "deliver_shop" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableDeliverShop(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetDeliverShop(*s)
	}
	return omuo
}

// SetShippingCostFinal sets the "shipping_cost_final" field.
func (omuo *OrderMainUpdateOne) SetShippingCostFinal(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetShippingCostFinal()
	omuo.mutation.SetShippingCostFinal(f)
	return omuo
}

// SetNillableShippingCostFinal sets the "shipping_cost_final" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShippingCostFinal(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetShippingCostFinal(*f)
	}
	return omuo
}

// AddShippingCostFinal adds f to the "shipping_cost_final" field.
func (omuo *OrderMainUpdateOne) AddShippingCostFinal(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddShippingCostFinal(f)
	return omuo
}

// SetShippingFreeAbout sets the "shipping_free_about" field.
func (omuo *OrderMainUpdateOne) SetShippingFreeAbout(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetShippingFreeAbout()
	omuo.mutation.SetShippingFreeAbout(f)
	return omuo
}

// SetNillableShippingFreeAbout sets the "shipping_free_about" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShippingFreeAbout(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetShippingFreeAbout(*f)
	}
	return omuo
}

// AddShippingFreeAbout adds f to the "shipping_free_about" field.
func (omuo *OrderMainUpdateOne) AddShippingFreeAbout(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddShippingFreeAbout(f)
	return omuo
}

// SetCreateOrderStatus sets the "create_order_status" field.
func (omuo *OrderMainUpdateOne) SetCreateOrderStatus(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetCreateOrderStatus()
	omuo.mutation.SetCreateOrderStatus(i)
	return omuo
}

// SetNillableCreateOrderStatus sets the "create_order_status" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableCreateOrderStatus(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetCreateOrderStatus(*i)
	}
	return omuo
}

// AddCreateOrderStatus adds i to the "create_order_status" field.
func (omuo *OrderMainUpdateOne) AddCreateOrderStatus(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddCreateOrderStatus(i)
	return omuo
}

// SetFinanceTime sets the "finance_time" field.
func (omuo *OrderMainUpdateOne) SetFinanceTime(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetFinanceTime(t)
	return omuo
}

// SetIsQcc sets the "is_qcc" field.
func (omuo *OrderMainUpdateOne) SetIsQcc(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetIsQcc()
	omuo.mutation.SetIsQcc(i)
	return omuo
}

// SetNillableIsQcc sets the "is_qcc" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableIsQcc(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetIsQcc(*i)
	}
	return omuo
}

// AddIsQcc adds i to the "is_qcc" field.
func (omuo *OrderMainUpdateOne) AddIsQcc(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddIsQcc(i)
	return omuo
}

// SetRejectReason sets the "reject_reason" field.
func (omuo *OrderMainUpdateOne) SetRejectReason(s string) *OrderMainUpdateOne {
	omuo.mutation.SetRejectReason(s)
	return omuo
}

// SetNillableRejectReason sets the "reject_reason" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableRejectReason(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetRejectReason(*s)
	}
	return omuo
}

// SetOrderLocalTime sets the "order_local_time" field.
func (omuo *OrderMainUpdateOne) SetOrderLocalTime(t time.Time) *OrderMainUpdateOne {
	omuo.mutation.SetOrderLocalTime(t)
	return omuo
}

// SetDiscountCode sets the "discount_code" field.
func (omuo *OrderMainUpdateOne) SetDiscountCode(s string) *OrderMainUpdateOne {
	omuo.mutation.SetDiscountCode(s)
	return omuo
}

// SetNillableDiscountCode sets the "discount_code" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableDiscountCode(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetDiscountCode(*s)
	}
	return omuo
}

// SetStockoutStatus sets the "stockout_status" field.
func (omuo *OrderMainUpdateOne) SetStockoutStatus(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetStockoutStatus()
	omuo.mutation.SetStockoutStatus(i)
	return omuo
}

// SetNillableStockoutStatus sets the "stockout_status" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableStockoutStatus(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetStockoutStatus(*i)
	}
	return omuo
}

// AddStockoutStatus adds i to the "stockout_status" field.
func (omuo *OrderMainUpdateOne) AddStockoutStatus(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddStockoutStatus(i)
	return omuo
}

// SetOrderLength sets the "order_length" field.
func (omuo *OrderMainUpdateOne) SetOrderLength(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderLength()
	omuo.mutation.SetOrderLength(f)
	return omuo
}

// SetNillableOrderLength sets the "order_length" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderLength(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOrderLength(*f)
	}
	return omuo
}

// AddOrderLength adds f to the "order_length" field.
func (omuo *OrderMainUpdateOne) AddOrderLength(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOrderLength(f)
	return omuo
}

// SetOrderWidth sets the "order_width" field.
func (omuo *OrderMainUpdateOne) SetOrderWidth(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderWidth()
	omuo.mutation.SetOrderWidth(f)
	return omuo
}

// SetNillableOrderWidth sets the "order_width" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderWidth(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOrderWidth(*f)
	}
	return omuo
}

// AddOrderWidth adds f to the "order_width" field.
func (omuo *OrderMainUpdateOne) AddOrderWidth(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOrderWidth(f)
	return omuo
}

// SetOrderHeight sets the "order_height" field.
func (omuo *OrderMainUpdateOne) SetOrderHeight(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderHeight()
	omuo.mutation.SetOrderHeight(f)
	return omuo
}

// SetNillableOrderHeight sets the "order_height" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderHeight(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOrderHeight(*f)
	}
	return omuo
}

// AddOrderHeight adds f to the "order_height" field.
func (omuo *OrderMainUpdateOne) AddOrderHeight(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOrderHeight(f)
	return omuo
}

// SetFirstSide sets the "first_side" field.
func (omuo *OrderMainUpdateOne) SetFirstSide(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetFirstSide()
	omuo.mutation.SetFirstSide(f)
	return omuo
}

// SetNillableFirstSide sets the "first_side" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableFirstSide(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetFirstSide(*f)
	}
	return omuo
}

// AddFirstSide adds f to the "first_side" field.
func (omuo *OrderMainUpdateOne) AddFirstSide(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddFirstSide(f)
	return omuo
}

// SetSecondSide sets the "second_side" field.
func (omuo *OrderMainUpdateOne) SetSecondSide(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetSecondSide()
	omuo.mutation.SetSecondSide(f)
	return omuo
}

// SetNillableSecondSide sets the "second_side" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableSecondSide(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetSecondSide(*f)
	}
	return omuo
}

// AddSecondSide adds f to the "second_side" field.
func (omuo *OrderMainUpdateOne) AddSecondSide(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddSecondSide(f)
	return omuo
}

// SetThirdSide sets the "third_side" field.
func (omuo *OrderMainUpdateOne) SetThirdSide(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetThirdSide()
	omuo.mutation.SetThirdSide(f)
	return omuo
}

// SetNillableThirdSide sets the "third_side" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableThirdSide(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetThirdSide(*f)
	}
	return omuo
}

// AddThirdSide adds f to the "third_side" field.
func (omuo *OrderMainUpdateOne) AddThirdSide(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddThirdSide(f)
	return omuo
}

// SetOrderFeeWeight sets the "order_fee_weight" field.
func (omuo *OrderMainUpdateOne) SetOrderFeeWeight(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetOrderFeeWeight()
	omuo.mutation.SetOrderFeeWeight(f)
	return omuo
}

// SetNillableOrderFeeWeight sets the "order_fee_weight" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableOrderFeeWeight(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetOrderFeeWeight(*f)
	}
	return omuo
}

// AddOrderFeeWeight adds f to the "order_fee_weight" field.
func (omuo *OrderMainUpdateOne) AddOrderFeeWeight(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddOrderFeeWeight(f)
	return omuo
}

// SetShopManager sets the "shop_manager" field.
func (omuo *OrderMainUpdateOne) SetShopManager(s string) *OrderMainUpdateOne {
	omuo.mutation.SetShopManager(s)
	return omuo
}

// SetNillableShopManager sets the "shop_manager" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableShopManager(s *string) *OrderMainUpdateOne {
	if s != nil {
		omuo.SetShopManager(*s)
	}
	return omuo
}

// SetPushStatus sets the "push_status" field.
func (omuo *OrderMainUpdateOne) SetPushStatus(i int8) *OrderMainUpdateOne {
	omuo.mutation.ResetPushStatus()
	omuo.mutation.SetPushStatus(i)
	return omuo
}

// SetNillablePushStatus sets the "push_status" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillablePushStatus(i *int8) *OrderMainUpdateOne {
	if i != nil {
		omuo.SetPushStatus(*i)
	}
	return omuo
}

// AddPushStatus adds i to the "push_status" field.
func (omuo *OrderMainUpdateOne) AddPushStatus(i int8) *OrderMainUpdateOne {
	omuo.mutation.AddPushStatus(i)
	return omuo
}

// SetBuyerPaidShippingFee sets the "buyer_paid_shipping_fee" field.
func (omuo *OrderMainUpdateOne) SetBuyerPaidShippingFee(f float64) *OrderMainUpdateOne {
	omuo.mutation.ResetBuyerPaidShippingFee()
	omuo.mutation.SetBuyerPaidShippingFee(f)
	return omuo
}

// SetNillableBuyerPaidShippingFee sets the "buyer_paid_shipping_fee" field if the given value is not nil.
func (omuo *OrderMainUpdateOne) SetNillableBuyerPaidShippingFee(f *float64) *OrderMainUpdateOne {
	if f != nil {
		omuo.SetBuyerPaidShippingFee(*f)
	}
	return omuo
}

// AddBuyerPaidShippingFee adds f to the "buyer_paid_shipping_fee" field.
func (omuo *OrderMainUpdateOne) AddBuyerPaidShippingFee(f float64) *OrderMainUpdateOne {
	omuo.mutation.AddBuyerPaidShippingFee(f)
	return omuo
}

// ClearBuyerPaidShippingFee clears the value of the "buyer_paid_shipping_fee" field.
func (omuo *OrderMainUpdateOne) ClearBuyerPaidShippingFee() *OrderMainUpdateOne {
	omuo.mutation.ClearBuyerPaidShippingFee()
	return omuo
}

// Mutation returns the OrderMainMutation object of the builder.
func (omuo *OrderMainUpdateOne) Mutation() *OrderMainMutation {
	return omuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (omuo *OrderMainUpdateOne) Select(field string, fields ...string) *OrderMainUpdateOne {
	omuo.fields = append([]string{field}, fields...)
	return omuo
}

// Save executes the query and returns the updated OrderMain entity.
func (omuo *OrderMainUpdateOne) Save(ctx context.Context) (*OrderMain, error) {
	var (
		err  error
		node *OrderMain
	)
	if len(omuo.hooks) == 0 {
		if err = omuo.check(); err != nil {
			return nil, err
		}
		node, err = omuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = omuo.check(); err != nil {
				return nil, err
			}
			omuo.mutation = mutation
			node, err = omuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(omuo.hooks) - 1; i >= 0; i-- {
			if omuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = omuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, omuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderMain)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderMainMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (omuo *OrderMainUpdateOne) SaveX(ctx context.Context) *OrderMain {
	node, err := omuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (omuo *OrderMainUpdateOne) Exec(ctx context.Context) error {
	_, err := omuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omuo *OrderMainUpdateOne) ExecX(ctx context.Context) {
	if err := omuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omuo *OrderMainUpdateOne) check() error {
	if v, ok := omuo.mutation.OrderCretateType(); ok {
		if err := ordermain.OrderCretateTypeValidator(v); err != nil {
			return &ValidationError{Name: "order_cretate_type", err: fmt.Errorf(`ent: validator failed for field "OrderMain.order_cretate_type": %w`, err)}
		}
	}
	return nil
}

func (omuo *OrderMainUpdateOne) sqlSave(ctx context.Context) (_node *OrderMain, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordermain.Table,
			Columns: ordermain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: ordermain.FieldID,
			},
		},
	}
	id, ok := omuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderMain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := omuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordermain.FieldID)
		for _, f := range fields {
			if !ordermain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordermain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := omuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := omuo.mutation.OrderCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrderCode,
		})
	}
	if value, ok := omuo.mutation.OrderStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderStatus,
		})
	}
	if value, ok := omuo.mutation.AddedOrderStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderStatus,
		})
	}
	if value, ok := omuo.mutation.ExceptionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldExceptionType,
		})
	}
	if value, ok := omuo.mutation.AddedExceptionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldExceptionType,
		})
	}
	if value, ok := omuo.mutation.StoreOrderCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldStoreOrderCode,
		})
	}
	if value, ok := omuo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldPlatform,
		})
	}
	if value, ok := omuo.mutation.ShopName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShopName,
		})
	}
	if value, ok := omuo.mutation.ShipFirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipFirstName,
		})
	}
	if value, ok := omuo.mutation.ShipLastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipLastName,
		})
	}
	if value, ok := omuo.mutation.ShipCompany(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCompany,
		})
	}
	if value, ok := omuo.mutation.ShipStreet1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipStreet1,
		})
	}
	if value, ok := omuo.mutation.ShipStreet2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipStreet2,
		})
	}
	if value, ok := omuo.mutation.ShipCity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCity,
		})
	}
	if value, ok := omuo.mutation.ShipState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipState,
		})
	}
	if value, ok := omuo.mutation.ShipZip(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipZip,
		})
	}
	if value, ok := omuo.mutation.ShipCountry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCountry,
		})
	}
	if value, ok := omuo.mutation.ShipCountryCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCountryCode,
		})
	}
	if value, ok := omuo.mutation.ShipPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipPhone,
		})
	}
	if value, ok := omuo.mutation.ShipFax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipFax,
		})
	}
	if value, ok := omuo.mutation.ShipRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipRemark,
		})
	}
	if value, ok := omuo.mutation.ShipHouse(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipHouse,
		})
	}
	if value, ok := omuo.mutation.ShipCertificateCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShipCertificateCode,
		})
	}
	if value, ok := omuo.mutation.OrderUserEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrderUserEmail,
		})
	}
	if value, ok := omuo.mutation.OrdersUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrdersUserID,
		})
	}
	if value, ok := omuo.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldCurrency,
		})
	}
	if value, ok := omuo.mutation.CurrenciesID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldCurrenciesID,
		})
	}
	if value, ok := omuo.mutation.AddedCurrenciesID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldCurrenciesID,
		})
	}
	if value, ok := omuo.mutation.CurrencyRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldCurrencyRate,
		})
	}
	if value, ok := omuo.mutation.AddedCurrencyRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldCurrencyRate,
		})
	}
	if value, ok := omuo.mutation.ShippingMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShippingMethod,
		})
	}
	if value, ok := omuo.mutation.ShippingMethodOrig(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShippingMethodOrig,
		})
	}
	if value, ok := omuo.mutation.ShippingMethodName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShippingMethodName,
		})
	}
	if value, ok := omuo.mutation.GrandTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldGrandTotal,
		})
	}
	if value, ok := omuo.mutation.AddedGrandTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldGrandTotal,
		})
	}
	if value, ok := omuo.mutation.TrackNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTrackNumber,
		})
	}
	if value, ok := omuo.mutation.FollowNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldFollowNumber,
		})
	}
	if value, ok := omuo.mutation.DatePayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldDatePayment,
		})
	}
	if value, ok := omuo.mutation.TransactionNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTransactionNumber,
		})
	}
	if value, ok := omuo.mutation.TransactionFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldTransactionFee,
		})
	}
	if value, ok := omuo.mutation.AddedTransactionFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldTransactionFee,
		})
	}
	if value, ok := omuo.mutation.UpdateTrackTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldUpdateTrackTime,
		})
	}
	if value, ok := omuo.mutation.UpdateFollowTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldUpdateFollowTime,
		})
	}
	if value, ok := omuo.mutation.ShippingCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCost,
		})
	}
	if value, ok := omuo.mutation.AddedShippingCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCost,
		})
	}
	if value, ok := omuo.mutation.ShippingCostExt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCostExt,
		})
	}
	if value, ok := omuo.mutation.AddedShippingCostExt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCostExt,
		})
	}
	if value, ok := omuo.mutation.TaxesNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTaxesNumber,
		})
	}
	if value, ok := omuo.mutation.Tax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldTax,
		})
	}
	if value, ok := omuo.mutation.AddedTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldTax,
		})
	}
	if value, ok := omuo.mutation.OrderDiscount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderDiscount,
		})
	}
	if value, ok := omuo.mutation.AddedOrderDiscount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderDiscount,
		})
	}
	if value, ok := omuo.mutation.Insurance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldInsurance,
		})
	}
	if value, ok := omuo.mutation.AddedInsurance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldInsurance,
		})
	}
	if value, ok := omuo.mutation.OrderWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderWeight,
		})
	}
	if value, ok := omuo.mutation.AddedOrderWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderWeight,
		})
	}
	if value, ok := omuo.mutation.OrderCretateType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ordermain.FieldOrderCretateType,
		})
	}
	if value, ok := omuo.mutation.OrderType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderType,
		})
	}
	if value, ok := omuo.mutation.AddedOrderType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderType,
		})
	}
	if value, ok := omuo.mutation.StoreCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldStoreCreatedAt,
		})
	}
	if value, ok := omuo.mutation.SubOrdersCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldSubOrdersCode,
		})
	}
	if value, ok := omuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldUpdatedAt,
		})
	}
	if value, ok := omuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldCreatedAt,
		})
	}
	if value, ok := omuo.mutation.WarehouseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldWarehouseID,
		})
	}
	if value, ok := omuo.mutation.OrderListType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderListType,
		})
	}
	if value, ok := omuo.mutation.AddedOrderListType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderListType,
		})
	}
	if value, ok := omuo.mutation.OrderBatchNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOrderBatchNo,
		})
	}
	if value, ok := omuo.mutation.ShopID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldShopID,
		})
	}
	if value, ok := omuo.mutation.AddedShopID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldShopID,
		})
	}
	if value, ok := omuo.mutation.Subtotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldSubtotal,
		})
	}
	if value, ok := omuo.mutation.AddedSubtotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldSubtotal,
		})
	}
	if value, ok := omuo.mutation.ShippingFree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingFree,
		})
	}
	if value, ok := omuo.mutation.AddedShippingFree(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingFree,
		})
	}
	if value, ok := omuo.mutation.OrderCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderCost,
		})
	}
	if value, ok := omuo.mutation.AddedOrderCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderCost,
		})
	}
	if value, ok := omuo.mutation.OrderProfit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderProfit,
		})
	}
	if value, ok := omuo.mutation.AddedOrderProfit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderProfit,
		})
	}
	if value, ok := omuo.mutation.ShipDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldShipDate,
		})
	}
	if value, ok := omuo.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldCommission,
		})
	}
	if value, ok := omuo.mutation.AddedCommission(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldCommission,
		})
	}
	if value, ok := omuo.mutation.InterceptState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldInterceptState,
		})
	}
	if value, ok := omuo.mutation.AddedInterceptState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldInterceptState,
		})
	}
	if value, ok := omuo.mutation.SendOrderTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldSendOrderTime,
		})
	}
	if value, ok := omuo.mutation.SendOrderUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldSendOrderUser,
		})
	}
	if value, ok := omuo.mutation.ProviderType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldProviderType,
		})
	}
	if value, ok := omuo.mutation.AddedProviderType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldProviderType,
		})
	}
	if value, ok := omuo.mutation.OrderPackCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderPackCost,
		})
	}
	if value, ok := omuo.mutation.AddedOrderPackCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderPackCost,
		})
	}
	if value, ok := omuo.mutation.PaymentFixCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldPaymentFixCost,
		})
	}
	if value, ok := omuo.mutation.AddedPaymentFixCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldPaymentFixCost,
		})
	}
	if value, ok := omuo.mutation.IsFbaBehalf(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsFbaBehalf,
		})
	}
	if value, ok := omuo.mutation.AddedIsFbaBehalf(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsFbaBehalf,
		})
	}
	if value, ok := omuo.mutation.FulfillType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldFulfillType,
		})
	}
	if value, ok := omuo.mutation.AddedFulfillType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldFulfillType,
		})
	}
	if value, ok := omuo.mutation.FulfillException(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldFulfillException,
		})
	}
	if value, ok := omuo.mutation.AddedFulfillException(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldFulfillException,
		})
	}
	if value, ok := omuo.mutation.IossNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldIossNumber,
		})
	}
	if value, ok := omuo.mutation.WarehouseShopID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldWarehouseShopID,
		})
	}
	if value, ok := omuo.mutation.AddedWarehouseShopID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ordermain.FieldWarehouseShopID,
		})
	}
	if value, ok := omuo.mutation.SalesRecordNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldSalesRecordNumber,
		})
	}
	if value, ok := omuo.mutation.TicketCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldTicketCode,
		})
	}
	if value, ok := omuo.mutation.OverseasWarehouseStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldOverseasWarehouseStatus,
		})
	}
	if value, ok := omuo.mutation.PayPalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldPayPalID,
		})
	}
	if value, ok := omuo.mutation.IsUpdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsUpdate,
		})
	}
	if value, ok := omuo.mutation.AddedIsUpdate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsUpdate,
		})
	}
	if value, ok := omuo.mutation.OrderSaleState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderSaleState,
		})
	}
	if value, ok := omuo.mutation.AddedOrderSaleState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldOrderSaleState,
		})
	}
	if value, ok := omuo.mutation.ProductCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldProductCost,
		})
	}
	if value, ok := omuo.mutation.AddedProductCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldProductCost,
		})
	}
	if value, ok := omuo.mutation.HeadCost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldHeadCost,
		})
	}
	if value, ok := omuo.mutation.AddedHeadCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldHeadCost,
		})
	}
	if value, ok := omuo.mutation.CarrierCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldCarrierCode,
		})
	}
	if value, ok := omuo.mutation.WithheldTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldWithheldTax,
		})
	}
	if value, ok := omuo.mutation.AddedWithheldTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldWithheldTax,
		})
	}
	if value, ok := omuo.mutation.OtherFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOtherFee,
		})
	}
	if value, ok := omuo.mutation.AddedOtherFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOtherFee,
		})
	}
	if value, ok := omuo.mutation.EscrowTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldEscrowTax,
		})
	}
	if value, ok := omuo.mutation.AddedEscrowTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldEscrowTax,
		})
	}
	if value, ok := omuo.mutation.FinalProductVatTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFinalProductVatTax,
		})
	}
	if value, ok := omuo.mutation.AddedFinalProductVatTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFinalProductVatTax,
		})
	}
	if value, ok := omuo.mutation.FinalShippingVatTax(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFinalShippingVatTax,
		})
	}
	if value, ok := omuo.mutation.AddedFinalShippingVatTax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFinalShippingVatTax,
		})
	}
	if value, ok := omuo.mutation.ShippingCharge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCharge,
		})
	}
	if value, ok := omuo.mutation.AddedShippingCharge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCharge,
		})
	}
	if value, ok := omuo.mutation.VoucherPlatform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldVoucherPlatform,
		})
	}
	if value, ok := omuo.mutation.AddedVoucherPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldVoucherPlatform,
		})
	}
	if value, ok := omuo.mutation.OverTimeLeft(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldOverTimeLeft,
		})
	}
	if omuo.mutation.OverTimeLeftCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: ordermain.FieldOverTimeLeft,
		})
	}
	if value, ok := omuo.mutation.ShippingRebate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingRebate,
		})
	}
	if value, ok := omuo.mutation.AddedShippingRebate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingRebate,
		})
	}
	if value, ok := omuo.mutation.LabelList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldLabelList,
		})
	}
	if value, ok := omuo.mutation.OutRealGrandTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOutRealGrandTotal,
		})
	}
	if value, ok := omuo.mutation.AddedOutRealGrandTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOutRealGrandTotal,
		})
	}
	if value, ok := omuo.mutation.BillList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldBillList,
		})
	}
	if value, ok := omuo.mutation.OutGrandTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOutGrandTotal,
		})
	}
	if value, ok := omuo.mutation.AddedOutGrandTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOutGrandTotal,
		})
	}
	if value, ok := omuo.mutation.DeliverShop(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldDeliverShop,
		})
	}
	if value, ok := omuo.mutation.ShippingCostFinal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCostFinal,
		})
	}
	if value, ok := omuo.mutation.AddedShippingCostFinal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingCostFinal,
		})
	}
	if value, ok := omuo.mutation.ShippingFreeAbout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingFreeAbout,
		})
	}
	if value, ok := omuo.mutation.AddedShippingFreeAbout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldShippingFreeAbout,
		})
	}
	if value, ok := omuo.mutation.CreateOrderStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldCreateOrderStatus,
		})
	}
	if value, ok := omuo.mutation.AddedCreateOrderStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldCreateOrderStatus,
		})
	}
	if value, ok := omuo.mutation.FinanceTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldFinanceTime,
		})
	}
	if value, ok := omuo.mutation.IsQcc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsQcc,
		})
	}
	if value, ok := omuo.mutation.AddedIsQcc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldIsQcc,
		})
	}
	if value, ok := omuo.mutation.RejectReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldRejectReason,
		})
	}
	if value, ok := omuo.mutation.OrderLocalTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordermain.FieldOrderLocalTime,
		})
	}
	if value, ok := omuo.mutation.DiscountCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldDiscountCode,
		})
	}
	if value, ok := omuo.mutation.StockoutStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldStockoutStatus,
		})
	}
	if value, ok := omuo.mutation.AddedStockoutStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldStockoutStatus,
		})
	}
	if value, ok := omuo.mutation.OrderLength(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderLength,
		})
	}
	if value, ok := omuo.mutation.AddedOrderLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderLength,
		})
	}
	if value, ok := omuo.mutation.OrderWidth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderWidth,
		})
	}
	if value, ok := omuo.mutation.AddedOrderWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderWidth,
		})
	}
	if value, ok := omuo.mutation.OrderHeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderHeight,
		})
	}
	if value, ok := omuo.mutation.AddedOrderHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderHeight,
		})
	}
	if value, ok := omuo.mutation.FirstSide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFirstSide,
		})
	}
	if value, ok := omuo.mutation.AddedFirstSide(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldFirstSide,
		})
	}
	if value, ok := omuo.mutation.SecondSide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldSecondSide,
		})
	}
	if value, ok := omuo.mutation.AddedSecondSide(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldSecondSide,
		})
	}
	if value, ok := omuo.mutation.ThirdSide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldThirdSide,
		})
	}
	if value, ok := omuo.mutation.AddedThirdSide(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldThirdSide,
		})
	}
	if value, ok := omuo.mutation.OrderFeeWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderFeeWeight,
		})
	}
	if value, ok := omuo.mutation.AddedOrderFeeWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldOrderFeeWeight,
		})
	}
	if value, ok := omuo.mutation.ShopManager(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordermain.FieldShopManager,
		})
	}
	if value, ok := omuo.mutation.PushStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldPushStatus,
		})
	}
	if value, ok := omuo.mutation.AddedPushStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: ordermain.FieldPushStatus,
		})
	}
	if value, ok := omuo.mutation.BuyerPaidShippingFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldBuyerPaidShippingFee,
		})
	}
	if value, ok := omuo.mutation.AddedBuyerPaidShippingFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ordermain.FieldBuyerPaidShippingFee,
		})
	}
	if omuo.mutation.BuyerPaidShippingFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: ordermain.FieldBuyerPaidShippingFee,
		})
	}
	_node = &OrderMain{config: omuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, omuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordermain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
