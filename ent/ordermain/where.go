// Code generated by ent, DO NOT EDIT.

package ordermain

import (
	"order/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OrderCode applies equality check predicate on the "order_code" field. It's identical to OrderCodeEQ.
func OrderCode(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderCode), v))
	})
}

// OrderStatus applies equality check predicate on the "order_status" field. It's identical to OrderStatusEQ.
func OrderStatus(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderStatus), v))
	})
}

// ExceptionType applies equality check predicate on the "exception_type" field. It's identical to ExceptionTypeEQ.
func ExceptionType(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExceptionType), v))
	})
}

// StoreOrderCode applies equality check predicate on the "store_order_code" field. It's identical to StoreOrderCodeEQ.
func StoreOrderCode(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreOrderCode), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// ShopName applies equality check predicate on the "shop_name" field. It's identical to ShopNameEQ.
func ShopName(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopName), v))
	})
}

// ShipFirstName applies equality check predicate on the "ship_first_name" field. It's identical to ShipFirstNameEQ.
func ShipFirstName(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipFirstName), v))
	})
}

// ShipLastName applies equality check predicate on the "ship_last_name" field. It's identical to ShipLastNameEQ.
func ShipLastName(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipLastName), v))
	})
}

// ShipCompany applies equality check predicate on the "ship_company" field. It's identical to ShipCompanyEQ.
func ShipCompany(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipCompany), v))
	})
}

// ShipStreet1 applies equality check predicate on the "ship_street1" field. It's identical to ShipStreet1EQ.
func ShipStreet1(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet2 applies equality check predicate on the "ship_street2" field. It's identical to ShipStreet2EQ.
func ShipStreet2(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipStreet2), v))
	})
}

// ShipCity applies equality check predicate on the "ship_city" field. It's identical to ShipCityEQ.
func ShipCity(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipCity), v))
	})
}

// ShipState applies equality check predicate on the "ship_state" field. It's identical to ShipStateEQ.
func ShipState(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipState), v))
	})
}

// ShipZip applies equality check predicate on the "ship_zip" field. It's identical to ShipZipEQ.
func ShipZip(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipZip), v))
	})
}

// ShipCountry applies equality check predicate on the "ship_country" field. It's identical to ShipCountryEQ.
func ShipCountry(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipCountry), v))
	})
}

// ShipCountryCode applies equality check predicate on the "ship_country_code" field. It's identical to ShipCountryCodeEQ.
func ShipCountryCode(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipCountryCode), v))
	})
}

// ShipPhone applies equality check predicate on the "ship_phone" field. It's identical to ShipPhoneEQ.
func ShipPhone(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipPhone), v))
	})
}

// ShipFax applies equality check predicate on the "ship_fax" field. It's identical to ShipFaxEQ.
func ShipFax(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipFax), v))
	})
}

// ShipRemark applies equality check predicate on the "ship_remark" field. It's identical to ShipRemarkEQ.
func ShipRemark(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipRemark), v))
	})
}

// ShipHouse applies equality check predicate on the "ship_house" field. It's identical to ShipHouseEQ.
func ShipHouse(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipHouse), v))
	})
}

// ShipCertificateCode applies equality check predicate on the "ship_certificate_code" field. It's identical to ShipCertificateCodeEQ.
func ShipCertificateCode(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipCertificateCode), v))
	})
}

// OrderUserEmail applies equality check predicate on the "order_user_email" field. It's identical to OrderUserEmailEQ.
func OrderUserEmail(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderUserEmail), v))
	})
}

// OrdersUserID applies equality check predicate on the "orders_user_id" field. It's identical to OrdersUserIDEQ.
func OrdersUserID(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrdersUserID), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrenciesID applies equality check predicate on the "currencies_id" field. It's identical to CurrenciesIDEQ.
func CurrenciesID(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrenciesID), v))
	})
}

// CurrencyRate applies equality check predicate on the "currency_rate" field. It's identical to CurrencyRateEQ.
func CurrencyRate(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrencyRate), v))
	})
}

// ShippingMethod applies equality check predicate on the "shipping_method" field. It's identical to ShippingMethodEQ.
func ShippingMethod(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodOrig applies equality check predicate on the "shipping_method_orig" field. It's identical to ShippingMethodOrigEQ.
func ShippingMethodOrig(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodName applies equality check predicate on the "shipping_method_name" field. It's identical to ShippingMethodNameEQ.
func ShippingMethodName(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMethodName), v))
	})
}

// GrandTotal applies equality check predicate on the "grand_total" field. It's identical to GrandTotalEQ.
func GrandTotal(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrandTotal), v))
	})
}

// TrackNumber applies equality check predicate on the "track_number" field. It's identical to TrackNumberEQ.
func TrackNumber(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackNumber), v))
	})
}

// FollowNumber applies equality check predicate on the "follow_number" field. It's identical to FollowNumberEQ.
func FollowNumber(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollowNumber), v))
	})
}

// DatePayment applies equality check predicate on the "date_payment" field. It's identical to DatePaymentEQ.
func DatePayment(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatePayment), v))
	})
}

// TransactionNumber applies equality check predicate on the "transaction_number" field. It's identical to TransactionNumberEQ.
func TransactionNumber(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionNumber), v))
	})
}

// TransactionFee applies equality check predicate on the "transaction_fee" field. It's identical to TransactionFeeEQ.
func TransactionFee(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionFee), v))
	})
}

// UpdateTrackTime applies equality check predicate on the "update_track_time" field. It's identical to UpdateTrackTimeEQ.
func UpdateTrackTime(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTrackTime), v))
	})
}

// UpdateFollowTime applies equality check predicate on the "update_follow_time" field. It's identical to UpdateFollowTimeEQ.
func UpdateFollowTime(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateFollowTime), v))
	})
}

// ShippingCost applies equality check predicate on the "shipping_cost" field. It's identical to ShippingCostEQ.
func ShippingCost(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCost), v))
	})
}

// ShippingCostExt applies equality check predicate on the "shipping_cost_ext" field. It's identical to ShippingCostExtEQ.
func ShippingCostExt(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCostExt), v))
	})
}

// TaxesNumber applies equality check predicate on the "taxes_number" field. It's identical to TaxesNumberEQ.
func TaxesNumber(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxesNumber), v))
	})
}

// Tax applies equality check predicate on the "tax" field. It's identical to TaxEQ.
func Tax(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTax), v))
	})
}

// OrderDiscount applies equality check predicate on the "order_discount" field. It's identical to OrderDiscountEQ.
func OrderDiscount(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderDiscount), v))
	})
}

// Insurance applies equality check predicate on the "insurance" field. It's identical to InsuranceEQ.
func Insurance(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInsurance), v))
	})
}

// OrderWeight applies equality check predicate on the "order_weight" field. It's identical to OrderWeightEQ.
func OrderWeight(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderWeight), v))
	})
}

// OrderType applies equality check predicate on the "order_type" field. It's identical to OrderTypeEQ.
func OrderType(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderType), v))
	})
}

// StoreCreatedAt applies equality check predicate on the "store_created_at" field. It's identical to StoreCreatedAtEQ.
func StoreCreatedAt(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreCreatedAt), v))
	})
}

// SubOrdersCode applies equality check predicate on the "sub_orders_code" field. It's identical to SubOrdersCodeEQ.
func SubOrdersCode(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubOrdersCode), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// WarehouseID applies equality check predicate on the "warehouse_id" field. It's identical to WarehouseIDEQ.
func WarehouseID(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseID), v))
	})
}

// OrderListType applies equality check predicate on the "order_list_type" field. It's identical to OrderListTypeEQ.
func OrderListType(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderListType), v))
	})
}

// OrderBatchNo applies equality check predicate on the "order_batch_no" field. It's identical to OrderBatchNoEQ.
func OrderBatchNo(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderBatchNo), v))
	})
}

// ShopID applies equality check predicate on the "shop_id" field. It's identical to ShopIDEQ.
func ShopID(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopID), v))
	})
}

// Subtotal applies equality check predicate on the "subtotal" field. It's identical to SubtotalEQ.
func Subtotal(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtotal), v))
	})
}

// ShippingFree applies equality check predicate on the "shipping_free" field. It's identical to ShippingFreeEQ.
func ShippingFree(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingFree), v))
	})
}

// OrderCost applies equality check predicate on the "order_cost" field. It's identical to OrderCostEQ.
func OrderCost(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderCost), v))
	})
}

// OrderProfit applies equality check predicate on the "order_profit" field. It's identical to OrderProfitEQ.
func OrderProfit(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderProfit), v))
	})
}

// ShipDate applies equality check predicate on the "ship_date" field. It's identical to ShipDateEQ.
func ShipDate(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipDate), v))
	})
}

// Commission applies equality check predicate on the "commission" field. It's identical to CommissionEQ.
func Commission(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommission), v))
	})
}

// InterceptState applies equality check predicate on the "intercept_state" field. It's identical to InterceptStateEQ.
func InterceptState(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterceptState), v))
	})
}

// SendOrderTime applies equality check predicate on the "send_order_time" field. It's identical to SendOrderTimeEQ.
func SendOrderTime(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendOrderTime), v))
	})
}

// SendOrderUser applies equality check predicate on the "send_order_user" field. It's identical to SendOrderUserEQ.
func SendOrderUser(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendOrderUser), v))
	})
}

// ProviderType applies equality check predicate on the "provider_type" field. It's identical to ProviderTypeEQ.
func ProviderType(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderType), v))
	})
}

// OrderPackCost applies equality check predicate on the "order_pack_cost" field. It's identical to OrderPackCostEQ.
func OrderPackCost(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderPackCost), v))
	})
}

// PaymentFixCost applies equality check predicate on the "payment_fix_cost" field. It's identical to PaymentFixCostEQ.
func PaymentFixCost(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentFixCost), v))
	})
}

// IsFbaBehalf applies equality check predicate on the "is_fba_behalf" field. It's identical to IsFbaBehalfEQ.
func IsFbaBehalf(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFbaBehalf), v))
	})
}

// FulfillType applies equality check predicate on the "fulfill_type" field. It's identical to FulfillTypeEQ.
func FulfillType(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillType), v))
	})
}

// FulfillException applies equality check predicate on the "fulfill_exception" field. It's identical to FulfillExceptionEQ.
func FulfillException(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillException), v))
	})
}

// IossNumber applies equality check predicate on the "ioss_number" field. It's identical to IossNumberEQ.
func IossNumber(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossNumber), v))
	})
}

// WarehouseShopID applies equality check predicate on the "warehouse_shop_id" field. It's identical to WarehouseShopIDEQ.
func WarehouseShopID(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseShopID), v))
	})
}

// SalesRecordNumber applies equality check predicate on the "sales_record_number" field. It's identical to SalesRecordNumberEQ.
func SalesRecordNumber(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalesRecordNumber), v))
	})
}

// TicketCode applies equality check predicate on the "ticket_code" field. It's identical to TicketCodeEQ.
func TicketCode(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTicketCode), v))
	})
}

// OverseasWarehouseStatus applies equality check predicate on the "overseas_warehouse_status" field. It's identical to OverseasWarehouseStatusEQ.
func OverseasWarehouseStatus(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// PayPalID applies equality check predicate on the "pay_pal_id" field. It's identical to PayPalIDEQ.
func PayPalID(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayPalID), v))
	})
}

// IsUpdate applies equality check predicate on the "is_update" field. It's identical to IsUpdateEQ.
func IsUpdate(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsUpdate), v))
	})
}

// OrderSaleState applies equality check predicate on the "order_sale_state" field. It's identical to OrderSaleStateEQ.
func OrderSaleState(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderSaleState), v))
	})
}

// ProductCost applies equality check predicate on the "product_cost" field. It's identical to ProductCostEQ.
func ProductCost(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductCost), v))
	})
}

// HeadCost applies equality check predicate on the "head_cost" field. It's identical to HeadCostEQ.
func HeadCost(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeadCost), v))
	})
}

// CarrierCode applies equality check predicate on the "carrier_code" field. It's identical to CarrierCodeEQ.
func CarrierCode(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarrierCode), v))
	})
}

// WithheldTax applies equality check predicate on the "withheld_tax" field. It's identical to WithheldTaxEQ.
func WithheldTax(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithheldTax), v))
	})
}

// OtherFee applies equality check predicate on the "other_fee" field. It's identical to OtherFeeEQ.
func OtherFee(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherFee), v))
	})
}

// EscrowTax applies equality check predicate on the "escrow_tax" field. It's identical to EscrowTaxEQ.
func EscrowTax(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEscrowTax), v))
	})
}

// FinalProductVatTax applies equality check predicate on the "final_product_vat_tax" field. It's identical to FinalProductVatTaxEQ.
func FinalProductVatTax(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinalProductVatTax), v))
	})
}

// FinalShippingVatTax applies equality check predicate on the "final_shipping_vat_tax" field. It's identical to FinalShippingVatTaxEQ.
func FinalShippingVatTax(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinalShippingVatTax), v))
	})
}

// ShippingCharge applies equality check predicate on the "shipping_charge" field. It's identical to ShippingChargeEQ.
func ShippingCharge(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCharge), v))
	})
}

// VoucherPlatform applies equality check predicate on the "voucher_platform" field. It's identical to VoucherPlatformEQ.
func VoucherPlatform(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVoucherPlatform), v))
	})
}

// OverTimeLeft applies equality check predicate on the "over_time_left" field. It's identical to OverTimeLeftEQ.
func OverTimeLeft(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverTimeLeft), v))
	})
}

// ShippingRebate applies equality check predicate on the "shipping_rebate" field. It's identical to ShippingRebateEQ.
func ShippingRebate(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingRebate), v))
	})
}

// LabelList applies equality check predicate on the "label_list" field. It's identical to LabelListEQ.
func LabelList(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLabelList), v))
	})
}

// OutRealGrandTotal applies equality check predicate on the "out_real_grand_total" field. It's identical to OutRealGrandTotalEQ.
func OutRealGrandTotal(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutRealGrandTotal), v))
	})
}

// BillList applies equality check predicate on the "bill_list" field. It's identical to BillListEQ.
func BillList(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillList), v))
	})
}

// OutGrandTotal applies equality check predicate on the "out_grand_total" field. It's identical to OutGrandTotalEQ.
func OutGrandTotal(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutGrandTotal), v))
	})
}

// DeliverShop applies equality check predicate on the "deliver_shop" field. It's identical to DeliverShopEQ.
func DeliverShop(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliverShop), v))
	})
}

// ShippingCostFinal applies equality check predicate on the "shipping_cost_final" field. It's identical to ShippingCostFinalEQ.
func ShippingCostFinal(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCostFinal), v))
	})
}

// ShippingFreeAbout applies equality check predicate on the "shipping_free_about" field. It's identical to ShippingFreeAboutEQ.
func ShippingFreeAbout(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingFreeAbout), v))
	})
}

// CreateOrderStatus applies equality check predicate on the "create_order_status" field. It's identical to CreateOrderStatusEQ.
func CreateOrderStatus(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateOrderStatus), v))
	})
}

// FinanceTime applies equality check predicate on the "finance_time" field. It's identical to FinanceTimeEQ.
func FinanceTime(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinanceTime), v))
	})
}

// IsQcc applies equality check predicate on the "is_qcc" field. It's identical to IsQccEQ.
func IsQcc(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsQcc), v))
	})
}

// RejectReason applies equality check predicate on the "reject_reason" field. It's identical to RejectReasonEQ.
func RejectReason(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRejectReason), v))
	})
}

// OrderLocalTime applies equality check predicate on the "order_local_time" field. It's identical to OrderLocalTimeEQ.
func OrderLocalTime(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderLocalTime), v))
	})
}

// DiscountCode applies equality check predicate on the "discount_code" field. It's identical to DiscountCodeEQ.
func DiscountCode(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountCode), v))
	})
}

// StockoutStatus applies equality check predicate on the "stockout_status" field. It's identical to StockoutStatusEQ.
func StockoutStatus(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStockoutStatus), v))
	})
}

// OrderLength applies equality check predicate on the "order_length" field. It's identical to OrderLengthEQ.
func OrderLength(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderLength), v))
	})
}

// OrderWidth applies equality check predicate on the "order_width" field. It's identical to OrderWidthEQ.
func OrderWidth(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderWidth), v))
	})
}

// OrderHeight applies equality check predicate on the "order_height" field. It's identical to OrderHeightEQ.
func OrderHeight(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderHeight), v))
	})
}

// FirstSide applies equality check predicate on the "first_side" field. It's identical to FirstSideEQ.
func FirstSide(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstSide), v))
	})
}

// SecondSide applies equality check predicate on the "second_side" field. It's identical to SecondSideEQ.
func SecondSide(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecondSide), v))
	})
}

// ThirdSide applies equality check predicate on the "third_side" field. It's identical to ThirdSideEQ.
func ThirdSide(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdSide), v))
	})
}

// OrderFeeWeight applies equality check predicate on the "order_fee_weight" field. It's identical to OrderFeeWeightEQ.
func OrderFeeWeight(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderFeeWeight), v))
	})
}

// ShopManager applies equality check predicate on the "shop_manager" field. It's identical to ShopManagerEQ.
func ShopManager(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopManager), v))
	})
}

// PushStatus applies equality check predicate on the "push_status" field. It's identical to PushStatusEQ.
func PushStatus(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPushStatus), v))
	})
}

// BuyerPaidShippingFee applies equality check predicate on the "buyer_paid_shipping_fee" field. It's identical to BuyerPaidShippingFeeEQ.
func BuyerPaidShippingFee(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBuyerPaidShippingFee), v))
	})
}

// OrderCodeEQ applies the EQ predicate on the "order_code" field.
func OrderCodeEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderCode), v))
	})
}

// OrderCodeNEQ applies the NEQ predicate on the "order_code" field.
func OrderCodeNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderCode), v))
	})
}

// OrderCodeIn applies the In predicate on the "order_code" field.
func OrderCodeIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderCode), v...))
	})
}

// OrderCodeNotIn applies the NotIn predicate on the "order_code" field.
func OrderCodeNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderCode), v...))
	})
}

// OrderCodeGT applies the GT predicate on the "order_code" field.
func OrderCodeGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderCode), v))
	})
}

// OrderCodeGTE applies the GTE predicate on the "order_code" field.
func OrderCodeGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderCode), v))
	})
}

// OrderCodeLT applies the LT predicate on the "order_code" field.
func OrderCodeLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderCode), v))
	})
}

// OrderCodeLTE applies the LTE predicate on the "order_code" field.
func OrderCodeLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderCode), v))
	})
}

// OrderCodeContains applies the Contains predicate on the "order_code" field.
func OrderCodeContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderCode), v))
	})
}

// OrderCodeHasPrefix applies the HasPrefix predicate on the "order_code" field.
func OrderCodeHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderCode), v))
	})
}

// OrderCodeHasSuffix applies the HasSuffix predicate on the "order_code" field.
func OrderCodeHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderCode), v))
	})
}

// OrderCodeEqualFold applies the EqualFold predicate on the "order_code" field.
func OrderCodeEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderCode), v))
	})
}

// OrderCodeContainsFold applies the ContainsFold predicate on the "order_code" field.
func OrderCodeContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderCode), v))
	})
}

// OrderStatusEQ applies the EQ predicate on the "order_status" field.
func OrderStatusEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderStatus), v))
	})
}

// OrderStatusNEQ applies the NEQ predicate on the "order_status" field.
func OrderStatusNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderStatus), v))
	})
}

// OrderStatusIn applies the In predicate on the "order_status" field.
func OrderStatusIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderStatus), v...))
	})
}

// OrderStatusNotIn applies the NotIn predicate on the "order_status" field.
func OrderStatusNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderStatus), v...))
	})
}

// OrderStatusGT applies the GT predicate on the "order_status" field.
func OrderStatusGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderStatus), v))
	})
}

// OrderStatusGTE applies the GTE predicate on the "order_status" field.
func OrderStatusGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderStatus), v))
	})
}

// OrderStatusLT applies the LT predicate on the "order_status" field.
func OrderStatusLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderStatus), v))
	})
}

// OrderStatusLTE applies the LTE predicate on the "order_status" field.
func OrderStatusLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderStatus), v))
	})
}

// ExceptionTypeEQ applies the EQ predicate on the "exception_type" field.
func ExceptionTypeEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExceptionType), v))
	})
}

// ExceptionTypeNEQ applies the NEQ predicate on the "exception_type" field.
func ExceptionTypeNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExceptionType), v))
	})
}

// ExceptionTypeIn applies the In predicate on the "exception_type" field.
func ExceptionTypeIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExceptionType), v...))
	})
}

// ExceptionTypeNotIn applies the NotIn predicate on the "exception_type" field.
func ExceptionTypeNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExceptionType), v...))
	})
}

// ExceptionTypeGT applies the GT predicate on the "exception_type" field.
func ExceptionTypeGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExceptionType), v))
	})
}

// ExceptionTypeGTE applies the GTE predicate on the "exception_type" field.
func ExceptionTypeGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExceptionType), v))
	})
}

// ExceptionTypeLT applies the LT predicate on the "exception_type" field.
func ExceptionTypeLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExceptionType), v))
	})
}

// ExceptionTypeLTE applies the LTE predicate on the "exception_type" field.
func ExceptionTypeLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExceptionType), v))
	})
}

// StoreOrderCodeEQ applies the EQ predicate on the "store_order_code" field.
func StoreOrderCodeEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreOrderCode), v))
	})
}

// StoreOrderCodeNEQ applies the NEQ predicate on the "store_order_code" field.
func StoreOrderCodeNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreOrderCode), v))
	})
}

// StoreOrderCodeIn applies the In predicate on the "store_order_code" field.
func StoreOrderCodeIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreOrderCode), v...))
	})
}

// StoreOrderCodeNotIn applies the NotIn predicate on the "store_order_code" field.
func StoreOrderCodeNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreOrderCode), v...))
	})
}

// StoreOrderCodeGT applies the GT predicate on the "store_order_code" field.
func StoreOrderCodeGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreOrderCode), v))
	})
}

// StoreOrderCodeGTE applies the GTE predicate on the "store_order_code" field.
func StoreOrderCodeGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreOrderCode), v))
	})
}

// StoreOrderCodeLT applies the LT predicate on the "store_order_code" field.
func StoreOrderCodeLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreOrderCode), v))
	})
}

// StoreOrderCodeLTE applies the LTE predicate on the "store_order_code" field.
func StoreOrderCodeLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreOrderCode), v))
	})
}

// StoreOrderCodeContains applies the Contains predicate on the "store_order_code" field.
func StoreOrderCodeContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStoreOrderCode), v))
	})
}

// StoreOrderCodeHasPrefix applies the HasPrefix predicate on the "store_order_code" field.
func StoreOrderCodeHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStoreOrderCode), v))
	})
}

// StoreOrderCodeHasSuffix applies the HasSuffix predicate on the "store_order_code" field.
func StoreOrderCodeHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStoreOrderCode), v))
	})
}

// StoreOrderCodeEqualFold applies the EqualFold predicate on the "store_order_code" field.
func StoreOrderCodeEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStoreOrderCode), v))
	})
}

// StoreOrderCodeContainsFold applies the ContainsFold predicate on the "store_order_code" field.
func StoreOrderCodeContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStoreOrderCode), v))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// ShopNameEQ applies the EQ predicate on the "shop_name" field.
func ShopNameEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopName), v))
	})
}

// ShopNameNEQ applies the NEQ predicate on the "shop_name" field.
func ShopNameNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShopName), v))
	})
}

// ShopNameIn applies the In predicate on the "shop_name" field.
func ShopNameIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShopName), v...))
	})
}

// ShopNameNotIn applies the NotIn predicate on the "shop_name" field.
func ShopNameNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShopName), v...))
	})
}

// ShopNameGT applies the GT predicate on the "shop_name" field.
func ShopNameGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShopName), v))
	})
}

// ShopNameGTE applies the GTE predicate on the "shop_name" field.
func ShopNameGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShopName), v))
	})
}

// ShopNameLT applies the LT predicate on the "shop_name" field.
func ShopNameLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShopName), v))
	})
}

// ShopNameLTE applies the LTE predicate on the "shop_name" field.
func ShopNameLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShopName), v))
	})
}

// ShopNameContains applies the Contains predicate on the "shop_name" field.
func ShopNameContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShopName), v))
	})
}

// ShopNameHasPrefix applies the HasPrefix predicate on the "shop_name" field.
func ShopNameHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShopName), v))
	})
}

// ShopNameHasSuffix applies the HasSuffix predicate on the "shop_name" field.
func ShopNameHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShopName), v))
	})
}

// ShopNameEqualFold applies the EqualFold predicate on the "shop_name" field.
func ShopNameEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShopName), v))
	})
}

// ShopNameContainsFold applies the ContainsFold predicate on the "shop_name" field.
func ShopNameContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShopName), v))
	})
}

// ShipFirstNameEQ applies the EQ predicate on the "ship_first_name" field.
func ShipFirstNameEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipFirstName), v))
	})
}

// ShipFirstNameNEQ applies the NEQ predicate on the "ship_first_name" field.
func ShipFirstNameNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipFirstName), v))
	})
}

// ShipFirstNameIn applies the In predicate on the "ship_first_name" field.
func ShipFirstNameIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipFirstName), v...))
	})
}

// ShipFirstNameNotIn applies the NotIn predicate on the "ship_first_name" field.
func ShipFirstNameNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipFirstName), v...))
	})
}

// ShipFirstNameGT applies the GT predicate on the "ship_first_name" field.
func ShipFirstNameGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipFirstName), v))
	})
}

// ShipFirstNameGTE applies the GTE predicate on the "ship_first_name" field.
func ShipFirstNameGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipFirstName), v))
	})
}

// ShipFirstNameLT applies the LT predicate on the "ship_first_name" field.
func ShipFirstNameLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipFirstName), v))
	})
}

// ShipFirstNameLTE applies the LTE predicate on the "ship_first_name" field.
func ShipFirstNameLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipFirstName), v))
	})
}

// ShipFirstNameContains applies the Contains predicate on the "ship_first_name" field.
func ShipFirstNameContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipFirstName), v))
	})
}

// ShipFirstNameHasPrefix applies the HasPrefix predicate on the "ship_first_name" field.
func ShipFirstNameHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipFirstName), v))
	})
}

// ShipFirstNameHasSuffix applies the HasSuffix predicate on the "ship_first_name" field.
func ShipFirstNameHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipFirstName), v))
	})
}

// ShipFirstNameEqualFold applies the EqualFold predicate on the "ship_first_name" field.
func ShipFirstNameEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipFirstName), v))
	})
}

// ShipFirstNameContainsFold applies the ContainsFold predicate on the "ship_first_name" field.
func ShipFirstNameContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipFirstName), v))
	})
}

// ShipLastNameEQ applies the EQ predicate on the "ship_last_name" field.
func ShipLastNameEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipLastName), v))
	})
}

// ShipLastNameNEQ applies the NEQ predicate on the "ship_last_name" field.
func ShipLastNameNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipLastName), v))
	})
}

// ShipLastNameIn applies the In predicate on the "ship_last_name" field.
func ShipLastNameIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipLastName), v...))
	})
}

// ShipLastNameNotIn applies the NotIn predicate on the "ship_last_name" field.
func ShipLastNameNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipLastName), v...))
	})
}

// ShipLastNameGT applies the GT predicate on the "ship_last_name" field.
func ShipLastNameGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipLastName), v))
	})
}

// ShipLastNameGTE applies the GTE predicate on the "ship_last_name" field.
func ShipLastNameGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipLastName), v))
	})
}

// ShipLastNameLT applies the LT predicate on the "ship_last_name" field.
func ShipLastNameLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipLastName), v))
	})
}

// ShipLastNameLTE applies the LTE predicate on the "ship_last_name" field.
func ShipLastNameLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipLastName), v))
	})
}

// ShipLastNameContains applies the Contains predicate on the "ship_last_name" field.
func ShipLastNameContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipLastName), v))
	})
}

// ShipLastNameHasPrefix applies the HasPrefix predicate on the "ship_last_name" field.
func ShipLastNameHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipLastName), v))
	})
}

// ShipLastNameHasSuffix applies the HasSuffix predicate on the "ship_last_name" field.
func ShipLastNameHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipLastName), v))
	})
}

// ShipLastNameEqualFold applies the EqualFold predicate on the "ship_last_name" field.
func ShipLastNameEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipLastName), v))
	})
}

// ShipLastNameContainsFold applies the ContainsFold predicate on the "ship_last_name" field.
func ShipLastNameContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipLastName), v))
	})
}

// ShipCompanyEQ applies the EQ predicate on the "ship_company" field.
func ShipCompanyEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipCompany), v))
	})
}

// ShipCompanyNEQ applies the NEQ predicate on the "ship_company" field.
func ShipCompanyNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipCompany), v))
	})
}

// ShipCompanyIn applies the In predicate on the "ship_company" field.
func ShipCompanyIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipCompany), v...))
	})
}

// ShipCompanyNotIn applies the NotIn predicate on the "ship_company" field.
func ShipCompanyNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipCompany), v...))
	})
}

// ShipCompanyGT applies the GT predicate on the "ship_company" field.
func ShipCompanyGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipCompany), v))
	})
}

// ShipCompanyGTE applies the GTE predicate on the "ship_company" field.
func ShipCompanyGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipCompany), v))
	})
}

// ShipCompanyLT applies the LT predicate on the "ship_company" field.
func ShipCompanyLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipCompany), v))
	})
}

// ShipCompanyLTE applies the LTE predicate on the "ship_company" field.
func ShipCompanyLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipCompany), v))
	})
}

// ShipCompanyContains applies the Contains predicate on the "ship_company" field.
func ShipCompanyContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipCompany), v))
	})
}

// ShipCompanyHasPrefix applies the HasPrefix predicate on the "ship_company" field.
func ShipCompanyHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipCompany), v))
	})
}

// ShipCompanyHasSuffix applies the HasSuffix predicate on the "ship_company" field.
func ShipCompanyHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipCompany), v))
	})
}

// ShipCompanyEqualFold applies the EqualFold predicate on the "ship_company" field.
func ShipCompanyEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipCompany), v))
	})
}

// ShipCompanyContainsFold applies the ContainsFold predicate on the "ship_company" field.
func ShipCompanyContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipCompany), v))
	})
}

// ShipStreet1EQ applies the EQ predicate on the "ship_street1" field.
func ShipStreet1EQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet1NEQ applies the NEQ predicate on the "ship_street1" field.
func ShipStreet1NEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet1In applies the In predicate on the "ship_street1" field.
func ShipStreet1In(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipStreet1), v...))
	})
}

// ShipStreet1NotIn applies the NotIn predicate on the "ship_street1" field.
func ShipStreet1NotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipStreet1), v...))
	})
}

// ShipStreet1GT applies the GT predicate on the "ship_street1" field.
func ShipStreet1GT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet1GTE applies the GTE predicate on the "ship_street1" field.
func ShipStreet1GTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet1LT applies the LT predicate on the "ship_street1" field.
func ShipStreet1LT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet1LTE applies the LTE predicate on the "ship_street1" field.
func ShipStreet1LTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet1Contains applies the Contains predicate on the "ship_street1" field.
func ShipStreet1Contains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet1HasPrefix applies the HasPrefix predicate on the "ship_street1" field.
func ShipStreet1HasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet1HasSuffix applies the HasSuffix predicate on the "ship_street1" field.
func ShipStreet1HasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet1EqualFold applies the EqualFold predicate on the "ship_street1" field.
func ShipStreet1EqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet1ContainsFold applies the ContainsFold predicate on the "ship_street1" field.
func ShipStreet1ContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipStreet1), v))
	})
}

// ShipStreet2EQ applies the EQ predicate on the "ship_street2" field.
func ShipStreet2EQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipStreet2), v))
	})
}

// ShipStreet2NEQ applies the NEQ predicate on the "ship_street2" field.
func ShipStreet2NEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipStreet2), v))
	})
}

// ShipStreet2In applies the In predicate on the "ship_street2" field.
func ShipStreet2In(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipStreet2), v...))
	})
}

// ShipStreet2NotIn applies the NotIn predicate on the "ship_street2" field.
func ShipStreet2NotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipStreet2), v...))
	})
}

// ShipStreet2GT applies the GT predicate on the "ship_street2" field.
func ShipStreet2GT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipStreet2), v))
	})
}

// ShipStreet2GTE applies the GTE predicate on the "ship_street2" field.
func ShipStreet2GTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipStreet2), v))
	})
}

// ShipStreet2LT applies the LT predicate on the "ship_street2" field.
func ShipStreet2LT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipStreet2), v))
	})
}

// ShipStreet2LTE applies the LTE predicate on the "ship_street2" field.
func ShipStreet2LTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipStreet2), v))
	})
}

// ShipStreet2Contains applies the Contains predicate on the "ship_street2" field.
func ShipStreet2Contains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipStreet2), v))
	})
}

// ShipStreet2HasPrefix applies the HasPrefix predicate on the "ship_street2" field.
func ShipStreet2HasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipStreet2), v))
	})
}

// ShipStreet2HasSuffix applies the HasSuffix predicate on the "ship_street2" field.
func ShipStreet2HasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipStreet2), v))
	})
}

// ShipStreet2EqualFold applies the EqualFold predicate on the "ship_street2" field.
func ShipStreet2EqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipStreet2), v))
	})
}

// ShipStreet2ContainsFold applies the ContainsFold predicate on the "ship_street2" field.
func ShipStreet2ContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipStreet2), v))
	})
}

// ShipCityEQ applies the EQ predicate on the "ship_city" field.
func ShipCityEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipCity), v))
	})
}

// ShipCityNEQ applies the NEQ predicate on the "ship_city" field.
func ShipCityNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipCity), v))
	})
}

// ShipCityIn applies the In predicate on the "ship_city" field.
func ShipCityIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipCity), v...))
	})
}

// ShipCityNotIn applies the NotIn predicate on the "ship_city" field.
func ShipCityNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipCity), v...))
	})
}

// ShipCityGT applies the GT predicate on the "ship_city" field.
func ShipCityGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipCity), v))
	})
}

// ShipCityGTE applies the GTE predicate on the "ship_city" field.
func ShipCityGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipCity), v))
	})
}

// ShipCityLT applies the LT predicate on the "ship_city" field.
func ShipCityLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipCity), v))
	})
}

// ShipCityLTE applies the LTE predicate on the "ship_city" field.
func ShipCityLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipCity), v))
	})
}

// ShipCityContains applies the Contains predicate on the "ship_city" field.
func ShipCityContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipCity), v))
	})
}

// ShipCityHasPrefix applies the HasPrefix predicate on the "ship_city" field.
func ShipCityHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipCity), v))
	})
}

// ShipCityHasSuffix applies the HasSuffix predicate on the "ship_city" field.
func ShipCityHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipCity), v))
	})
}

// ShipCityEqualFold applies the EqualFold predicate on the "ship_city" field.
func ShipCityEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipCity), v))
	})
}

// ShipCityContainsFold applies the ContainsFold predicate on the "ship_city" field.
func ShipCityContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipCity), v))
	})
}

// ShipStateEQ applies the EQ predicate on the "ship_state" field.
func ShipStateEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipState), v))
	})
}

// ShipStateNEQ applies the NEQ predicate on the "ship_state" field.
func ShipStateNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipState), v))
	})
}

// ShipStateIn applies the In predicate on the "ship_state" field.
func ShipStateIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipState), v...))
	})
}

// ShipStateNotIn applies the NotIn predicate on the "ship_state" field.
func ShipStateNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipState), v...))
	})
}

// ShipStateGT applies the GT predicate on the "ship_state" field.
func ShipStateGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipState), v))
	})
}

// ShipStateGTE applies the GTE predicate on the "ship_state" field.
func ShipStateGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipState), v))
	})
}

// ShipStateLT applies the LT predicate on the "ship_state" field.
func ShipStateLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipState), v))
	})
}

// ShipStateLTE applies the LTE predicate on the "ship_state" field.
func ShipStateLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipState), v))
	})
}

// ShipStateContains applies the Contains predicate on the "ship_state" field.
func ShipStateContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipState), v))
	})
}

// ShipStateHasPrefix applies the HasPrefix predicate on the "ship_state" field.
func ShipStateHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipState), v))
	})
}

// ShipStateHasSuffix applies the HasSuffix predicate on the "ship_state" field.
func ShipStateHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipState), v))
	})
}

// ShipStateEqualFold applies the EqualFold predicate on the "ship_state" field.
func ShipStateEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipState), v))
	})
}

// ShipStateContainsFold applies the ContainsFold predicate on the "ship_state" field.
func ShipStateContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipState), v))
	})
}

// ShipZipEQ applies the EQ predicate on the "ship_zip" field.
func ShipZipEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipZip), v))
	})
}

// ShipZipNEQ applies the NEQ predicate on the "ship_zip" field.
func ShipZipNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipZip), v))
	})
}

// ShipZipIn applies the In predicate on the "ship_zip" field.
func ShipZipIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipZip), v...))
	})
}

// ShipZipNotIn applies the NotIn predicate on the "ship_zip" field.
func ShipZipNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipZip), v...))
	})
}

// ShipZipGT applies the GT predicate on the "ship_zip" field.
func ShipZipGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipZip), v))
	})
}

// ShipZipGTE applies the GTE predicate on the "ship_zip" field.
func ShipZipGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipZip), v))
	})
}

// ShipZipLT applies the LT predicate on the "ship_zip" field.
func ShipZipLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipZip), v))
	})
}

// ShipZipLTE applies the LTE predicate on the "ship_zip" field.
func ShipZipLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipZip), v))
	})
}

// ShipZipContains applies the Contains predicate on the "ship_zip" field.
func ShipZipContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipZip), v))
	})
}

// ShipZipHasPrefix applies the HasPrefix predicate on the "ship_zip" field.
func ShipZipHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipZip), v))
	})
}

// ShipZipHasSuffix applies the HasSuffix predicate on the "ship_zip" field.
func ShipZipHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipZip), v))
	})
}

// ShipZipEqualFold applies the EqualFold predicate on the "ship_zip" field.
func ShipZipEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipZip), v))
	})
}

// ShipZipContainsFold applies the ContainsFold predicate on the "ship_zip" field.
func ShipZipContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipZip), v))
	})
}

// ShipCountryEQ applies the EQ predicate on the "ship_country" field.
func ShipCountryEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipCountry), v))
	})
}

// ShipCountryNEQ applies the NEQ predicate on the "ship_country" field.
func ShipCountryNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipCountry), v))
	})
}

// ShipCountryIn applies the In predicate on the "ship_country" field.
func ShipCountryIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipCountry), v...))
	})
}

// ShipCountryNotIn applies the NotIn predicate on the "ship_country" field.
func ShipCountryNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipCountry), v...))
	})
}

// ShipCountryGT applies the GT predicate on the "ship_country" field.
func ShipCountryGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipCountry), v))
	})
}

// ShipCountryGTE applies the GTE predicate on the "ship_country" field.
func ShipCountryGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipCountry), v))
	})
}

// ShipCountryLT applies the LT predicate on the "ship_country" field.
func ShipCountryLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipCountry), v))
	})
}

// ShipCountryLTE applies the LTE predicate on the "ship_country" field.
func ShipCountryLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipCountry), v))
	})
}

// ShipCountryContains applies the Contains predicate on the "ship_country" field.
func ShipCountryContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipCountry), v))
	})
}

// ShipCountryHasPrefix applies the HasPrefix predicate on the "ship_country" field.
func ShipCountryHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipCountry), v))
	})
}

// ShipCountryHasSuffix applies the HasSuffix predicate on the "ship_country" field.
func ShipCountryHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipCountry), v))
	})
}

// ShipCountryEqualFold applies the EqualFold predicate on the "ship_country" field.
func ShipCountryEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipCountry), v))
	})
}

// ShipCountryContainsFold applies the ContainsFold predicate on the "ship_country" field.
func ShipCountryContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipCountry), v))
	})
}

// ShipCountryCodeEQ applies the EQ predicate on the "ship_country_code" field.
func ShipCountryCodeEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipCountryCode), v))
	})
}

// ShipCountryCodeNEQ applies the NEQ predicate on the "ship_country_code" field.
func ShipCountryCodeNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipCountryCode), v))
	})
}

// ShipCountryCodeIn applies the In predicate on the "ship_country_code" field.
func ShipCountryCodeIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipCountryCode), v...))
	})
}

// ShipCountryCodeNotIn applies the NotIn predicate on the "ship_country_code" field.
func ShipCountryCodeNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipCountryCode), v...))
	})
}

// ShipCountryCodeGT applies the GT predicate on the "ship_country_code" field.
func ShipCountryCodeGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipCountryCode), v))
	})
}

// ShipCountryCodeGTE applies the GTE predicate on the "ship_country_code" field.
func ShipCountryCodeGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipCountryCode), v))
	})
}

// ShipCountryCodeLT applies the LT predicate on the "ship_country_code" field.
func ShipCountryCodeLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipCountryCode), v))
	})
}

// ShipCountryCodeLTE applies the LTE predicate on the "ship_country_code" field.
func ShipCountryCodeLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipCountryCode), v))
	})
}

// ShipCountryCodeContains applies the Contains predicate on the "ship_country_code" field.
func ShipCountryCodeContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipCountryCode), v))
	})
}

// ShipCountryCodeHasPrefix applies the HasPrefix predicate on the "ship_country_code" field.
func ShipCountryCodeHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipCountryCode), v))
	})
}

// ShipCountryCodeHasSuffix applies the HasSuffix predicate on the "ship_country_code" field.
func ShipCountryCodeHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipCountryCode), v))
	})
}

// ShipCountryCodeEqualFold applies the EqualFold predicate on the "ship_country_code" field.
func ShipCountryCodeEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipCountryCode), v))
	})
}

// ShipCountryCodeContainsFold applies the ContainsFold predicate on the "ship_country_code" field.
func ShipCountryCodeContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipCountryCode), v))
	})
}

// ShipPhoneEQ applies the EQ predicate on the "ship_phone" field.
func ShipPhoneEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipPhone), v))
	})
}

// ShipPhoneNEQ applies the NEQ predicate on the "ship_phone" field.
func ShipPhoneNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipPhone), v))
	})
}

// ShipPhoneIn applies the In predicate on the "ship_phone" field.
func ShipPhoneIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipPhone), v...))
	})
}

// ShipPhoneNotIn applies the NotIn predicate on the "ship_phone" field.
func ShipPhoneNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipPhone), v...))
	})
}

// ShipPhoneGT applies the GT predicate on the "ship_phone" field.
func ShipPhoneGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipPhone), v))
	})
}

// ShipPhoneGTE applies the GTE predicate on the "ship_phone" field.
func ShipPhoneGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipPhone), v))
	})
}

// ShipPhoneLT applies the LT predicate on the "ship_phone" field.
func ShipPhoneLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipPhone), v))
	})
}

// ShipPhoneLTE applies the LTE predicate on the "ship_phone" field.
func ShipPhoneLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipPhone), v))
	})
}

// ShipPhoneContains applies the Contains predicate on the "ship_phone" field.
func ShipPhoneContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipPhone), v))
	})
}

// ShipPhoneHasPrefix applies the HasPrefix predicate on the "ship_phone" field.
func ShipPhoneHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipPhone), v))
	})
}

// ShipPhoneHasSuffix applies the HasSuffix predicate on the "ship_phone" field.
func ShipPhoneHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipPhone), v))
	})
}

// ShipPhoneEqualFold applies the EqualFold predicate on the "ship_phone" field.
func ShipPhoneEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipPhone), v))
	})
}

// ShipPhoneContainsFold applies the ContainsFold predicate on the "ship_phone" field.
func ShipPhoneContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipPhone), v))
	})
}

// ShipFaxEQ applies the EQ predicate on the "ship_fax" field.
func ShipFaxEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipFax), v))
	})
}

// ShipFaxNEQ applies the NEQ predicate on the "ship_fax" field.
func ShipFaxNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipFax), v))
	})
}

// ShipFaxIn applies the In predicate on the "ship_fax" field.
func ShipFaxIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipFax), v...))
	})
}

// ShipFaxNotIn applies the NotIn predicate on the "ship_fax" field.
func ShipFaxNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipFax), v...))
	})
}

// ShipFaxGT applies the GT predicate on the "ship_fax" field.
func ShipFaxGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipFax), v))
	})
}

// ShipFaxGTE applies the GTE predicate on the "ship_fax" field.
func ShipFaxGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipFax), v))
	})
}

// ShipFaxLT applies the LT predicate on the "ship_fax" field.
func ShipFaxLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipFax), v))
	})
}

// ShipFaxLTE applies the LTE predicate on the "ship_fax" field.
func ShipFaxLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipFax), v))
	})
}

// ShipFaxContains applies the Contains predicate on the "ship_fax" field.
func ShipFaxContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipFax), v))
	})
}

// ShipFaxHasPrefix applies the HasPrefix predicate on the "ship_fax" field.
func ShipFaxHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipFax), v))
	})
}

// ShipFaxHasSuffix applies the HasSuffix predicate on the "ship_fax" field.
func ShipFaxHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipFax), v))
	})
}

// ShipFaxEqualFold applies the EqualFold predicate on the "ship_fax" field.
func ShipFaxEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipFax), v))
	})
}

// ShipFaxContainsFold applies the ContainsFold predicate on the "ship_fax" field.
func ShipFaxContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipFax), v))
	})
}

// ShipRemarkEQ applies the EQ predicate on the "ship_remark" field.
func ShipRemarkEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipRemark), v))
	})
}

// ShipRemarkNEQ applies the NEQ predicate on the "ship_remark" field.
func ShipRemarkNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipRemark), v))
	})
}

// ShipRemarkIn applies the In predicate on the "ship_remark" field.
func ShipRemarkIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipRemark), v...))
	})
}

// ShipRemarkNotIn applies the NotIn predicate on the "ship_remark" field.
func ShipRemarkNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipRemark), v...))
	})
}

// ShipRemarkGT applies the GT predicate on the "ship_remark" field.
func ShipRemarkGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipRemark), v))
	})
}

// ShipRemarkGTE applies the GTE predicate on the "ship_remark" field.
func ShipRemarkGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipRemark), v))
	})
}

// ShipRemarkLT applies the LT predicate on the "ship_remark" field.
func ShipRemarkLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipRemark), v))
	})
}

// ShipRemarkLTE applies the LTE predicate on the "ship_remark" field.
func ShipRemarkLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipRemark), v))
	})
}

// ShipRemarkContains applies the Contains predicate on the "ship_remark" field.
func ShipRemarkContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipRemark), v))
	})
}

// ShipRemarkHasPrefix applies the HasPrefix predicate on the "ship_remark" field.
func ShipRemarkHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipRemark), v))
	})
}

// ShipRemarkHasSuffix applies the HasSuffix predicate on the "ship_remark" field.
func ShipRemarkHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipRemark), v))
	})
}

// ShipRemarkEqualFold applies the EqualFold predicate on the "ship_remark" field.
func ShipRemarkEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipRemark), v))
	})
}

// ShipRemarkContainsFold applies the ContainsFold predicate on the "ship_remark" field.
func ShipRemarkContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipRemark), v))
	})
}

// ShipHouseEQ applies the EQ predicate on the "ship_house" field.
func ShipHouseEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipHouse), v))
	})
}

// ShipHouseNEQ applies the NEQ predicate on the "ship_house" field.
func ShipHouseNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipHouse), v))
	})
}

// ShipHouseIn applies the In predicate on the "ship_house" field.
func ShipHouseIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipHouse), v...))
	})
}

// ShipHouseNotIn applies the NotIn predicate on the "ship_house" field.
func ShipHouseNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipHouse), v...))
	})
}

// ShipHouseGT applies the GT predicate on the "ship_house" field.
func ShipHouseGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipHouse), v))
	})
}

// ShipHouseGTE applies the GTE predicate on the "ship_house" field.
func ShipHouseGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipHouse), v))
	})
}

// ShipHouseLT applies the LT predicate on the "ship_house" field.
func ShipHouseLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipHouse), v))
	})
}

// ShipHouseLTE applies the LTE predicate on the "ship_house" field.
func ShipHouseLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipHouse), v))
	})
}

// ShipHouseContains applies the Contains predicate on the "ship_house" field.
func ShipHouseContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipHouse), v))
	})
}

// ShipHouseHasPrefix applies the HasPrefix predicate on the "ship_house" field.
func ShipHouseHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipHouse), v))
	})
}

// ShipHouseHasSuffix applies the HasSuffix predicate on the "ship_house" field.
func ShipHouseHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipHouse), v))
	})
}

// ShipHouseEqualFold applies the EqualFold predicate on the "ship_house" field.
func ShipHouseEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipHouse), v))
	})
}

// ShipHouseContainsFold applies the ContainsFold predicate on the "ship_house" field.
func ShipHouseContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipHouse), v))
	})
}

// ShipCertificateCodeEQ applies the EQ predicate on the "ship_certificate_code" field.
func ShipCertificateCodeEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipCertificateCode), v))
	})
}

// ShipCertificateCodeNEQ applies the NEQ predicate on the "ship_certificate_code" field.
func ShipCertificateCodeNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipCertificateCode), v))
	})
}

// ShipCertificateCodeIn applies the In predicate on the "ship_certificate_code" field.
func ShipCertificateCodeIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipCertificateCode), v...))
	})
}

// ShipCertificateCodeNotIn applies the NotIn predicate on the "ship_certificate_code" field.
func ShipCertificateCodeNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipCertificateCode), v...))
	})
}

// ShipCertificateCodeGT applies the GT predicate on the "ship_certificate_code" field.
func ShipCertificateCodeGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipCertificateCode), v))
	})
}

// ShipCertificateCodeGTE applies the GTE predicate on the "ship_certificate_code" field.
func ShipCertificateCodeGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipCertificateCode), v))
	})
}

// ShipCertificateCodeLT applies the LT predicate on the "ship_certificate_code" field.
func ShipCertificateCodeLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipCertificateCode), v))
	})
}

// ShipCertificateCodeLTE applies the LTE predicate on the "ship_certificate_code" field.
func ShipCertificateCodeLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipCertificateCode), v))
	})
}

// ShipCertificateCodeContains applies the Contains predicate on the "ship_certificate_code" field.
func ShipCertificateCodeContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShipCertificateCode), v))
	})
}

// ShipCertificateCodeHasPrefix applies the HasPrefix predicate on the "ship_certificate_code" field.
func ShipCertificateCodeHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShipCertificateCode), v))
	})
}

// ShipCertificateCodeHasSuffix applies the HasSuffix predicate on the "ship_certificate_code" field.
func ShipCertificateCodeHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShipCertificateCode), v))
	})
}

// ShipCertificateCodeEqualFold applies the EqualFold predicate on the "ship_certificate_code" field.
func ShipCertificateCodeEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShipCertificateCode), v))
	})
}

// ShipCertificateCodeContainsFold applies the ContainsFold predicate on the "ship_certificate_code" field.
func ShipCertificateCodeContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShipCertificateCode), v))
	})
}

// OrderUserEmailEQ applies the EQ predicate on the "order_user_email" field.
func OrderUserEmailEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderUserEmail), v))
	})
}

// OrderUserEmailNEQ applies the NEQ predicate on the "order_user_email" field.
func OrderUserEmailNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderUserEmail), v))
	})
}

// OrderUserEmailIn applies the In predicate on the "order_user_email" field.
func OrderUserEmailIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderUserEmail), v...))
	})
}

// OrderUserEmailNotIn applies the NotIn predicate on the "order_user_email" field.
func OrderUserEmailNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderUserEmail), v...))
	})
}

// OrderUserEmailGT applies the GT predicate on the "order_user_email" field.
func OrderUserEmailGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderUserEmail), v))
	})
}

// OrderUserEmailGTE applies the GTE predicate on the "order_user_email" field.
func OrderUserEmailGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderUserEmail), v))
	})
}

// OrderUserEmailLT applies the LT predicate on the "order_user_email" field.
func OrderUserEmailLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderUserEmail), v))
	})
}

// OrderUserEmailLTE applies the LTE predicate on the "order_user_email" field.
func OrderUserEmailLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderUserEmail), v))
	})
}

// OrderUserEmailContains applies the Contains predicate on the "order_user_email" field.
func OrderUserEmailContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderUserEmail), v))
	})
}

// OrderUserEmailHasPrefix applies the HasPrefix predicate on the "order_user_email" field.
func OrderUserEmailHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderUserEmail), v))
	})
}

// OrderUserEmailHasSuffix applies the HasSuffix predicate on the "order_user_email" field.
func OrderUserEmailHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderUserEmail), v))
	})
}

// OrderUserEmailEqualFold applies the EqualFold predicate on the "order_user_email" field.
func OrderUserEmailEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderUserEmail), v))
	})
}

// OrderUserEmailContainsFold applies the ContainsFold predicate on the "order_user_email" field.
func OrderUserEmailContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderUserEmail), v))
	})
}

// OrdersUserIDEQ applies the EQ predicate on the "orders_user_id" field.
func OrdersUserIDEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrdersUserID), v))
	})
}

// OrdersUserIDNEQ applies the NEQ predicate on the "orders_user_id" field.
func OrdersUserIDNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrdersUserID), v))
	})
}

// OrdersUserIDIn applies the In predicate on the "orders_user_id" field.
func OrdersUserIDIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrdersUserID), v...))
	})
}

// OrdersUserIDNotIn applies the NotIn predicate on the "orders_user_id" field.
func OrdersUserIDNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrdersUserID), v...))
	})
}

// OrdersUserIDGT applies the GT predicate on the "orders_user_id" field.
func OrdersUserIDGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrdersUserID), v))
	})
}

// OrdersUserIDGTE applies the GTE predicate on the "orders_user_id" field.
func OrdersUserIDGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrdersUserID), v))
	})
}

// OrdersUserIDLT applies the LT predicate on the "orders_user_id" field.
func OrdersUserIDLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrdersUserID), v))
	})
}

// OrdersUserIDLTE applies the LTE predicate on the "orders_user_id" field.
func OrdersUserIDLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrdersUserID), v))
	})
}

// OrdersUserIDContains applies the Contains predicate on the "orders_user_id" field.
func OrdersUserIDContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrdersUserID), v))
	})
}

// OrdersUserIDHasPrefix applies the HasPrefix predicate on the "orders_user_id" field.
func OrdersUserIDHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrdersUserID), v))
	})
}

// OrdersUserIDHasSuffix applies the HasSuffix predicate on the "orders_user_id" field.
func OrdersUserIDHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrdersUserID), v))
	})
}

// OrdersUserIDEqualFold applies the EqualFold predicate on the "orders_user_id" field.
func OrdersUserIDEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrdersUserID), v))
	})
}

// OrdersUserIDContainsFold applies the ContainsFold predicate on the "orders_user_id" field.
func OrdersUserIDContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrdersUserID), v))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// CurrenciesIDEQ applies the EQ predicate on the "currencies_id" field.
func CurrenciesIDEQ(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrenciesID), v))
	})
}

// CurrenciesIDNEQ applies the NEQ predicate on the "currencies_id" field.
func CurrenciesIDNEQ(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrenciesID), v))
	})
}

// CurrenciesIDIn applies the In predicate on the "currencies_id" field.
func CurrenciesIDIn(vs ...int32) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrenciesID), v...))
	})
}

// CurrenciesIDNotIn applies the NotIn predicate on the "currencies_id" field.
func CurrenciesIDNotIn(vs ...int32) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrenciesID), v...))
	})
}

// CurrenciesIDGT applies the GT predicate on the "currencies_id" field.
func CurrenciesIDGT(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrenciesID), v))
	})
}

// CurrenciesIDGTE applies the GTE predicate on the "currencies_id" field.
func CurrenciesIDGTE(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrenciesID), v))
	})
}

// CurrenciesIDLT applies the LT predicate on the "currencies_id" field.
func CurrenciesIDLT(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrenciesID), v))
	})
}

// CurrenciesIDLTE applies the LTE predicate on the "currencies_id" field.
func CurrenciesIDLTE(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrenciesID), v))
	})
}

// CurrencyRateEQ applies the EQ predicate on the "currency_rate" field.
func CurrencyRateEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrencyRate), v))
	})
}

// CurrencyRateNEQ applies the NEQ predicate on the "currency_rate" field.
func CurrencyRateNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrencyRate), v))
	})
}

// CurrencyRateIn applies the In predicate on the "currency_rate" field.
func CurrencyRateIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrencyRate), v...))
	})
}

// CurrencyRateNotIn applies the NotIn predicate on the "currency_rate" field.
func CurrencyRateNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrencyRate), v...))
	})
}

// CurrencyRateGT applies the GT predicate on the "currency_rate" field.
func CurrencyRateGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrencyRate), v))
	})
}

// CurrencyRateGTE applies the GTE predicate on the "currency_rate" field.
func CurrencyRateGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrencyRate), v))
	})
}

// CurrencyRateLT applies the LT predicate on the "currency_rate" field.
func CurrencyRateLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrencyRate), v))
	})
}

// CurrencyRateLTE applies the LTE predicate on the "currency_rate" field.
func CurrencyRateLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrencyRate), v))
	})
}

// ShippingMethodEQ applies the EQ predicate on the "shipping_method" field.
func ShippingMethodEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodNEQ applies the NEQ predicate on the "shipping_method" field.
func ShippingMethodNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodIn applies the In predicate on the "shipping_method" field.
func ShippingMethodIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingMethod), v...))
	})
}

// ShippingMethodNotIn applies the NotIn predicate on the "shipping_method" field.
func ShippingMethodNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingMethod), v...))
	})
}

// ShippingMethodGT applies the GT predicate on the "shipping_method" field.
func ShippingMethodGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodGTE applies the GTE predicate on the "shipping_method" field.
func ShippingMethodGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodLT applies the LT predicate on the "shipping_method" field.
func ShippingMethodLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodLTE applies the LTE predicate on the "shipping_method" field.
func ShippingMethodLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodContains applies the Contains predicate on the "shipping_method" field.
func ShippingMethodContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodHasPrefix applies the HasPrefix predicate on the "shipping_method" field.
func ShippingMethodHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodHasSuffix applies the HasSuffix predicate on the "shipping_method" field.
func ShippingMethodHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodEqualFold applies the EqualFold predicate on the "shipping_method" field.
func ShippingMethodEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodContainsFold applies the ContainsFold predicate on the "shipping_method" field.
func ShippingMethodContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingMethod), v))
	})
}

// ShippingMethodOrigEQ applies the EQ predicate on the "shipping_method_orig" field.
func ShippingMethodOrigEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodOrigNEQ applies the NEQ predicate on the "shipping_method_orig" field.
func ShippingMethodOrigNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodOrigIn applies the In predicate on the "shipping_method_orig" field.
func ShippingMethodOrigIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingMethodOrig), v...))
	})
}

// ShippingMethodOrigNotIn applies the NotIn predicate on the "shipping_method_orig" field.
func ShippingMethodOrigNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingMethodOrig), v...))
	})
}

// ShippingMethodOrigGT applies the GT predicate on the "shipping_method_orig" field.
func ShippingMethodOrigGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodOrigGTE applies the GTE predicate on the "shipping_method_orig" field.
func ShippingMethodOrigGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodOrigLT applies the LT predicate on the "shipping_method_orig" field.
func ShippingMethodOrigLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodOrigLTE applies the LTE predicate on the "shipping_method_orig" field.
func ShippingMethodOrigLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodOrigContains applies the Contains predicate on the "shipping_method_orig" field.
func ShippingMethodOrigContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodOrigHasPrefix applies the HasPrefix predicate on the "shipping_method_orig" field.
func ShippingMethodOrigHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodOrigHasSuffix applies the HasSuffix predicate on the "shipping_method_orig" field.
func ShippingMethodOrigHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodOrigEqualFold applies the EqualFold predicate on the "shipping_method_orig" field.
func ShippingMethodOrigEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodOrigContainsFold applies the ContainsFold predicate on the "shipping_method_orig" field.
func ShippingMethodOrigContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingMethodOrig), v))
	})
}

// ShippingMethodNameEQ applies the EQ predicate on the "shipping_method_name" field.
func ShippingMethodNameEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameNEQ applies the NEQ predicate on the "shipping_method_name" field.
func ShippingMethodNameNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameIn applies the In predicate on the "shipping_method_name" field.
func ShippingMethodNameIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingMethodName), v...))
	})
}

// ShippingMethodNameNotIn applies the NotIn predicate on the "shipping_method_name" field.
func ShippingMethodNameNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingMethodName), v...))
	})
}

// ShippingMethodNameGT applies the GT predicate on the "shipping_method_name" field.
func ShippingMethodNameGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameGTE applies the GTE predicate on the "shipping_method_name" field.
func ShippingMethodNameGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameLT applies the LT predicate on the "shipping_method_name" field.
func ShippingMethodNameLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameLTE applies the LTE predicate on the "shipping_method_name" field.
func ShippingMethodNameLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameContains applies the Contains predicate on the "shipping_method_name" field.
func ShippingMethodNameContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameHasPrefix applies the HasPrefix predicate on the "shipping_method_name" field.
func ShippingMethodNameHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameHasSuffix applies the HasSuffix predicate on the "shipping_method_name" field.
func ShippingMethodNameHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameEqualFold applies the EqualFold predicate on the "shipping_method_name" field.
func ShippingMethodNameEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShippingMethodName), v))
	})
}

// ShippingMethodNameContainsFold applies the ContainsFold predicate on the "shipping_method_name" field.
func ShippingMethodNameContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShippingMethodName), v))
	})
}

// GrandTotalEQ applies the EQ predicate on the "grand_total" field.
func GrandTotalEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalNEQ applies the NEQ predicate on the "grand_total" field.
func GrandTotalNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalIn applies the In predicate on the "grand_total" field.
func GrandTotalIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGrandTotal), v...))
	})
}

// GrandTotalNotIn applies the NotIn predicate on the "grand_total" field.
func GrandTotalNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGrandTotal), v...))
	})
}

// GrandTotalGT applies the GT predicate on the "grand_total" field.
func GrandTotalGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalGTE applies the GTE predicate on the "grand_total" field.
func GrandTotalGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalLT applies the LT predicate on the "grand_total" field.
func GrandTotalLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGrandTotal), v))
	})
}

// GrandTotalLTE applies the LTE predicate on the "grand_total" field.
func GrandTotalLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGrandTotal), v))
	})
}

// TrackNumberEQ applies the EQ predicate on the "track_number" field.
func TrackNumberEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberNEQ applies the NEQ predicate on the "track_number" field.
func TrackNumberNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberIn applies the In predicate on the "track_number" field.
func TrackNumberIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrackNumber), v...))
	})
}

// TrackNumberNotIn applies the NotIn predicate on the "track_number" field.
func TrackNumberNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrackNumber), v...))
	})
}

// TrackNumberGT applies the GT predicate on the "track_number" field.
func TrackNumberGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberGTE applies the GTE predicate on the "track_number" field.
func TrackNumberGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberLT applies the LT predicate on the "track_number" field.
func TrackNumberLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberLTE applies the LTE predicate on the "track_number" field.
func TrackNumberLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberContains applies the Contains predicate on the "track_number" field.
func TrackNumberContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberHasPrefix applies the HasPrefix predicate on the "track_number" field.
func TrackNumberHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberHasSuffix applies the HasSuffix predicate on the "track_number" field.
func TrackNumberHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberEqualFold applies the EqualFold predicate on the "track_number" field.
func TrackNumberEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackNumber), v))
	})
}

// TrackNumberContainsFold applies the ContainsFold predicate on the "track_number" field.
func TrackNumberContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackNumber), v))
	})
}

// FollowNumberEQ applies the EQ predicate on the "follow_number" field.
func FollowNumberEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollowNumber), v))
	})
}

// FollowNumberNEQ applies the NEQ predicate on the "follow_number" field.
func FollowNumberNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFollowNumber), v))
	})
}

// FollowNumberIn applies the In predicate on the "follow_number" field.
func FollowNumberIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFollowNumber), v...))
	})
}

// FollowNumberNotIn applies the NotIn predicate on the "follow_number" field.
func FollowNumberNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFollowNumber), v...))
	})
}

// FollowNumberGT applies the GT predicate on the "follow_number" field.
func FollowNumberGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFollowNumber), v))
	})
}

// FollowNumberGTE applies the GTE predicate on the "follow_number" field.
func FollowNumberGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFollowNumber), v))
	})
}

// FollowNumberLT applies the LT predicate on the "follow_number" field.
func FollowNumberLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFollowNumber), v))
	})
}

// FollowNumberLTE applies the LTE predicate on the "follow_number" field.
func FollowNumberLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFollowNumber), v))
	})
}

// FollowNumberContains applies the Contains predicate on the "follow_number" field.
func FollowNumberContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFollowNumber), v))
	})
}

// FollowNumberHasPrefix applies the HasPrefix predicate on the "follow_number" field.
func FollowNumberHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFollowNumber), v))
	})
}

// FollowNumberHasSuffix applies the HasSuffix predicate on the "follow_number" field.
func FollowNumberHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFollowNumber), v))
	})
}

// FollowNumberEqualFold applies the EqualFold predicate on the "follow_number" field.
func FollowNumberEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFollowNumber), v))
	})
}

// FollowNumberContainsFold applies the ContainsFold predicate on the "follow_number" field.
func FollowNumberContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFollowNumber), v))
	})
}

// DatePaymentEQ applies the EQ predicate on the "date_payment" field.
func DatePaymentEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatePayment), v))
	})
}

// DatePaymentNEQ applies the NEQ predicate on the "date_payment" field.
func DatePaymentNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDatePayment), v))
	})
}

// DatePaymentIn applies the In predicate on the "date_payment" field.
func DatePaymentIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDatePayment), v...))
	})
}

// DatePaymentNotIn applies the NotIn predicate on the "date_payment" field.
func DatePaymentNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDatePayment), v...))
	})
}

// DatePaymentGT applies the GT predicate on the "date_payment" field.
func DatePaymentGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDatePayment), v))
	})
}

// DatePaymentGTE applies the GTE predicate on the "date_payment" field.
func DatePaymentGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDatePayment), v))
	})
}

// DatePaymentLT applies the LT predicate on the "date_payment" field.
func DatePaymentLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDatePayment), v))
	})
}

// DatePaymentLTE applies the LTE predicate on the "date_payment" field.
func DatePaymentLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDatePayment), v))
	})
}

// TransactionNumberEQ applies the EQ predicate on the "transaction_number" field.
func TransactionNumberEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberNEQ applies the NEQ predicate on the "transaction_number" field.
func TransactionNumberNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberIn applies the In predicate on the "transaction_number" field.
func TransactionNumberIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionNumber), v...))
	})
}

// TransactionNumberNotIn applies the NotIn predicate on the "transaction_number" field.
func TransactionNumberNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionNumber), v...))
	})
}

// TransactionNumberGT applies the GT predicate on the "transaction_number" field.
func TransactionNumberGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberGTE applies the GTE predicate on the "transaction_number" field.
func TransactionNumberGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberLT applies the LT predicate on the "transaction_number" field.
func TransactionNumberLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberLTE applies the LTE predicate on the "transaction_number" field.
func TransactionNumberLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberContains applies the Contains predicate on the "transaction_number" field.
func TransactionNumberContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberHasPrefix applies the HasPrefix predicate on the "transaction_number" field.
func TransactionNumberHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberHasSuffix applies the HasSuffix predicate on the "transaction_number" field.
func TransactionNumberHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberEqualFold applies the EqualFold predicate on the "transaction_number" field.
func TransactionNumberEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberContainsFold applies the ContainsFold predicate on the "transaction_number" field.
func TransactionNumberContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionNumber), v))
	})
}

// TransactionFeeEQ applies the EQ predicate on the "transaction_fee" field.
func TransactionFeeEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionFee), v))
	})
}

// TransactionFeeNEQ applies the NEQ predicate on the "transaction_fee" field.
func TransactionFeeNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionFee), v))
	})
}

// TransactionFeeIn applies the In predicate on the "transaction_fee" field.
func TransactionFeeIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionFee), v...))
	})
}

// TransactionFeeNotIn applies the NotIn predicate on the "transaction_fee" field.
func TransactionFeeNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionFee), v...))
	})
}

// TransactionFeeGT applies the GT predicate on the "transaction_fee" field.
func TransactionFeeGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionFee), v))
	})
}

// TransactionFeeGTE applies the GTE predicate on the "transaction_fee" field.
func TransactionFeeGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionFee), v))
	})
}

// TransactionFeeLT applies the LT predicate on the "transaction_fee" field.
func TransactionFeeLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionFee), v))
	})
}

// TransactionFeeLTE applies the LTE predicate on the "transaction_fee" field.
func TransactionFeeLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionFee), v))
	})
}

// UpdateTrackTimeEQ applies the EQ predicate on the "update_track_time" field.
func UpdateTrackTimeEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTrackTime), v))
	})
}

// UpdateTrackTimeNEQ applies the NEQ predicate on the "update_track_time" field.
func UpdateTrackTimeNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTrackTime), v))
	})
}

// UpdateTrackTimeIn applies the In predicate on the "update_track_time" field.
func UpdateTrackTimeIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTrackTime), v...))
	})
}

// UpdateTrackTimeNotIn applies the NotIn predicate on the "update_track_time" field.
func UpdateTrackTimeNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTrackTime), v...))
	})
}

// UpdateTrackTimeGT applies the GT predicate on the "update_track_time" field.
func UpdateTrackTimeGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTrackTime), v))
	})
}

// UpdateTrackTimeGTE applies the GTE predicate on the "update_track_time" field.
func UpdateTrackTimeGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTrackTime), v))
	})
}

// UpdateTrackTimeLT applies the LT predicate on the "update_track_time" field.
func UpdateTrackTimeLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTrackTime), v))
	})
}

// UpdateTrackTimeLTE applies the LTE predicate on the "update_track_time" field.
func UpdateTrackTimeLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTrackTime), v))
	})
}

// UpdateFollowTimeEQ applies the EQ predicate on the "update_follow_time" field.
func UpdateFollowTimeEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateFollowTime), v))
	})
}

// UpdateFollowTimeNEQ applies the NEQ predicate on the "update_follow_time" field.
func UpdateFollowTimeNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateFollowTime), v))
	})
}

// UpdateFollowTimeIn applies the In predicate on the "update_follow_time" field.
func UpdateFollowTimeIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateFollowTime), v...))
	})
}

// UpdateFollowTimeNotIn applies the NotIn predicate on the "update_follow_time" field.
func UpdateFollowTimeNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateFollowTime), v...))
	})
}

// UpdateFollowTimeGT applies the GT predicate on the "update_follow_time" field.
func UpdateFollowTimeGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateFollowTime), v))
	})
}

// UpdateFollowTimeGTE applies the GTE predicate on the "update_follow_time" field.
func UpdateFollowTimeGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateFollowTime), v))
	})
}

// UpdateFollowTimeLT applies the LT predicate on the "update_follow_time" field.
func UpdateFollowTimeLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateFollowTime), v))
	})
}

// UpdateFollowTimeLTE applies the LTE predicate on the "update_follow_time" field.
func UpdateFollowTimeLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateFollowTime), v))
	})
}

// ShippingCostEQ applies the EQ predicate on the "shipping_cost" field.
func ShippingCostEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCost), v))
	})
}

// ShippingCostNEQ applies the NEQ predicate on the "shipping_cost" field.
func ShippingCostNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCost), v))
	})
}

// ShippingCostIn applies the In predicate on the "shipping_cost" field.
func ShippingCostIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCost), v...))
	})
}

// ShippingCostNotIn applies the NotIn predicate on the "shipping_cost" field.
func ShippingCostNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCost), v...))
	})
}

// ShippingCostGT applies the GT predicate on the "shipping_cost" field.
func ShippingCostGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCost), v))
	})
}

// ShippingCostGTE applies the GTE predicate on the "shipping_cost" field.
func ShippingCostGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCost), v))
	})
}

// ShippingCostLT applies the LT predicate on the "shipping_cost" field.
func ShippingCostLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCost), v))
	})
}

// ShippingCostLTE applies the LTE predicate on the "shipping_cost" field.
func ShippingCostLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCost), v))
	})
}

// ShippingCostExtEQ applies the EQ predicate on the "shipping_cost_ext" field.
func ShippingCostExtEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCostExt), v))
	})
}

// ShippingCostExtNEQ applies the NEQ predicate on the "shipping_cost_ext" field.
func ShippingCostExtNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCostExt), v))
	})
}

// ShippingCostExtIn applies the In predicate on the "shipping_cost_ext" field.
func ShippingCostExtIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCostExt), v...))
	})
}

// ShippingCostExtNotIn applies the NotIn predicate on the "shipping_cost_ext" field.
func ShippingCostExtNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCostExt), v...))
	})
}

// ShippingCostExtGT applies the GT predicate on the "shipping_cost_ext" field.
func ShippingCostExtGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCostExt), v))
	})
}

// ShippingCostExtGTE applies the GTE predicate on the "shipping_cost_ext" field.
func ShippingCostExtGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCostExt), v))
	})
}

// ShippingCostExtLT applies the LT predicate on the "shipping_cost_ext" field.
func ShippingCostExtLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCostExt), v))
	})
}

// ShippingCostExtLTE applies the LTE predicate on the "shipping_cost_ext" field.
func ShippingCostExtLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCostExt), v))
	})
}

// TaxesNumberEQ applies the EQ predicate on the "taxes_number" field.
func TaxesNumberEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxesNumber), v))
	})
}

// TaxesNumberNEQ applies the NEQ predicate on the "taxes_number" field.
func TaxesNumberNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxesNumber), v))
	})
}

// TaxesNumberIn applies the In predicate on the "taxes_number" field.
func TaxesNumberIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaxesNumber), v...))
	})
}

// TaxesNumberNotIn applies the NotIn predicate on the "taxes_number" field.
func TaxesNumberNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaxesNumber), v...))
	})
}

// TaxesNumberGT applies the GT predicate on the "taxes_number" field.
func TaxesNumberGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxesNumber), v))
	})
}

// TaxesNumberGTE applies the GTE predicate on the "taxes_number" field.
func TaxesNumberGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxesNumber), v))
	})
}

// TaxesNumberLT applies the LT predicate on the "taxes_number" field.
func TaxesNumberLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxesNumber), v))
	})
}

// TaxesNumberLTE applies the LTE predicate on the "taxes_number" field.
func TaxesNumberLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxesNumber), v))
	})
}

// TaxesNumberContains applies the Contains predicate on the "taxes_number" field.
func TaxesNumberContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaxesNumber), v))
	})
}

// TaxesNumberHasPrefix applies the HasPrefix predicate on the "taxes_number" field.
func TaxesNumberHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaxesNumber), v))
	})
}

// TaxesNumberHasSuffix applies the HasSuffix predicate on the "taxes_number" field.
func TaxesNumberHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaxesNumber), v))
	})
}

// TaxesNumberEqualFold applies the EqualFold predicate on the "taxes_number" field.
func TaxesNumberEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaxesNumber), v))
	})
}

// TaxesNumberContainsFold applies the ContainsFold predicate on the "taxes_number" field.
func TaxesNumberContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaxesNumber), v))
	})
}

// TaxEQ applies the EQ predicate on the "tax" field.
func TaxEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTax), v))
	})
}

// TaxNEQ applies the NEQ predicate on the "tax" field.
func TaxNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTax), v))
	})
}

// TaxIn applies the In predicate on the "tax" field.
func TaxIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTax), v...))
	})
}

// TaxNotIn applies the NotIn predicate on the "tax" field.
func TaxNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTax), v...))
	})
}

// TaxGT applies the GT predicate on the "tax" field.
func TaxGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTax), v))
	})
}

// TaxGTE applies the GTE predicate on the "tax" field.
func TaxGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTax), v))
	})
}

// TaxLT applies the LT predicate on the "tax" field.
func TaxLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTax), v))
	})
}

// TaxLTE applies the LTE predicate on the "tax" field.
func TaxLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTax), v))
	})
}

// OrderDiscountEQ applies the EQ predicate on the "order_discount" field.
func OrderDiscountEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderDiscount), v))
	})
}

// OrderDiscountNEQ applies the NEQ predicate on the "order_discount" field.
func OrderDiscountNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderDiscount), v))
	})
}

// OrderDiscountIn applies the In predicate on the "order_discount" field.
func OrderDiscountIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderDiscount), v...))
	})
}

// OrderDiscountNotIn applies the NotIn predicate on the "order_discount" field.
func OrderDiscountNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderDiscount), v...))
	})
}

// OrderDiscountGT applies the GT predicate on the "order_discount" field.
func OrderDiscountGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderDiscount), v))
	})
}

// OrderDiscountGTE applies the GTE predicate on the "order_discount" field.
func OrderDiscountGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderDiscount), v))
	})
}

// OrderDiscountLT applies the LT predicate on the "order_discount" field.
func OrderDiscountLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderDiscount), v))
	})
}

// OrderDiscountLTE applies the LTE predicate on the "order_discount" field.
func OrderDiscountLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderDiscount), v))
	})
}

// InsuranceEQ applies the EQ predicate on the "insurance" field.
func InsuranceEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInsurance), v))
	})
}

// InsuranceNEQ applies the NEQ predicate on the "insurance" field.
func InsuranceNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInsurance), v))
	})
}

// InsuranceIn applies the In predicate on the "insurance" field.
func InsuranceIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInsurance), v...))
	})
}

// InsuranceNotIn applies the NotIn predicate on the "insurance" field.
func InsuranceNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInsurance), v...))
	})
}

// InsuranceGT applies the GT predicate on the "insurance" field.
func InsuranceGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInsurance), v))
	})
}

// InsuranceGTE applies the GTE predicate on the "insurance" field.
func InsuranceGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInsurance), v))
	})
}

// InsuranceLT applies the LT predicate on the "insurance" field.
func InsuranceLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInsurance), v))
	})
}

// InsuranceLTE applies the LTE predicate on the "insurance" field.
func InsuranceLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInsurance), v))
	})
}

// OrderWeightEQ applies the EQ predicate on the "order_weight" field.
func OrderWeightEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderWeight), v))
	})
}

// OrderWeightNEQ applies the NEQ predicate on the "order_weight" field.
func OrderWeightNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderWeight), v))
	})
}

// OrderWeightIn applies the In predicate on the "order_weight" field.
func OrderWeightIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderWeight), v...))
	})
}

// OrderWeightNotIn applies the NotIn predicate on the "order_weight" field.
func OrderWeightNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderWeight), v...))
	})
}

// OrderWeightGT applies the GT predicate on the "order_weight" field.
func OrderWeightGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderWeight), v))
	})
}

// OrderWeightGTE applies the GTE predicate on the "order_weight" field.
func OrderWeightGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderWeight), v))
	})
}

// OrderWeightLT applies the LT predicate on the "order_weight" field.
func OrderWeightLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderWeight), v))
	})
}

// OrderWeightLTE applies the LTE predicate on the "order_weight" field.
func OrderWeightLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderWeight), v))
	})
}

// OrderCretateTypeEQ applies the EQ predicate on the "order_cretate_type" field.
func OrderCretateTypeEQ(v OrderCretateType) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderCretateType), v))
	})
}

// OrderCretateTypeNEQ applies the NEQ predicate on the "order_cretate_type" field.
func OrderCretateTypeNEQ(v OrderCretateType) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderCretateType), v))
	})
}

// OrderCretateTypeIn applies the In predicate on the "order_cretate_type" field.
func OrderCretateTypeIn(vs ...OrderCretateType) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderCretateType), v...))
	})
}

// OrderCretateTypeNotIn applies the NotIn predicate on the "order_cretate_type" field.
func OrderCretateTypeNotIn(vs ...OrderCretateType) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderCretateType), v...))
	})
}

// OrderTypeEQ applies the EQ predicate on the "order_type" field.
func OrderTypeEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderType), v))
	})
}

// OrderTypeNEQ applies the NEQ predicate on the "order_type" field.
func OrderTypeNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderType), v))
	})
}

// OrderTypeIn applies the In predicate on the "order_type" field.
func OrderTypeIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderType), v...))
	})
}

// OrderTypeNotIn applies the NotIn predicate on the "order_type" field.
func OrderTypeNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderType), v...))
	})
}

// OrderTypeGT applies the GT predicate on the "order_type" field.
func OrderTypeGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderType), v))
	})
}

// OrderTypeGTE applies the GTE predicate on the "order_type" field.
func OrderTypeGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderType), v))
	})
}

// OrderTypeLT applies the LT predicate on the "order_type" field.
func OrderTypeLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderType), v))
	})
}

// OrderTypeLTE applies the LTE predicate on the "order_type" field.
func OrderTypeLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderType), v))
	})
}

// StoreCreatedAtEQ applies the EQ predicate on the "store_created_at" field.
func StoreCreatedAtEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreCreatedAt), v))
	})
}

// StoreCreatedAtNEQ applies the NEQ predicate on the "store_created_at" field.
func StoreCreatedAtNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreCreatedAt), v))
	})
}

// StoreCreatedAtIn applies the In predicate on the "store_created_at" field.
func StoreCreatedAtIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreCreatedAt), v...))
	})
}

// StoreCreatedAtNotIn applies the NotIn predicate on the "store_created_at" field.
func StoreCreatedAtNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreCreatedAt), v...))
	})
}

// StoreCreatedAtGT applies the GT predicate on the "store_created_at" field.
func StoreCreatedAtGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreCreatedAt), v))
	})
}

// StoreCreatedAtGTE applies the GTE predicate on the "store_created_at" field.
func StoreCreatedAtGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreCreatedAt), v))
	})
}

// StoreCreatedAtLT applies the LT predicate on the "store_created_at" field.
func StoreCreatedAtLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreCreatedAt), v))
	})
}

// StoreCreatedAtLTE applies the LTE predicate on the "store_created_at" field.
func StoreCreatedAtLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreCreatedAt), v))
	})
}

// SubOrdersCodeEQ applies the EQ predicate on the "sub_orders_code" field.
func SubOrdersCodeEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubOrdersCode), v))
	})
}

// SubOrdersCodeNEQ applies the NEQ predicate on the "sub_orders_code" field.
func SubOrdersCodeNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubOrdersCode), v))
	})
}

// SubOrdersCodeIn applies the In predicate on the "sub_orders_code" field.
func SubOrdersCodeIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubOrdersCode), v...))
	})
}

// SubOrdersCodeNotIn applies the NotIn predicate on the "sub_orders_code" field.
func SubOrdersCodeNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubOrdersCode), v...))
	})
}

// SubOrdersCodeGT applies the GT predicate on the "sub_orders_code" field.
func SubOrdersCodeGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubOrdersCode), v))
	})
}

// SubOrdersCodeGTE applies the GTE predicate on the "sub_orders_code" field.
func SubOrdersCodeGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubOrdersCode), v))
	})
}

// SubOrdersCodeLT applies the LT predicate on the "sub_orders_code" field.
func SubOrdersCodeLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubOrdersCode), v))
	})
}

// SubOrdersCodeLTE applies the LTE predicate on the "sub_orders_code" field.
func SubOrdersCodeLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubOrdersCode), v))
	})
}

// SubOrdersCodeContains applies the Contains predicate on the "sub_orders_code" field.
func SubOrdersCodeContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubOrdersCode), v))
	})
}

// SubOrdersCodeHasPrefix applies the HasPrefix predicate on the "sub_orders_code" field.
func SubOrdersCodeHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubOrdersCode), v))
	})
}

// SubOrdersCodeHasSuffix applies the HasSuffix predicate on the "sub_orders_code" field.
func SubOrdersCodeHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubOrdersCode), v))
	})
}

// SubOrdersCodeEqualFold applies the EqualFold predicate on the "sub_orders_code" field.
func SubOrdersCodeEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubOrdersCode), v))
	})
}

// SubOrdersCodeContainsFold applies the ContainsFold predicate on the "sub_orders_code" field.
func SubOrdersCodeContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubOrdersCode), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// WarehouseIDEQ applies the EQ predicate on the "warehouse_id" field.
func WarehouseIDEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDNEQ applies the NEQ predicate on the "warehouse_id" field.
func WarehouseIDNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDIn applies the In predicate on the "warehouse_id" field.
func WarehouseIDIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWarehouseID), v...))
	})
}

// WarehouseIDNotIn applies the NotIn predicate on the "warehouse_id" field.
func WarehouseIDNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWarehouseID), v...))
	})
}

// WarehouseIDGT applies the GT predicate on the "warehouse_id" field.
func WarehouseIDGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDGTE applies the GTE predicate on the "warehouse_id" field.
func WarehouseIDGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDLT applies the LT predicate on the "warehouse_id" field.
func WarehouseIDLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDLTE applies the LTE predicate on the "warehouse_id" field.
func WarehouseIDLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDContains applies the Contains predicate on the "warehouse_id" field.
func WarehouseIDContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDHasPrefix applies the HasPrefix predicate on the "warehouse_id" field.
func WarehouseIDHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDHasSuffix applies the HasSuffix predicate on the "warehouse_id" field.
func WarehouseIDHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDEqualFold applies the EqualFold predicate on the "warehouse_id" field.
func WarehouseIDEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWarehouseID), v))
	})
}

// WarehouseIDContainsFold applies the ContainsFold predicate on the "warehouse_id" field.
func WarehouseIDContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWarehouseID), v))
	})
}

// OrderListTypeEQ applies the EQ predicate on the "order_list_type" field.
func OrderListTypeEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderListType), v))
	})
}

// OrderListTypeNEQ applies the NEQ predicate on the "order_list_type" field.
func OrderListTypeNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderListType), v))
	})
}

// OrderListTypeIn applies the In predicate on the "order_list_type" field.
func OrderListTypeIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderListType), v...))
	})
}

// OrderListTypeNotIn applies the NotIn predicate on the "order_list_type" field.
func OrderListTypeNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderListType), v...))
	})
}

// OrderListTypeGT applies the GT predicate on the "order_list_type" field.
func OrderListTypeGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderListType), v))
	})
}

// OrderListTypeGTE applies the GTE predicate on the "order_list_type" field.
func OrderListTypeGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderListType), v))
	})
}

// OrderListTypeLT applies the LT predicate on the "order_list_type" field.
func OrderListTypeLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderListType), v))
	})
}

// OrderListTypeLTE applies the LTE predicate on the "order_list_type" field.
func OrderListTypeLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderListType), v))
	})
}

// OrderBatchNoEQ applies the EQ predicate on the "order_batch_no" field.
func OrderBatchNoEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderBatchNo), v))
	})
}

// OrderBatchNoNEQ applies the NEQ predicate on the "order_batch_no" field.
func OrderBatchNoNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderBatchNo), v))
	})
}

// OrderBatchNoIn applies the In predicate on the "order_batch_no" field.
func OrderBatchNoIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderBatchNo), v...))
	})
}

// OrderBatchNoNotIn applies the NotIn predicate on the "order_batch_no" field.
func OrderBatchNoNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderBatchNo), v...))
	})
}

// OrderBatchNoGT applies the GT predicate on the "order_batch_no" field.
func OrderBatchNoGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderBatchNo), v))
	})
}

// OrderBatchNoGTE applies the GTE predicate on the "order_batch_no" field.
func OrderBatchNoGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderBatchNo), v))
	})
}

// OrderBatchNoLT applies the LT predicate on the "order_batch_no" field.
func OrderBatchNoLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderBatchNo), v))
	})
}

// OrderBatchNoLTE applies the LTE predicate on the "order_batch_no" field.
func OrderBatchNoLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderBatchNo), v))
	})
}

// OrderBatchNoContains applies the Contains predicate on the "order_batch_no" field.
func OrderBatchNoContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderBatchNo), v))
	})
}

// OrderBatchNoHasPrefix applies the HasPrefix predicate on the "order_batch_no" field.
func OrderBatchNoHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderBatchNo), v))
	})
}

// OrderBatchNoHasSuffix applies the HasSuffix predicate on the "order_batch_no" field.
func OrderBatchNoHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderBatchNo), v))
	})
}

// OrderBatchNoEqualFold applies the EqualFold predicate on the "order_batch_no" field.
func OrderBatchNoEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderBatchNo), v))
	})
}

// OrderBatchNoContainsFold applies the ContainsFold predicate on the "order_batch_no" field.
func OrderBatchNoContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderBatchNo), v))
	})
}

// ShopIDEQ applies the EQ predicate on the "shop_id" field.
func ShopIDEQ(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopID), v))
	})
}

// ShopIDNEQ applies the NEQ predicate on the "shop_id" field.
func ShopIDNEQ(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShopID), v))
	})
}

// ShopIDIn applies the In predicate on the "shop_id" field.
func ShopIDIn(vs ...int32) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShopID), v...))
	})
}

// ShopIDNotIn applies the NotIn predicate on the "shop_id" field.
func ShopIDNotIn(vs ...int32) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShopID), v...))
	})
}

// ShopIDGT applies the GT predicate on the "shop_id" field.
func ShopIDGT(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShopID), v))
	})
}

// ShopIDGTE applies the GTE predicate on the "shop_id" field.
func ShopIDGTE(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShopID), v))
	})
}

// ShopIDLT applies the LT predicate on the "shop_id" field.
func ShopIDLT(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShopID), v))
	})
}

// ShopIDLTE applies the LTE predicate on the "shop_id" field.
func ShopIDLTE(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShopID), v))
	})
}

// SubtotalEQ applies the EQ predicate on the "subtotal" field.
func SubtotalEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtotal), v))
	})
}

// SubtotalNEQ applies the NEQ predicate on the "subtotal" field.
func SubtotalNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubtotal), v))
	})
}

// SubtotalIn applies the In predicate on the "subtotal" field.
func SubtotalIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubtotal), v...))
	})
}

// SubtotalNotIn applies the NotIn predicate on the "subtotal" field.
func SubtotalNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubtotal), v...))
	})
}

// SubtotalGT applies the GT predicate on the "subtotal" field.
func SubtotalGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubtotal), v))
	})
}

// SubtotalGTE applies the GTE predicate on the "subtotal" field.
func SubtotalGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubtotal), v))
	})
}

// SubtotalLT applies the LT predicate on the "subtotal" field.
func SubtotalLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubtotal), v))
	})
}

// SubtotalLTE applies the LTE predicate on the "subtotal" field.
func SubtotalLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubtotal), v))
	})
}

// ShippingFreeEQ applies the EQ predicate on the "shipping_free" field.
func ShippingFreeEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingFree), v))
	})
}

// ShippingFreeNEQ applies the NEQ predicate on the "shipping_free" field.
func ShippingFreeNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingFree), v))
	})
}

// ShippingFreeIn applies the In predicate on the "shipping_free" field.
func ShippingFreeIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingFree), v...))
	})
}

// ShippingFreeNotIn applies the NotIn predicate on the "shipping_free" field.
func ShippingFreeNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingFree), v...))
	})
}

// ShippingFreeGT applies the GT predicate on the "shipping_free" field.
func ShippingFreeGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingFree), v))
	})
}

// ShippingFreeGTE applies the GTE predicate on the "shipping_free" field.
func ShippingFreeGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingFree), v))
	})
}

// ShippingFreeLT applies the LT predicate on the "shipping_free" field.
func ShippingFreeLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingFree), v))
	})
}

// ShippingFreeLTE applies the LTE predicate on the "shipping_free" field.
func ShippingFreeLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingFree), v))
	})
}

// OrderCostEQ applies the EQ predicate on the "order_cost" field.
func OrderCostEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderCost), v))
	})
}

// OrderCostNEQ applies the NEQ predicate on the "order_cost" field.
func OrderCostNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderCost), v))
	})
}

// OrderCostIn applies the In predicate on the "order_cost" field.
func OrderCostIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderCost), v...))
	})
}

// OrderCostNotIn applies the NotIn predicate on the "order_cost" field.
func OrderCostNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderCost), v...))
	})
}

// OrderCostGT applies the GT predicate on the "order_cost" field.
func OrderCostGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderCost), v))
	})
}

// OrderCostGTE applies the GTE predicate on the "order_cost" field.
func OrderCostGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderCost), v))
	})
}

// OrderCostLT applies the LT predicate on the "order_cost" field.
func OrderCostLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderCost), v))
	})
}

// OrderCostLTE applies the LTE predicate on the "order_cost" field.
func OrderCostLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderCost), v))
	})
}

// OrderProfitEQ applies the EQ predicate on the "order_profit" field.
func OrderProfitEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderProfit), v))
	})
}

// OrderProfitNEQ applies the NEQ predicate on the "order_profit" field.
func OrderProfitNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderProfit), v))
	})
}

// OrderProfitIn applies the In predicate on the "order_profit" field.
func OrderProfitIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderProfit), v...))
	})
}

// OrderProfitNotIn applies the NotIn predicate on the "order_profit" field.
func OrderProfitNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderProfit), v...))
	})
}

// OrderProfitGT applies the GT predicate on the "order_profit" field.
func OrderProfitGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderProfit), v))
	})
}

// OrderProfitGTE applies the GTE predicate on the "order_profit" field.
func OrderProfitGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderProfit), v))
	})
}

// OrderProfitLT applies the LT predicate on the "order_profit" field.
func OrderProfitLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderProfit), v))
	})
}

// OrderProfitLTE applies the LTE predicate on the "order_profit" field.
func OrderProfitLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderProfit), v))
	})
}

// ShipDateEQ applies the EQ predicate on the "ship_date" field.
func ShipDateEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShipDate), v))
	})
}

// ShipDateNEQ applies the NEQ predicate on the "ship_date" field.
func ShipDateNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShipDate), v))
	})
}

// ShipDateIn applies the In predicate on the "ship_date" field.
func ShipDateIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShipDate), v...))
	})
}

// ShipDateNotIn applies the NotIn predicate on the "ship_date" field.
func ShipDateNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShipDate), v...))
	})
}

// ShipDateGT applies the GT predicate on the "ship_date" field.
func ShipDateGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShipDate), v))
	})
}

// ShipDateGTE applies the GTE predicate on the "ship_date" field.
func ShipDateGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShipDate), v))
	})
}

// ShipDateLT applies the LT predicate on the "ship_date" field.
func ShipDateLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShipDate), v))
	})
}

// ShipDateLTE applies the LTE predicate on the "ship_date" field.
func ShipDateLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShipDate), v))
	})
}

// CommissionEQ applies the EQ predicate on the "commission" field.
func CommissionEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommission), v))
	})
}

// CommissionNEQ applies the NEQ predicate on the "commission" field.
func CommissionNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommission), v))
	})
}

// CommissionIn applies the In predicate on the "commission" field.
func CommissionIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCommission), v...))
	})
}

// CommissionNotIn applies the NotIn predicate on the "commission" field.
func CommissionNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCommission), v...))
	})
}

// CommissionGT applies the GT predicate on the "commission" field.
func CommissionGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommission), v))
	})
}

// CommissionGTE applies the GTE predicate on the "commission" field.
func CommissionGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommission), v))
	})
}

// CommissionLT applies the LT predicate on the "commission" field.
func CommissionLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommission), v))
	})
}

// CommissionLTE applies the LTE predicate on the "commission" field.
func CommissionLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommission), v))
	})
}

// InterceptStateEQ applies the EQ predicate on the "intercept_state" field.
func InterceptStateEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterceptState), v))
	})
}

// InterceptStateNEQ applies the NEQ predicate on the "intercept_state" field.
func InterceptStateNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInterceptState), v))
	})
}

// InterceptStateIn applies the In predicate on the "intercept_state" field.
func InterceptStateIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInterceptState), v...))
	})
}

// InterceptStateNotIn applies the NotIn predicate on the "intercept_state" field.
func InterceptStateNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInterceptState), v...))
	})
}

// InterceptStateGT applies the GT predicate on the "intercept_state" field.
func InterceptStateGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInterceptState), v))
	})
}

// InterceptStateGTE applies the GTE predicate on the "intercept_state" field.
func InterceptStateGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInterceptState), v))
	})
}

// InterceptStateLT applies the LT predicate on the "intercept_state" field.
func InterceptStateLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInterceptState), v))
	})
}

// InterceptStateLTE applies the LTE predicate on the "intercept_state" field.
func InterceptStateLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInterceptState), v))
	})
}

// SendOrderTimeEQ applies the EQ predicate on the "send_order_time" field.
func SendOrderTimeEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendOrderTime), v))
	})
}

// SendOrderTimeNEQ applies the NEQ predicate on the "send_order_time" field.
func SendOrderTimeNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSendOrderTime), v))
	})
}

// SendOrderTimeIn applies the In predicate on the "send_order_time" field.
func SendOrderTimeIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSendOrderTime), v...))
	})
}

// SendOrderTimeNotIn applies the NotIn predicate on the "send_order_time" field.
func SendOrderTimeNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSendOrderTime), v...))
	})
}

// SendOrderTimeGT applies the GT predicate on the "send_order_time" field.
func SendOrderTimeGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSendOrderTime), v))
	})
}

// SendOrderTimeGTE applies the GTE predicate on the "send_order_time" field.
func SendOrderTimeGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSendOrderTime), v))
	})
}

// SendOrderTimeLT applies the LT predicate on the "send_order_time" field.
func SendOrderTimeLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSendOrderTime), v))
	})
}

// SendOrderTimeLTE applies the LTE predicate on the "send_order_time" field.
func SendOrderTimeLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSendOrderTime), v))
	})
}

// SendOrderUserEQ applies the EQ predicate on the "send_order_user" field.
func SendOrderUserEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSendOrderUser), v))
	})
}

// SendOrderUserNEQ applies the NEQ predicate on the "send_order_user" field.
func SendOrderUserNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSendOrderUser), v))
	})
}

// SendOrderUserIn applies the In predicate on the "send_order_user" field.
func SendOrderUserIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSendOrderUser), v...))
	})
}

// SendOrderUserNotIn applies the NotIn predicate on the "send_order_user" field.
func SendOrderUserNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSendOrderUser), v...))
	})
}

// SendOrderUserGT applies the GT predicate on the "send_order_user" field.
func SendOrderUserGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSendOrderUser), v))
	})
}

// SendOrderUserGTE applies the GTE predicate on the "send_order_user" field.
func SendOrderUserGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSendOrderUser), v))
	})
}

// SendOrderUserLT applies the LT predicate on the "send_order_user" field.
func SendOrderUserLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSendOrderUser), v))
	})
}

// SendOrderUserLTE applies the LTE predicate on the "send_order_user" field.
func SendOrderUserLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSendOrderUser), v))
	})
}

// SendOrderUserContains applies the Contains predicate on the "send_order_user" field.
func SendOrderUserContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSendOrderUser), v))
	})
}

// SendOrderUserHasPrefix applies the HasPrefix predicate on the "send_order_user" field.
func SendOrderUserHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSendOrderUser), v))
	})
}

// SendOrderUserHasSuffix applies the HasSuffix predicate on the "send_order_user" field.
func SendOrderUserHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSendOrderUser), v))
	})
}

// SendOrderUserEqualFold applies the EqualFold predicate on the "send_order_user" field.
func SendOrderUserEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSendOrderUser), v))
	})
}

// SendOrderUserContainsFold applies the ContainsFold predicate on the "send_order_user" field.
func SendOrderUserContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSendOrderUser), v))
	})
}

// ProviderTypeEQ applies the EQ predicate on the "provider_type" field.
func ProviderTypeEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProviderType), v))
	})
}

// ProviderTypeNEQ applies the NEQ predicate on the "provider_type" field.
func ProviderTypeNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProviderType), v))
	})
}

// ProviderTypeIn applies the In predicate on the "provider_type" field.
func ProviderTypeIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProviderType), v...))
	})
}

// ProviderTypeNotIn applies the NotIn predicate on the "provider_type" field.
func ProviderTypeNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProviderType), v...))
	})
}

// ProviderTypeGT applies the GT predicate on the "provider_type" field.
func ProviderTypeGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProviderType), v))
	})
}

// ProviderTypeGTE applies the GTE predicate on the "provider_type" field.
func ProviderTypeGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProviderType), v))
	})
}

// ProviderTypeLT applies the LT predicate on the "provider_type" field.
func ProviderTypeLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProviderType), v))
	})
}

// ProviderTypeLTE applies the LTE predicate on the "provider_type" field.
func ProviderTypeLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProviderType), v))
	})
}

// OrderPackCostEQ applies the EQ predicate on the "order_pack_cost" field.
func OrderPackCostEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderPackCost), v))
	})
}

// OrderPackCostNEQ applies the NEQ predicate on the "order_pack_cost" field.
func OrderPackCostNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderPackCost), v))
	})
}

// OrderPackCostIn applies the In predicate on the "order_pack_cost" field.
func OrderPackCostIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderPackCost), v...))
	})
}

// OrderPackCostNotIn applies the NotIn predicate on the "order_pack_cost" field.
func OrderPackCostNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderPackCost), v...))
	})
}

// OrderPackCostGT applies the GT predicate on the "order_pack_cost" field.
func OrderPackCostGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderPackCost), v))
	})
}

// OrderPackCostGTE applies the GTE predicate on the "order_pack_cost" field.
func OrderPackCostGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderPackCost), v))
	})
}

// OrderPackCostLT applies the LT predicate on the "order_pack_cost" field.
func OrderPackCostLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderPackCost), v))
	})
}

// OrderPackCostLTE applies the LTE predicate on the "order_pack_cost" field.
func OrderPackCostLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderPackCost), v))
	})
}

// PaymentFixCostEQ applies the EQ predicate on the "payment_fix_cost" field.
func PaymentFixCostEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentFixCost), v))
	})
}

// PaymentFixCostNEQ applies the NEQ predicate on the "payment_fix_cost" field.
func PaymentFixCostNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentFixCost), v))
	})
}

// PaymentFixCostIn applies the In predicate on the "payment_fix_cost" field.
func PaymentFixCostIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentFixCost), v...))
	})
}

// PaymentFixCostNotIn applies the NotIn predicate on the "payment_fix_cost" field.
func PaymentFixCostNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentFixCost), v...))
	})
}

// PaymentFixCostGT applies the GT predicate on the "payment_fix_cost" field.
func PaymentFixCostGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentFixCost), v))
	})
}

// PaymentFixCostGTE applies the GTE predicate on the "payment_fix_cost" field.
func PaymentFixCostGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentFixCost), v))
	})
}

// PaymentFixCostLT applies the LT predicate on the "payment_fix_cost" field.
func PaymentFixCostLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentFixCost), v))
	})
}

// PaymentFixCostLTE applies the LTE predicate on the "payment_fix_cost" field.
func PaymentFixCostLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentFixCost), v))
	})
}

// IsFbaBehalfEQ applies the EQ predicate on the "is_fba_behalf" field.
func IsFbaBehalfEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFbaBehalf), v))
	})
}

// IsFbaBehalfNEQ applies the NEQ predicate on the "is_fba_behalf" field.
func IsFbaBehalfNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsFbaBehalf), v))
	})
}

// IsFbaBehalfIn applies the In predicate on the "is_fba_behalf" field.
func IsFbaBehalfIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsFbaBehalf), v...))
	})
}

// IsFbaBehalfNotIn applies the NotIn predicate on the "is_fba_behalf" field.
func IsFbaBehalfNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsFbaBehalf), v...))
	})
}

// IsFbaBehalfGT applies the GT predicate on the "is_fba_behalf" field.
func IsFbaBehalfGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsFbaBehalf), v))
	})
}

// IsFbaBehalfGTE applies the GTE predicate on the "is_fba_behalf" field.
func IsFbaBehalfGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsFbaBehalf), v))
	})
}

// IsFbaBehalfLT applies the LT predicate on the "is_fba_behalf" field.
func IsFbaBehalfLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsFbaBehalf), v))
	})
}

// IsFbaBehalfLTE applies the LTE predicate on the "is_fba_behalf" field.
func IsFbaBehalfLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsFbaBehalf), v))
	})
}

// FulfillTypeEQ applies the EQ predicate on the "fulfill_type" field.
func FulfillTypeEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillType), v))
	})
}

// FulfillTypeNEQ applies the NEQ predicate on the "fulfill_type" field.
func FulfillTypeNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFulfillType), v))
	})
}

// FulfillTypeIn applies the In predicate on the "fulfill_type" field.
func FulfillTypeIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFulfillType), v...))
	})
}

// FulfillTypeNotIn applies the NotIn predicate on the "fulfill_type" field.
func FulfillTypeNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFulfillType), v...))
	})
}

// FulfillTypeGT applies the GT predicate on the "fulfill_type" field.
func FulfillTypeGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFulfillType), v))
	})
}

// FulfillTypeGTE applies the GTE predicate on the "fulfill_type" field.
func FulfillTypeGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFulfillType), v))
	})
}

// FulfillTypeLT applies the LT predicate on the "fulfill_type" field.
func FulfillTypeLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFulfillType), v))
	})
}

// FulfillTypeLTE applies the LTE predicate on the "fulfill_type" field.
func FulfillTypeLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFulfillType), v))
	})
}

// FulfillExceptionEQ applies the EQ predicate on the "fulfill_exception" field.
func FulfillExceptionEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFulfillException), v))
	})
}

// FulfillExceptionNEQ applies the NEQ predicate on the "fulfill_exception" field.
func FulfillExceptionNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFulfillException), v))
	})
}

// FulfillExceptionIn applies the In predicate on the "fulfill_exception" field.
func FulfillExceptionIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFulfillException), v...))
	})
}

// FulfillExceptionNotIn applies the NotIn predicate on the "fulfill_exception" field.
func FulfillExceptionNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFulfillException), v...))
	})
}

// FulfillExceptionGT applies the GT predicate on the "fulfill_exception" field.
func FulfillExceptionGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFulfillException), v))
	})
}

// FulfillExceptionGTE applies the GTE predicate on the "fulfill_exception" field.
func FulfillExceptionGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFulfillException), v))
	})
}

// FulfillExceptionLT applies the LT predicate on the "fulfill_exception" field.
func FulfillExceptionLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFulfillException), v))
	})
}

// FulfillExceptionLTE applies the LTE predicate on the "fulfill_exception" field.
func FulfillExceptionLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFulfillException), v))
	})
}

// IossNumberEQ applies the EQ predicate on the "ioss_number" field.
func IossNumberEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIossNumber), v))
	})
}

// IossNumberNEQ applies the NEQ predicate on the "ioss_number" field.
func IossNumberNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIossNumber), v))
	})
}

// IossNumberIn applies the In predicate on the "ioss_number" field.
func IossNumberIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIossNumber), v...))
	})
}

// IossNumberNotIn applies the NotIn predicate on the "ioss_number" field.
func IossNumberNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIossNumber), v...))
	})
}

// IossNumberGT applies the GT predicate on the "ioss_number" field.
func IossNumberGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIossNumber), v))
	})
}

// IossNumberGTE applies the GTE predicate on the "ioss_number" field.
func IossNumberGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIossNumber), v))
	})
}

// IossNumberLT applies the LT predicate on the "ioss_number" field.
func IossNumberLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIossNumber), v))
	})
}

// IossNumberLTE applies the LTE predicate on the "ioss_number" field.
func IossNumberLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIossNumber), v))
	})
}

// IossNumberContains applies the Contains predicate on the "ioss_number" field.
func IossNumberContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIossNumber), v))
	})
}

// IossNumberHasPrefix applies the HasPrefix predicate on the "ioss_number" field.
func IossNumberHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIossNumber), v))
	})
}

// IossNumberHasSuffix applies the HasSuffix predicate on the "ioss_number" field.
func IossNumberHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIossNumber), v))
	})
}

// IossNumberEqualFold applies the EqualFold predicate on the "ioss_number" field.
func IossNumberEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIossNumber), v))
	})
}

// IossNumberContainsFold applies the ContainsFold predicate on the "ioss_number" field.
func IossNumberContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIossNumber), v))
	})
}

// WarehouseShopIDEQ applies the EQ predicate on the "warehouse_shop_id" field.
func WarehouseShopIDEQ(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWarehouseShopID), v))
	})
}

// WarehouseShopIDNEQ applies the NEQ predicate on the "warehouse_shop_id" field.
func WarehouseShopIDNEQ(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWarehouseShopID), v))
	})
}

// WarehouseShopIDIn applies the In predicate on the "warehouse_shop_id" field.
func WarehouseShopIDIn(vs ...int32) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWarehouseShopID), v...))
	})
}

// WarehouseShopIDNotIn applies the NotIn predicate on the "warehouse_shop_id" field.
func WarehouseShopIDNotIn(vs ...int32) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWarehouseShopID), v...))
	})
}

// WarehouseShopIDGT applies the GT predicate on the "warehouse_shop_id" field.
func WarehouseShopIDGT(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWarehouseShopID), v))
	})
}

// WarehouseShopIDGTE applies the GTE predicate on the "warehouse_shop_id" field.
func WarehouseShopIDGTE(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWarehouseShopID), v))
	})
}

// WarehouseShopIDLT applies the LT predicate on the "warehouse_shop_id" field.
func WarehouseShopIDLT(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWarehouseShopID), v))
	})
}

// WarehouseShopIDLTE applies the LTE predicate on the "warehouse_shop_id" field.
func WarehouseShopIDLTE(v int32) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWarehouseShopID), v))
	})
}

// SalesRecordNumberEQ applies the EQ predicate on the "sales_record_number" field.
func SalesRecordNumberEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalesRecordNumber), v))
	})
}

// SalesRecordNumberNEQ applies the NEQ predicate on the "sales_record_number" field.
func SalesRecordNumberNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalesRecordNumber), v))
	})
}

// SalesRecordNumberIn applies the In predicate on the "sales_record_number" field.
func SalesRecordNumberIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSalesRecordNumber), v...))
	})
}

// SalesRecordNumberNotIn applies the NotIn predicate on the "sales_record_number" field.
func SalesRecordNumberNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSalesRecordNumber), v...))
	})
}

// SalesRecordNumberGT applies the GT predicate on the "sales_record_number" field.
func SalesRecordNumberGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSalesRecordNumber), v))
	})
}

// SalesRecordNumberGTE applies the GTE predicate on the "sales_record_number" field.
func SalesRecordNumberGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSalesRecordNumber), v))
	})
}

// SalesRecordNumberLT applies the LT predicate on the "sales_record_number" field.
func SalesRecordNumberLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSalesRecordNumber), v))
	})
}

// SalesRecordNumberLTE applies the LTE predicate on the "sales_record_number" field.
func SalesRecordNumberLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSalesRecordNumber), v))
	})
}

// SalesRecordNumberContains applies the Contains predicate on the "sales_record_number" field.
func SalesRecordNumberContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSalesRecordNumber), v))
	})
}

// SalesRecordNumberHasPrefix applies the HasPrefix predicate on the "sales_record_number" field.
func SalesRecordNumberHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSalesRecordNumber), v))
	})
}

// SalesRecordNumberHasSuffix applies the HasSuffix predicate on the "sales_record_number" field.
func SalesRecordNumberHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSalesRecordNumber), v))
	})
}

// SalesRecordNumberEqualFold applies the EqualFold predicate on the "sales_record_number" field.
func SalesRecordNumberEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSalesRecordNumber), v))
	})
}

// SalesRecordNumberContainsFold applies the ContainsFold predicate on the "sales_record_number" field.
func SalesRecordNumberContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSalesRecordNumber), v))
	})
}

// TicketCodeEQ applies the EQ predicate on the "ticket_code" field.
func TicketCodeEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTicketCode), v))
	})
}

// TicketCodeNEQ applies the NEQ predicate on the "ticket_code" field.
func TicketCodeNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTicketCode), v))
	})
}

// TicketCodeIn applies the In predicate on the "ticket_code" field.
func TicketCodeIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTicketCode), v...))
	})
}

// TicketCodeNotIn applies the NotIn predicate on the "ticket_code" field.
func TicketCodeNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTicketCode), v...))
	})
}

// TicketCodeGT applies the GT predicate on the "ticket_code" field.
func TicketCodeGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTicketCode), v))
	})
}

// TicketCodeGTE applies the GTE predicate on the "ticket_code" field.
func TicketCodeGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTicketCode), v))
	})
}

// TicketCodeLT applies the LT predicate on the "ticket_code" field.
func TicketCodeLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTicketCode), v))
	})
}

// TicketCodeLTE applies the LTE predicate on the "ticket_code" field.
func TicketCodeLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTicketCode), v))
	})
}

// TicketCodeContains applies the Contains predicate on the "ticket_code" field.
func TicketCodeContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTicketCode), v))
	})
}

// TicketCodeHasPrefix applies the HasPrefix predicate on the "ticket_code" field.
func TicketCodeHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTicketCode), v))
	})
}

// TicketCodeHasSuffix applies the HasSuffix predicate on the "ticket_code" field.
func TicketCodeHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTicketCode), v))
	})
}

// TicketCodeEqualFold applies the EqualFold predicate on the "ticket_code" field.
func TicketCodeEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTicketCode), v))
	})
}

// TicketCodeContainsFold applies the ContainsFold predicate on the "ticket_code" field.
func TicketCodeContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTicketCode), v))
	})
}

// OverseasWarehouseStatusEQ applies the EQ predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// OverseasWarehouseStatusNEQ applies the NEQ predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// OverseasWarehouseStatusIn applies the In predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOverseasWarehouseStatus), v...))
	})
}

// OverseasWarehouseStatusNotIn applies the NotIn predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOverseasWarehouseStatus), v...))
	})
}

// OverseasWarehouseStatusGT applies the GT predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// OverseasWarehouseStatusGTE applies the GTE predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// OverseasWarehouseStatusLT applies the LT predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// OverseasWarehouseStatusLTE applies the LTE predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// OverseasWarehouseStatusContains applies the Contains predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// OverseasWarehouseStatusHasPrefix applies the HasPrefix predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// OverseasWarehouseStatusHasSuffix applies the HasSuffix predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// OverseasWarehouseStatusEqualFold applies the EqualFold predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// OverseasWarehouseStatusContainsFold applies the ContainsFold predicate on the "overseas_warehouse_status" field.
func OverseasWarehouseStatusContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOverseasWarehouseStatus), v))
	})
}

// PayPalIDEQ applies the EQ predicate on the "pay_pal_id" field.
func PayPalIDEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayPalID), v))
	})
}

// PayPalIDNEQ applies the NEQ predicate on the "pay_pal_id" field.
func PayPalIDNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayPalID), v))
	})
}

// PayPalIDIn applies the In predicate on the "pay_pal_id" field.
func PayPalIDIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPayPalID), v...))
	})
}

// PayPalIDNotIn applies the NotIn predicate on the "pay_pal_id" field.
func PayPalIDNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPayPalID), v...))
	})
}

// PayPalIDGT applies the GT predicate on the "pay_pal_id" field.
func PayPalIDGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayPalID), v))
	})
}

// PayPalIDGTE applies the GTE predicate on the "pay_pal_id" field.
func PayPalIDGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayPalID), v))
	})
}

// PayPalIDLT applies the LT predicate on the "pay_pal_id" field.
func PayPalIDLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayPalID), v))
	})
}

// PayPalIDLTE applies the LTE predicate on the "pay_pal_id" field.
func PayPalIDLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayPalID), v))
	})
}

// PayPalIDContains applies the Contains predicate on the "pay_pal_id" field.
func PayPalIDContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPayPalID), v))
	})
}

// PayPalIDHasPrefix applies the HasPrefix predicate on the "pay_pal_id" field.
func PayPalIDHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPayPalID), v))
	})
}

// PayPalIDHasSuffix applies the HasSuffix predicate on the "pay_pal_id" field.
func PayPalIDHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPayPalID), v))
	})
}

// PayPalIDEqualFold applies the EqualFold predicate on the "pay_pal_id" field.
func PayPalIDEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPayPalID), v))
	})
}

// PayPalIDContainsFold applies the ContainsFold predicate on the "pay_pal_id" field.
func PayPalIDContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPayPalID), v))
	})
}

// IsUpdateEQ applies the EQ predicate on the "is_update" field.
func IsUpdateEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsUpdate), v))
	})
}

// IsUpdateNEQ applies the NEQ predicate on the "is_update" field.
func IsUpdateNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsUpdate), v))
	})
}

// IsUpdateIn applies the In predicate on the "is_update" field.
func IsUpdateIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsUpdate), v...))
	})
}

// IsUpdateNotIn applies the NotIn predicate on the "is_update" field.
func IsUpdateNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsUpdate), v...))
	})
}

// IsUpdateGT applies the GT predicate on the "is_update" field.
func IsUpdateGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsUpdate), v))
	})
}

// IsUpdateGTE applies the GTE predicate on the "is_update" field.
func IsUpdateGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsUpdate), v))
	})
}

// IsUpdateLT applies the LT predicate on the "is_update" field.
func IsUpdateLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsUpdate), v))
	})
}

// IsUpdateLTE applies the LTE predicate on the "is_update" field.
func IsUpdateLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsUpdate), v))
	})
}

// OrderSaleStateEQ applies the EQ predicate on the "order_sale_state" field.
func OrderSaleStateEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderSaleState), v))
	})
}

// OrderSaleStateNEQ applies the NEQ predicate on the "order_sale_state" field.
func OrderSaleStateNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderSaleState), v))
	})
}

// OrderSaleStateIn applies the In predicate on the "order_sale_state" field.
func OrderSaleStateIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderSaleState), v...))
	})
}

// OrderSaleStateNotIn applies the NotIn predicate on the "order_sale_state" field.
func OrderSaleStateNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderSaleState), v...))
	})
}

// OrderSaleStateGT applies the GT predicate on the "order_sale_state" field.
func OrderSaleStateGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderSaleState), v))
	})
}

// OrderSaleStateGTE applies the GTE predicate on the "order_sale_state" field.
func OrderSaleStateGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderSaleState), v))
	})
}

// OrderSaleStateLT applies the LT predicate on the "order_sale_state" field.
func OrderSaleStateLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderSaleState), v))
	})
}

// OrderSaleStateLTE applies the LTE predicate on the "order_sale_state" field.
func OrderSaleStateLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderSaleState), v))
	})
}

// ProductCostEQ applies the EQ predicate on the "product_cost" field.
func ProductCostEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductCost), v))
	})
}

// ProductCostNEQ applies the NEQ predicate on the "product_cost" field.
func ProductCostNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductCost), v))
	})
}

// ProductCostIn applies the In predicate on the "product_cost" field.
func ProductCostIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductCost), v...))
	})
}

// ProductCostNotIn applies the NotIn predicate on the "product_cost" field.
func ProductCostNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductCost), v...))
	})
}

// ProductCostGT applies the GT predicate on the "product_cost" field.
func ProductCostGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductCost), v))
	})
}

// ProductCostGTE applies the GTE predicate on the "product_cost" field.
func ProductCostGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductCost), v))
	})
}

// ProductCostLT applies the LT predicate on the "product_cost" field.
func ProductCostLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductCost), v))
	})
}

// ProductCostLTE applies the LTE predicate on the "product_cost" field.
func ProductCostLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductCost), v))
	})
}

// HeadCostEQ applies the EQ predicate on the "head_cost" field.
func HeadCostEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeadCost), v))
	})
}

// HeadCostNEQ applies the NEQ predicate on the "head_cost" field.
func HeadCostNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeadCost), v))
	})
}

// HeadCostIn applies the In predicate on the "head_cost" field.
func HeadCostIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeadCost), v...))
	})
}

// HeadCostNotIn applies the NotIn predicate on the "head_cost" field.
func HeadCostNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeadCost), v...))
	})
}

// HeadCostGT applies the GT predicate on the "head_cost" field.
func HeadCostGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeadCost), v))
	})
}

// HeadCostGTE applies the GTE predicate on the "head_cost" field.
func HeadCostGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeadCost), v))
	})
}

// HeadCostLT applies the LT predicate on the "head_cost" field.
func HeadCostLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeadCost), v))
	})
}

// HeadCostLTE applies the LTE predicate on the "head_cost" field.
func HeadCostLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeadCost), v))
	})
}

// CarrierCodeEQ applies the EQ predicate on the "carrier_code" field.
func CarrierCodeEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarrierCode), v))
	})
}

// CarrierCodeNEQ applies the NEQ predicate on the "carrier_code" field.
func CarrierCodeNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCarrierCode), v))
	})
}

// CarrierCodeIn applies the In predicate on the "carrier_code" field.
func CarrierCodeIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCarrierCode), v...))
	})
}

// CarrierCodeNotIn applies the NotIn predicate on the "carrier_code" field.
func CarrierCodeNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCarrierCode), v...))
	})
}

// CarrierCodeGT applies the GT predicate on the "carrier_code" field.
func CarrierCodeGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCarrierCode), v))
	})
}

// CarrierCodeGTE applies the GTE predicate on the "carrier_code" field.
func CarrierCodeGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCarrierCode), v))
	})
}

// CarrierCodeLT applies the LT predicate on the "carrier_code" field.
func CarrierCodeLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCarrierCode), v))
	})
}

// CarrierCodeLTE applies the LTE predicate on the "carrier_code" field.
func CarrierCodeLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCarrierCode), v))
	})
}

// CarrierCodeContains applies the Contains predicate on the "carrier_code" field.
func CarrierCodeContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCarrierCode), v))
	})
}

// CarrierCodeHasPrefix applies the HasPrefix predicate on the "carrier_code" field.
func CarrierCodeHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCarrierCode), v))
	})
}

// CarrierCodeHasSuffix applies the HasSuffix predicate on the "carrier_code" field.
func CarrierCodeHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCarrierCode), v))
	})
}

// CarrierCodeEqualFold applies the EqualFold predicate on the "carrier_code" field.
func CarrierCodeEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCarrierCode), v))
	})
}

// CarrierCodeContainsFold applies the ContainsFold predicate on the "carrier_code" field.
func CarrierCodeContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCarrierCode), v))
	})
}

// WithheldTaxEQ applies the EQ predicate on the "withheld_tax" field.
func WithheldTaxEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithheldTax), v))
	})
}

// WithheldTaxNEQ applies the NEQ predicate on the "withheld_tax" field.
func WithheldTaxNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWithheldTax), v))
	})
}

// WithheldTaxIn applies the In predicate on the "withheld_tax" field.
func WithheldTaxIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWithheldTax), v...))
	})
}

// WithheldTaxNotIn applies the NotIn predicate on the "withheld_tax" field.
func WithheldTaxNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWithheldTax), v...))
	})
}

// WithheldTaxGT applies the GT predicate on the "withheld_tax" field.
func WithheldTaxGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWithheldTax), v))
	})
}

// WithheldTaxGTE applies the GTE predicate on the "withheld_tax" field.
func WithheldTaxGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWithheldTax), v))
	})
}

// WithheldTaxLT applies the LT predicate on the "withheld_tax" field.
func WithheldTaxLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWithheldTax), v))
	})
}

// WithheldTaxLTE applies the LTE predicate on the "withheld_tax" field.
func WithheldTaxLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWithheldTax), v))
	})
}

// OtherFeeEQ applies the EQ predicate on the "other_fee" field.
func OtherFeeEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherFee), v))
	})
}

// OtherFeeNEQ applies the NEQ predicate on the "other_fee" field.
func OtherFeeNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOtherFee), v))
	})
}

// OtherFeeIn applies the In predicate on the "other_fee" field.
func OtherFeeIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOtherFee), v...))
	})
}

// OtherFeeNotIn applies the NotIn predicate on the "other_fee" field.
func OtherFeeNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOtherFee), v...))
	})
}

// OtherFeeGT applies the GT predicate on the "other_fee" field.
func OtherFeeGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOtherFee), v))
	})
}

// OtherFeeGTE applies the GTE predicate on the "other_fee" field.
func OtherFeeGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOtherFee), v))
	})
}

// OtherFeeLT applies the LT predicate on the "other_fee" field.
func OtherFeeLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOtherFee), v))
	})
}

// OtherFeeLTE applies the LTE predicate on the "other_fee" field.
func OtherFeeLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOtherFee), v))
	})
}

// EscrowTaxEQ applies the EQ predicate on the "escrow_tax" field.
func EscrowTaxEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEscrowTax), v))
	})
}

// EscrowTaxNEQ applies the NEQ predicate on the "escrow_tax" field.
func EscrowTaxNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEscrowTax), v))
	})
}

// EscrowTaxIn applies the In predicate on the "escrow_tax" field.
func EscrowTaxIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEscrowTax), v...))
	})
}

// EscrowTaxNotIn applies the NotIn predicate on the "escrow_tax" field.
func EscrowTaxNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEscrowTax), v...))
	})
}

// EscrowTaxGT applies the GT predicate on the "escrow_tax" field.
func EscrowTaxGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEscrowTax), v))
	})
}

// EscrowTaxGTE applies the GTE predicate on the "escrow_tax" field.
func EscrowTaxGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEscrowTax), v))
	})
}

// EscrowTaxLT applies the LT predicate on the "escrow_tax" field.
func EscrowTaxLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEscrowTax), v))
	})
}

// EscrowTaxLTE applies the LTE predicate on the "escrow_tax" field.
func EscrowTaxLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEscrowTax), v))
	})
}

// FinalProductVatTaxEQ applies the EQ predicate on the "final_product_vat_tax" field.
func FinalProductVatTaxEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinalProductVatTax), v))
	})
}

// FinalProductVatTaxNEQ applies the NEQ predicate on the "final_product_vat_tax" field.
func FinalProductVatTaxNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinalProductVatTax), v))
	})
}

// FinalProductVatTaxIn applies the In predicate on the "final_product_vat_tax" field.
func FinalProductVatTaxIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFinalProductVatTax), v...))
	})
}

// FinalProductVatTaxNotIn applies the NotIn predicate on the "final_product_vat_tax" field.
func FinalProductVatTaxNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFinalProductVatTax), v...))
	})
}

// FinalProductVatTaxGT applies the GT predicate on the "final_product_vat_tax" field.
func FinalProductVatTaxGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinalProductVatTax), v))
	})
}

// FinalProductVatTaxGTE applies the GTE predicate on the "final_product_vat_tax" field.
func FinalProductVatTaxGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinalProductVatTax), v))
	})
}

// FinalProductVatTaxLT applies the LT predicate on the "final_product_vat_tax" field.
func FinalProductVatTaxLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinalProductVatTax), v))
	})
}

// FinalProductVatTaxLTE applies the LTE predicate on the "final_product_vat_tax" field.
func FinalProductVatTaxLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinalProductVatTax), v))
	})
}

// FinalShippingVatTaxEQ applies the EQ predicate on the "final_shipping_vat_tax" field.
func FinalShippingVatTaxEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinalShippingVatTax), v))
	})
}

// FinalShippingVatTaxNEQ applies the NEQ predicate on the "final_shipping_vat_tax" field.
func FinalShippingVatTaxNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinalShippingVatTax), v))
	})
}

// FinalShippingVatTaxIn applies the In predicate on the "final_shipping_vat_tax" field.
func FinalShippingVatTaxIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFinalShippingVatTax), v...))
	})
}

// FinalShippingVatTaxNotIn applies the NotIn predicate on the "final_shipping_vat_tax" field.
func FinalShippingVatTaxNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFinalShippingVatTax), v...))
	})
}

// FinalShippingVatTaxGT applies the GT predicate on the "final_shipping_vat_tax" field.
func FinalShippingVatTaxGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinalShippingVatTax), v))
	})
}

// FinalShippingVatTaxGTE applies the GTE predicate on the "final_shipping_vat_tax" field.
func FinalShippingVatTaxGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinalShippingVatTax), v))
	})
}

// FinalShippingVatTaxLT applies the LT predicate on the "final_shipping_vat_tax" field.
func FinalShippingVatTaxLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinalShippingVatTax), v))
	})
}

// FinalShippingVatTaxLTE applies the LTE predicate on the "final_shipping_vat_tax" field.
func FinalShippingVatTaxLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinalShippingVatTax), v))
	})
}

// ShippingChargeEQ applies the EQ predicate on the "shipping_charge" field.
func ShippingChargeEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCharge), v))
	})
}

// ShippingChargeNEQ applies the NEQ predicate on the "shipping_charge" field.
func ShippingChargeNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCharge), v))
	})
}

// ShippingChargeIn applies the In predicate on the "shipping_charge" field.
func ShippingChargeIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCharge), v...))
	})
}

// ShippingChargeNotIn applies the NotIn predicate on the "shipping_charge" field.
func ShippingChargeNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCharge), v...))
	})
}

// ShippingChargeGT applies the GT predicate on the "shipping_charge" field.
func ShippingChargeGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCharge), v))
	})
}

// ShippingChargeGTE applies the GTE predicate on the "shipping_charge" field.
func ShippingChargeGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCharge), v))
	})
}

// ShippingChargeLT applies the LT predicate on the "shipping_charge" field.
func ShippingChargeLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCharge), v))
	})
}

// ShippingChargeLTE applies the LTE predicate on the "shipping_charge" field.
func ShippingChargeLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCharge), v))
	})
}

// VoucherPlatformEQ applies the EQ predicate on the "voucher_platform" field.
func VoucherPlatformEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVoucherPlatform), v))
	})
}

// VoucherPlatformNEQ applies the NEQ predicate on the "voucher_platform" field.
func VoucherPlatformNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVoucherPlatform), v))
	})
}

// VoucherPlatformIn applies the In predicate on the "voucher_platform" field.
func VoucherPlatformIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVoucherPlatform), v...))
	})
}

// VoucherPlatformNotIn applies the NotIn predicate on the "voucher_platform" field.
func VoucherPlatformNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVoucherPlatform), v...))
	})
}

// VoucherPlatformGT applies the GT predicate on the "voucher_platform" field.
func VoucherPlatformGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVoucherPlatform), v))
	})
}

// VoucherPlatformGTE applies the GTE predicate on the "voucher_platform" field.
func VoucherPlatformGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVoucherPlatform), v))
	})
}

// VoucherPlatformLT applies the LT predicate on the "voucher_platform" field.
func VoucherPlatformLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVoucherPlatform), v))
	})
}

// VoucherPlatformLTE applies the LTE predicate on the "voucher_platform" field.
func VoucherPlatformLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVoucherPlatform), v))
	})
}

// OverTimeLeftEQ applies the EQ predicate on the "over_time_left" field.
func OverTimeLeftEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOverTimeLeft), v))
	})
}

// OverTimeLeftNEQ applies the NEQ predicate on the "over_time_left" field.
func OverTimeLeftNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOverTimeLeft), v))
	})
}

// OverTimeLeftIn applies the In predicate on the "over_time_left" field.
func OverTimeLeftIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOverTimeLeft), v...))
	})
}

// OverTimeLeftNotIn applies the NotIn predicate on the "over_time_left" field.
func OverTimeLeftNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOverTimeLeft), v...))
	})
}

// OverTimeLeftGT applies the GT predicate on the "over_time_left" field.
func OverTimeLeftGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOverTimeLeft), v))
	})
}

// OverTimeLeftGTE applies the GTE predicate on the "over_time_left" field.
func OverTimeLeftGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOverTimeLeft), v))
	})
}

// OverTimeLeftLT applies the LT predicate on the "over_time_left" field.
func OverTimeLeftLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOverTimeLeft), v))
	})
}

// OverTimeLeftLTE applies the LTE predicate on the "over_time_left" field.
func OverTimeLeftLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOverTimeLeft), v))
	})
}

// OverTimeLeftIsNil applies the IsNil predicate on the "over_time_left" field.
func OverTimeLeftIsNil() predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOverTimeLeft)))
	})
}

// OverTimeLeftNotNil applies the NotNil predicate on the "over_time_left" field.
func OverTimeLeftNotNil() predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOverTimeLeft)))
	})
}

// ShippingRebateEQ applies the EQ predicate on the "shipping_rebate" field.
func ShippingRebateEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingRebate), v))
	})
}

// ShippingRebateNEQ applies the NEQ predicate on the "shipping_rebate" field.
func ShippingRebateNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingRebate), v))
	})
}

// ShippingRebateIn applies the In predicate on the "shipping_rebate" field.
func ShippingRebateIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingRebate), v...))
	})
}

// ShippingRebateNotIn applies the NotIn predicate on the "shipping_rebate" field.
func ShippingRebateNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingRebate), v...))
	})
}

// ShippingRebateGT applies the GT predicate on the "shipping_rebate" field.
func ShippingRebateGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingRebate), v))
	})
}

// ShippingRebateGTE applies the GTE predicate on the "shipping_rebate" field.
func ShippingRebateGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingRebate), v))
	})
}

// ShippingRebateLT applies the LT predicate on the "shipping_rebate" field.
func ShippingRebateLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingRebate), v))
	})
}

// ShippingRebateLTE applies the LTE predicate on the "shipping_rebate" field.
func ShippingRebateLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingRebate), v))
	})
}

// LabelListEQ applies the EQ predicate on the "label_list" field.
func LabelListEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLabelList), v))
	})
}

// LabelListNEQ applies the NEQ predicate on the "label_list" field.
func LabelListNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLabelList), v))
	})
}

// LabelListIn applies the In predicate on the "label_list" field.
func LabelListIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLabelList), v...))
	})
}

// LabelListNotIn applies the NotIn predicate on the "label_list" field.
func LabelListNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLabelList), v...))
	})
}

// LabelListGT applies the GT predicate on the "label_list" field.
func LabelListGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLabelList), v))
	})
}

// LabelListGTE applies the GTE predicate on the "label_list" field.
func LabelListGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLabelList), v))
	})
}

// LabelListLT applies the LT predicate on the "label_list" field.
func LabelListLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLabelList), v))
	})
}

// LabelListLTE applies the LTE predicate on the "label_list" field.
func LabelListLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLabelList), v))
	})
}

// LabelListContains applies the Contains predicate on the "label_list" field.
func LabelListContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLabelList), v))
	})
}

// LabelListHasPrefix applies the HasPrefix predicate on the "label_list" field.
func LabelListHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLabelList), v))
	})
}

// LabelListHasSuffix applies the HasSuffix predicate on the "label_list" field.
func LabelListHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLabelList), v))
	})
}

// LabelListEqualFold applies the EqualFold predicate on the "label_list" field.
func LabelListEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLabelList), v))
	})
}

// LabelListContainsFold applies the ContainsFold predicate on the "label_list" field.
func LabelListContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLabelList), v))
	})
}

// OutRealGrandTotalEQ applies the EQ predicate on the "out_real_grand_total" field.
func OutRealGrandTotalEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutRealGrandTotal), v))
	})
}

// OutRealGrandTotalNEQ applies the NEQ predicate on the "out_real_grand_total" field.
func OutRealGrandTotalNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutRealGrandTotal), v))
	})
}

// OutRealGrandTotalIn applies the In predicate on the "out_real_grand_total" field.
func OutRealGrandTotalIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOutRealGrandTotal), v...))
	})
}

// OutRealGrandTotalNotIn applies the NotIn predicate on the "out_real_grand_total" field.
func OutRealGrandTotalNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOutRealGrandTotal), v...))
	})
}

// OutRealGrandTotalGT applies the GT predicate on the "out_real_grand_total" field.
func OutRealGrandTotalGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutRealGrandTotal), v))
	})
}

// OutRealGrandTotalGTE applies the GTE predicate on the "out_real_grand_total" field.
func OutRealGrandTotalGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutRealGrandTotal), v))
	})
}

// OutRealGrandTotalLT applies the LT predicate on the "out_real_grand_total" field.
func OutRealGrandTotalLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutRealGrandTotal), v))
	})
}

// OutRealGrandTotalLTE applies the LTE predicate on the "out_real_grand_total" field.
func OutRealGrandTotalLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutRealGrandTotal), v))
	})
}

// BillListEQ applies the EQ predicate on the "bill_list" field.
func BillListEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillList), v))
	})
}

// BillListNEQ applies the NEQ predicate on the "bill_list" field.
func BillListNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBillList), v))
	})
}

// BillListIn applies the In predicate on the "bill_list" field.
func BillListIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBillList), v...))
	})
}

// BillListNotIn applies the NotIn predicate on the "bill_list" field.
func BillListNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBillList), v...))
	})
}

// BillListGT applies the GT predicate on the "bill_list" field.
func BillListGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBillList), v))
	})
}

// BillListGTE applies the GTE predicate on the "bill_list" field.
func BillListGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBillList), v))
	})
}

// BillListLT applies the LT predicate on the "bill_list" field.
func BillListLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBillList), v))
	})
}

// BillListLTE applies the LTE predicate on the "bill_list" field.
func BillListLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBillList), v))
	})
}

// BillListContains applies the Contains predicate on the "bill_list" field.
func BillListContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBillList), v))
	})
}

// BillListHasPrefix applies the HasPrefix predicate on the "bill_list" field.
func BillListHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBillList), v))
	})
}

// BillListHasSuffix applies the HasSuffix predicate on the "bill_list" field.
func BillListHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBillList), v))
	})
}

// BillListEqualFold applies the EqualFold predicate on the "bill_list" field.
func BillListEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBillList), v))
	})
}

// BillListContainsFold applies the ContainsFold predicate on the "bill_list" field.
func BillListContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBillList), v))
	})
}

// OutGrandTotalEQ applies the EQ predicate on the "out_grand_total" field.
func OutGrandTotalEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutGrandTotal), v))
	})
}

// OutGrandTotalNEQ applies the NEQ predicate on the "out_grand_total" field.
func OutGrandTotalNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutGrandTotal), v))
	})
}

// OutGrandTotalIn applies the In predicate on the "out_grand_total" field.
func OutGrandTotalIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOutGrandTotal), v...))
	})
}

// OutGrandTotalNotIn applies the NotIn predicate on the "out_grand_total" field.
func OutGrandTotalNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOutGrandTotal), v...))
	})
}

// OutGrandTotalGT applies the GT predicate on the "out_grand_total" field.
func OutGrandTotalGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutGrandTotal), v))
	})
}

// OutGrandTotalGTE applies the GTE predicate on the "out_grand_total" field.
func OutGrandTotalGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutGrandTotal), v))
	})
}

// OutGrandTotalLT applies the LT predicate on the "out_grand_total" field.
func OutGrandTotalLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutGrandTotal), v))
	})
}

// OutGrandTotalLTE applies the LTE predicate on the "out_grand_total" field.
func OutGrandTotalLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutGrandTotal), v))
	})
}

// DeliverShopEQ applies the EQ predicate on the "deliver_shop" field.
func DeliverShopEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliverShop), v))
	})
}

// DeliverShopNEQ applies the NEQ predicate on the "deliver_shop" field.
func DeliverShopNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliverShop), v))
	})
}

// DeliverShopIn applies the In predicate on the "deliver_shop" field.
func DeliverShopIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeliverShop), v...))
	})
}

// DeliverShopNotIn applies the NotIn predicate on the "deliver_shop" field.
func DeliverShopNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeliverShop), v...))
	})
}

// DeliverShopGT applies the GT predicate on the "deliver_shop" field.
func DeliverShopGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliverShop), v))
	})
}

// DeliverShopGTE applies the GTE predicate on the "deliver_shop" field.
func DeliverShopGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliverShop), v))
	})
}

// DeliverShopLT applies the LT predicate on the "deliver_shop" field.
func DeliverShopLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliverShop), v))
	})
}

// DeliverShopLTE applies the LTE predicate on the "deliver_shop" field.
func DeliverShopLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliverShop), v))
	})
}

// DeliverShopContains applies the Contains predicate on the "deliver_shop" field.
func DeliverShopContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeliverShop), v))
	})
}

// DeliverShopHasPrefix applies the HasPrefix predicate on the "deliver_shop" field.
func DeliverShopHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeliverShop), v))
	})
}

// DeliverShopHasSuffix applies the HasSuffix predicate on the "deliver_shop" field.
func DeliverShopHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeliverShop), v))
	})
}

// DeliverShopEqualFold applies the EqualFold predicate on the "deliver_shop" field.
func DeliverShopEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeliverShop), v))
	})
}

// DeliverShopContainsFold applies the ContainsFold predicate on the "deliver_shop" field.
func DeliverShopContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeliverShop), v))
	})
}

// ShippingCostFinalEQ applies the EQ predicate on the "shipping_cost_final" field.
func ShippingCostFinalEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingCostFinal), v))
	})
}

// ShippingCostFinalNEQ applies the NEQ predicate on the "shipping_cost_final" field.
func ShippingCostFinalNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingCostFinal), v))
	})
}

// ShippingCostFinalIn applies the In predicate on the "shipping_cost_final" field.
func ShippingCostFinalIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingCostFinal), v...))
	})
}

// ShippingCostFinalNotIn applies the NotIn predicate on the "shipping_cost_final" field.
func ShippingCostFinalNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingCostFinal), v...))
	})
}

// ShippingCostFinalGT applies the GT predicate on the "shipping_cost_final" field.
func ShippingCostFinalGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingCostFinal), v))
	})
}

// ShippingCostFinalGTE applies the GTE predicate on the "shipping_cost_final" field.
func ShippingCostFinalGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingCostFinal), v))
	})
}

// ShippingCostFinalLT applies the LT predicate on the "shipping_cost_final" field.
func ShippingCostFinalLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingCostFinal), v))
	})
}

// ShippingCostFinalLTE applies the LTE predicate on the "shipping_cost_final" field.
func ShippingCostFinalLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingCostFinal), v))
	})
}

// ShippingFreeAboutEQ applies the EQ predicate on the "shipping_free_about" field.
func ShippingFreeAboutEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShippingFreeAbout), v))
	})
}

// ShippingFreeAboutNEQ applies the NEQ predicate on the "shipping_free_about" field.
func ShippingFreeAboutNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShippingFreeAbout), v))
	})
}

// ShippingFreeAboutIn applies the In predicate on the "shipping_free_about" field.
func ShippingFreeAboutIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShippingFreeAbout), v...))
	})
}

// ShippingFreeAboutNotIn applies the NotIn predicate on the "shipping_free_about" field.
func ShippingFreeAboutNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShippingFreeAbout), v...))
	})
}

// ShippingFreeAboutGT applies the GT predicate on the "shipping_free_about" field.
func ShippingFreeAboutGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShippingFreeAbout), v))
	})
}

// ShippingFreeAboutGTE applies the GTE predicate on the "shipping_free_about" field.
func ShippingFreeAboutGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShippingFreeAbout), v))
	})
}

// ShippingFreeAboutLT applies the LT predicate on the "shipping_free_about" field.
func ShippingFreeAboutLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShippingFreeAbout), v))
	})
}

// ShippingFreeAboutLTE applies the LTE predicate on the "shipping_free_about" field.
func ShippingFreeAboutLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShippingFreeAbout), v))
	})
}

// CreateOrderStatusEQ applies the EQ predicate on the "create_order_status" field.
func CreateOrderStatusEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateOrderStatus), v))
	})
}

// CreateOrderStatusNEQ applies the NEQ predicate on the "create_order_status" field.
func CreateOrderStatusNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateOrderStatus), v))
	})
}

// CreateOrderStatusIn applies the In predicate on the "create_order_status" field.
func CreateOrderStatusIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateOrderStatus), v...))
	})
}

// CreateOrderStatusNotIn applies the NotIn predicate on the "create_order_status" field.
func CreateOrderStatusNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateOrderStatus), v...))
	})
}

// CreateOrderStatusGT applies the GT predicate on the "create_order_status" field.
func CreateOrderStatusGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateOrderStatus), v))
	})
}

// CreateOrderStatusGTE applies the GTE predicate on the "create_order_status" field.
func CreateOrderStatusGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateOrderStatus), v))
	})
}

// CreateOrderStatusLT applies the LT predicate on the "create_order_status" field.
func CreateOrderStatusLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateOrderStatus), v))
	})
}

// CreateOrderStatusLTE applies the LTE predicate on the "create_order_status" field.
func CreateOrderStatusLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateOrderStatus), v))
	})
}

// FinanceTimeEQ applies the EQ predicate on the "finance_time" field.
func FinanceTimeEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinanceTime), v))
	})
}

// FinanceTimeNEQ applies the NEQ predicate on the "finance_time" field.
func FinanceTimeNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinanceTime), v))
	})
}

// FinanceTimeIn applies the In predicate on the "finance_time" field.
func FinanceTimeIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFinanceTime), v...))
	})
}

// FinanceTimeNotIn applies the NotIn predicate on the "finance_time" field.
func FinanceTimeNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFinanceTime), v...))
	})
}

// FinanceTimeGT applies the GT predicate on the "finance_time" field.
func FinanceTimeGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinanceTime), v))
	})
}

// FinanceTimeGTE applies the GTE predicate on the "finance_time" field.
func FinanceTimeGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinanceTime), v))
	})
}

// FinanceTimeLT applies the LT predicate on the "finance_time" field.
func FinanceTimeLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinanceTime), v))
	})
}

// FinanceTimeLTE applies the LTE predicate on the "finance_time" field.
func FinanceTimeLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinanceTime), v))
	})
}

// IsQccEQ applies the EQ predicate on the "is_qcc" field.
func IsQccEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsQcc), v))
	})
}

// IsQccNEQ applies the NEQ predicate on the "is_qcc" field.
func IsQccNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsQcc), v))
	})
}

// IsQccIn applies the In predicate on the "is_qcc" field.
func IsQccIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsQcc), v...))
	})
}

// IsQccNotIn applies the NotIn predicate on the "is_qcc" field.
func IsQccNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsQcc), v...))
	})
}

// IsQccGT applies the GT predicate on the "is_qcc" field.
func IsQccGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsQcc), v))
	})
}

// IsQccGTE applies the GTE predicate on the "is_qcc" field.
func IsQccGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsQcc), v))
	})
}

// IsQccLT applies the LT predicate on the "is_qcc" field.
func IsQccLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsQcc), v))
	})
}

// IsQccLTE applies the LTE predicate on the "is_qcc" field.
func IsQccLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsQcc), v))
	})
}

// RejectReasonEQ applies the EQ predicate on the "reject_reason" field.
func RejectReasonEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRejectReason), v))
	})
}

// RejectReasonNEQ applies the NEQ predicate on the "reject_reason" field.
func RejectReasonNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRejectReason), v))
	})
}

// RejectReasonIn applies the In predicate on the "reject_reason" field.
func RejectReasonIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRejectReason), v...))
	})
}

// RejectReasonNotIn applies the NotIn predicate on the "reject_reason" field.
func RejectReasonNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRejectReason), v...))
	})
}

// RejectReasonGT applies the GT predicate on the "reject_reason" field.
func RejectReasonGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRejectReason), v))
	})
}

// RejectReasonGTE applies the GTE predicate on the "reject_reason" field.
func RejectReasonGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRejectReason), v))
	})
}

// RejectReasonLT applies the LT predicate on the "reject_reason" field.
func RejectReasonLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRejectReason), v))
	})
}

// RejectReasonLTE applies the LTE predicate on the "reject_reason" field.
func RejectReasonLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRejectReason), v))
	})
}

// RejectReasonContains applies the Contains predicate on the "reject_reason" field.
func RejectReasonContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRejectReason), v))
	})
}

// RejectReasonHasPrefix applies the HasPrefix predicate on the "reject_reason" field.
func RejectReasonHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRejectReason), v))
	})
}

// RejectReasonHasSuffix applies the HasSuffix predicate on the "reject_reason" field.
func RejectReasonHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRejectReason), v))
	})
}

// RejectReasonEqualFold applies the EqualFold predicate on the "reject_reason" field.
func RejectReasonEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRejectReason), v))
	})
}

// RejectReasonContainsFold applies the ContainsFold predicate on the "reject_reason" field.
func RejectReasonContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRejectReason), v))
	})
}

// OrderLocalTimeEQ applies the EQ predicate on the "order_local_time" field.
func OrderLocalTimeEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderLocalTime), v))
	})
}

// OrderLocalTimeNEQ applies the NEQ predicate on the "order_local_time" field.
func OrderLocalTimeNEQ(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderLocalTime), v))
	})
}

// OrderLocalTimeIn applies the In predicate on the "order_local_time" field.
func OrderLocalTimeIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderLocalTime), v...))
	})
}

// OrderLocalTimeNotIn applies the NotIn predicate on the "order_local_time" field.
func OrderLocalTimeNotIn(vs ...time.Time) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderLocalTime), v...))
	})
}

// OrderLocalTimeGT applies the GT predicate on the "order_local_time" field.
func OrderLocalTimeGT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderLocalTime), v))
	})
}

// OrderLocalTimeGTE applies the GTE predicate on the "order_local_time" field.
func OrderLocalTimeGTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderLocalTime), v))
	})
}

// OrderLocalTimeLT applies the LT predicate on the "order_local_time" field.
func OrderLocalTimeLT(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderLocalTime), v))
	})
}

// OrderLocalTimeLTE applies the LTE predicate on the "order_local_time" field.
func OrderLocalTimeLTE(v time.Time) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderLocalTime), v))
	})
}

// DiscountCodeEQ applies the EQ predicate on the "discount_code" field.
func DiscountCodeEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountCode), v))
	})
}

// DiscountCodeNEQ applies the NEQ predicate on the "discount_code" field.
func DiscountCodeNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscountCode), v))
	})
}

// DiscountCodeIn applies the In predicate on the "discount_code" field.
func DiscountCodeIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscountCode), v...))
	})
}

// DiscountCodeNotIn applies the NotIn predicate on the "discount_code" field.
func DiscountCodeNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscountCode), v...))
	})
}

// DiscountCodeGT applies the GT predicate on the "discount_code" field.
func DiscountCodeGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscountCode), v))
	})
}

// DiscountCodeGTE applies the GTE predicate on the "discount_code" field.
func DiscountCodeGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscountCode), v))
	})
}

// DiscountCodeLT applies the LT predicate on the "discount_code" field.
func DiscountCodeLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscountCode), v))
	})
}

// DiscountCodeLTE applies the LTE predicate on the "discount_code" field.
func DiscountCodeLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscountCode), v))
	})
}

// DiscountCodeContains applies the Contains predicate on the "discount_code" field.
func DiscountCodeContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscountCode), v))
	})
}

// DiscountCodeHasPrefix applies the HasPrefix predicate on the "discount_code" field.
func DiscountCodeHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscountCode), v))
	})
}

// DiscountCodeHasSuffix applies the HasSuffix predicate on the "discount_code" field.
func DiscountCodeHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscountCode), v))
	})
}

// DiscountCodeEqualFold applies the EqualFold predicate on the "discount_code" field.
func DiscountCodeEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscountCode), v))
	})
}

// DiscountCodeContainsFold applies the ContainsFold predicate on the "discount_code" field.
func DiscountCodeContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscountCode), v))
	})
}

// StockoutStatusEQ applies the EQ predicate on the "stockout_status" field.
func StockoutStatusEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStockoutStatus), v))
	})
}

// StockoutStatusNEQ applies the NEQ predicate on the "stockout_status" field.
func StockoutStatusNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStockoutStatus), v))
	})
}

// StockoutStatusIn applies the In predicate on the "stockout_status" field.
func StockoutStatusIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStockoutStatus), v...))
	})
}

// StockoutStatusNotIn applies the NotIn predicate on the "stockout_status" field.
func StockoutStatusNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStockoutStatus), v...))
	})
}

// StockoutStatusGT applies the GT predicate on the "stockout_status" field.
func StockoutStatusGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStockoutStatus), v))
	})
}

// StockoutStatusGTE applies the GTE predicate on the "stockout_status" field.
func StockoutStatusGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStockoutStatus), v))
	})
}

// StockoutStatusLT applies the LT predicate on the "stockout_status" field.
func StockoutStatusLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStockoutStatus), v))
	})
}

// StockoutStatusLTE applies the LTE predicate on the "stockout_status" field.
func StockoutStatusLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStockoutStatus), v))
	})
}

// OrderLengthEQ applies the EQ predicate on the "order_length" field.
func OrderLengthEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderLength), v))
	})
}

// OrderLengthNEQ applies the NEQ predicate on the "order_length" field.
func OrderLengthNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderLength), v))
	})
}

// OrderLengthIn applies the In predicate on the "order_length" field.
func OrderLengthIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderLength), v...))
	})
}

// OrderLengthNotIn applies the NotIn predicate on the "order_length" field.
func OrderLengthNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderLength), v...))
	})
}

// OrderLengthGT applies the GT predicate on the "order_length" field.
func OrderLengthGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderLength), v))
	})
}

// OrderLengthGTE applies the GTE predicate on the "order_length" field.
func OrderLengthGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderLength), v))
	})
}

// OrderLengthLT applies the LT predicate on the "order_length" field.
func OrderLengthLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderLength), v))
	})
}

// OrderLengthLTE applies the LTE predicate on the "order_length" field.
func OrderLengthLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderLength), v))
	})
}

// OrderWidthEQ applies the EQ predicate on the "order_width" field.
func OrderWidthEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderWidth), v))
	})
}

// OrderWidthNEQ applies the NEQ predicate on the "order_width" field.
func OrderWidthNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderWidth), v))
	})
}

// OrderWidthIn applies the In predicate on the "order_width" field.
func OrderWidthIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderWidth), v...))
	})
}

// OrderWidthNotIn applies the NotIn predicate on the "order_width" field.
func OrderWidthNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderWidth), v...))
	})
}

// OrderWidthGT applies the GT predicate on the "order_width" field.
func OrderWidthGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderWidth), v))
	})
}

// OrderWidthGTE applies the GTE predicate on the "order_width" field.
func OrderWidthGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderWidth), v))
	})
}

// OrderWidthLT applies the LT predicate on the "order_width" field.
func OrderWidthLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderWidth), v))
	})
}

// OrderWidthLTE applies the LTE predicate on the "order_width" field.
func OrderWidthLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderWidth), v))
	})
}

// OrderHeightEQ applies the EQ predicate on the "order_height" field.
func OrderHeightEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderHeight), v))
	})
}

// OrderHeightNEQ applies the NEQ predicate on the "order_height" field.
func OrderHeightNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderHeight), v))
	})
}

// OrderHeightIn applies the In predicate on the "order_height" field.
func OrderHeightIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderHeight), v...))
	})
}

// OrderHeightNotIn applies the NotIn predicate on the "order_height" field.
func OrderHeightNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderHeight), v...))
	})
}

// OrderHeightGT applies the GT predicate on the "order_height" field.
func OrderHeightGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderHeight), v))
	})
}

// OrderHeightGTE applies the GTE predicate on the "order_height" field.
func OrderHeightGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderHeight), v))
	})
}

// OrderHeightLT applies the LT predicate on the "order_height" field.
func OrderHeightLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderHeight), v))
	})
}

// OrderHeightLTE applies the LTE predicate on the "order_height" field.
func OrderHeightLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderHeight), v))
	})
}

// FirstSideEQ applies the EQ predicate on the "first_side" field.
func FirstSideEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstSide), v))
	})
}

// FirstSideNEQ applies the NEQ predicate on the "first_side" field.
func FirstSideNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstSide), v))
	})
}

// FirstSideIn applies the In predicate on the "first_side" field.
func FirstSideIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirstSide), v...))
	})
}

// FirstSideNotIn applies the NotIn predicate on the "first_side" field.
func FirstSideNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirstSide), v...))
	})
}

// FirstSideGT applies the GT predicate on the "first_side" field.
func FirstSideGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstSide), v))
	})
}

// FirstSideGTE applies the GTE predicate on the "first_side" field.
func FirstSideGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstSide), v))
	})
}

// FirstSideLT applies the LT predicate on the "first_side" field.
func FirstSideLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstSide), v))
	})
}

// FirstSideLTE applies the LTE predicate on the "first_side" field.
func FirstSideLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstSide), v))
	})
}

// SecondSideEQ applies the EQ predicate on the "second_side" field.
func SecondSideEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecondSide), v))
	})
}

// SecondSideNEQ applies the NEQ predicate on the "second_side" field.
func SecondSideNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSecondSide), v))
	})
}

// SecondSideIn applies the In predicate on the "second_side" field.
func SecondSideIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSecondSide), v...))
	})
}

// SecondSideNotIn applies the NotIn predicate on the "second_side" field.
func SecondSideNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSecondSide), v...))
	})
}

// SecondSideGT applies the GT predicate on the "second_side" field.
func SecondSideGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSecondSide), v))
	})
}

// SecondSideGTE applies the GTE predicate on the "second_side" field.
func SecondSideGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSecondSide), v))
	})
}

// SecondSideLT applies the LT predicate on the "second_side" field.
func SecondSideLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSecondSide), v))
	})
}

// SecondSideLTE applies the LTE predicate on the "second_side" field.
func SecondSideLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSecondSide), v))
	})
}

// ThirdSideEQ applies the EQ predicate on the "third_side" field.
func ThirdSideEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdSide), v))
	})
}

// ThirdSideNEQ applies the NEQ predicate on the "third_side" field.
func ThirdSideNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdSide), v))
	})
}

// ThirdSideIn applies the In predicate on the "third_side" field.
func ThirdSideIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThirdSide), v...))
	})
}

// ThirdSideNotIn applies the NotIn predicate on the "third_side" field.
func ThirdSideNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThirdSide), v...))
	})
}

// ThirdSideGT applies the GT predicate on the "third_side" field.
func ThirdSideGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdSide), v))
	})
}

// ThirdSideGTE applies the GTE predicate on the "third_side" field.
func ThirdSideGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdSide), v))
	})
}

// ThirdSideLT applies the LT predicate on the "third_side" field.
func ThirdSideLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdSide), v))
	})
}

// ThirdSideLTE applies the LTE predicate on the "third_side" field.
func ThirdSideLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdSide), v))
	})
}

// OrderFeeWeightEQ applies the EQ predicate on the "order_fee_weight" field.
func OrderFeeWeightEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderFeeWeight), v))
	})
}

// OrderFeeWeightNEQ applies the NEQ predicate on the "order_fee_weight" field.
func OrderFeeWeightNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderFeeWeight), v))
	})
}

// OrderFeeWeightIn applies the In predicate on the "order_fee_weight" field.
func OrderFeeWeightIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderFeeWeight), v...))
	})
}

// OrderFeeWeightNotIn applies the NotIn predicate on the "order_fee_weight" field.
func OrderFeeWeightNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderFeeWeight), v...))
	})
}

// OrderFeeWeightGT applies the GT predicate on the "order_fee_weight" field.
func OrderFeeWeightGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderFeeWeight), v))
	})
}

// OrderFeeWeightGTE applies the GTE predicate on the "order_fee_weight" field.
func OrderFeeWeightGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderFeeWeight), v))
	})
}

// OrderFeeWeightLT applies the LT predicate on the "order_fee_weight" field.
func OrderFeeWeightLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderFeeWeight), v))
	})
}

// OrderFeeWeightLTE applies the LTE predicate on the "order_fee_weight" field.
func OrderFeeWeightLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderFeeWeight), v))
	})
}

// ShopManagerEQ applies the EQ predicate on the "shop_manager" field.
func ShopManagerEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopManager), v))
	})
}

// ShopManagerNEQ applies the NEQ predicate on the "shop_manager" field.
func ShopManagerNEQ(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShopManager), v))
	})
}

// ShopManagerIn applies the In predicate on the "shop_manager" field.
func ShopManagerIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShopManager), v...))
	})
}

// ShopManagerNotIn applies the NotIn predicate on the "shop_manager" field.
func ShopManagerNotIn(vs ...string) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShopManager), v...))
	})
}

// ShopManagerGT applies the GT predicate on the "shop_manager" field.
func ShopManagerGT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShopManager), v))
	})
}

// ShopManagerGTE applies the GTE predicate on the "shop_manager" field.
func ShopManagerGTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShopManager), v))
	})
}

// ShopManagerLT applies the LT predicate on the "shop_manager" field.
func ShopManagerLT(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShopManager), v))
	})
}

// ShopManagerLTE applies the LTE predicate on the "shop_manager" field.
func ShopManagerLTE(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShopManager), v))
	})
}

// ShopManagerContains applies the Contains predicate on the "shop_manager" field.
func ShopManagerContains(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShopManager), v))
	})
}

// ShopManagerHasPrefix applies the HasPrefix predicate on the "shop_manager" field.
func ShopManagerHasPrefix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShopManager), v))
	})
}

// ShopManagerHasSuffix applies the HasSuffix predicate on the "shop_manager" field.
func ShopManagerHasSuffix(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShopManager), v))
	})
}

// ShopManagerEqualFold applies the EqualFold predicate on the "shop_manager" field.
func ShopManagerEqualFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShopManager), v))
	})
}

// ShopManagerContainsFold applies the ContainsFold predicate on the "shop_manager" field.
func ShopManagerContainsFold(v string) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShopManager), v))
	})
}

// PushStatusEQ applies the EQ predicate on the "push_status" field.
func PushStatusEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPushStatus), v))
	})
}

// PushStatusNEQ applies the NEQ predicate on the "push_status" field.
func PushStatusNEQ(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPushStatus), v))
	})
}

// PushStatusIn applies the In predicate on the "push_status" field.
func PushStatusIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPushStatus), v...))
	})
}

// PushStatusNotIn applies the NotIn predicate on the "push_status" field.
func PushStatusNotIn(vs ...int8) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPushStatus), v...))
	})
}

// PushStatusGT applies the GT predicate on the "push_status" field.
func PushStatusGT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPushStatus), v))
	})
}

// PushStatusGTE applies the GTE predicate on the "push_status" field.
func PushStatusGTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPushStatus), v))
	})
}

// PushStatusLT applies the LT predicate on the "push_status" field.
func PushStatusLT(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPushStatus), v))
	})
}

// PushStatusLTE applies the LTE predicate on the "push_status" field.
func PushStatusLTE(v int8) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPushStatus), v))
	})
}

// BuyerPaidShippingFeeEQ applies the EQ predicate on the "buyer_paid_shipping_fee" field.
func BuyerPaidShippingFeeEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBuyerPaidShippingFee), v))
	})
}

// BuyerPaidShippingFeeNEQ applies the NEQ predicate on the "buyer_paid_shipping_fee" field.
func BuyerPaidShippingFeeNEQ(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBuyerPaidShippingFee), v))
	})
}

// BuyerPaidShippingFeeIn applies the In predicate on the "buyer_paid_shipping_fee" field.
func BuyerPaidShippingFeeIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBuyerPaidShippingFee), v...))
	})
}

// BuyerPaidShippingFeeNotIn applies the NotIn predicate on the "buyer_paid_shipping_fee" field.
func BuyerPaidShippingFeeNotIn(vs ...float64) predicate.OrderMain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBuyerPaidShippingFee), v...))
	})
}

// BuyerPaidShippingFeeGT applies the GT predicate on the "buyer_paid_shipping_fee" field.
func BuyerPaidShippingFeeGT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBuyerPaidShippingFee), v))
	})
}

// BuyerPaidShippingFeeGTE applies the GTE predicate on the "buyer_paid_shipping_fee" field.
func BuyerPaidShippingFeeGTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBuyerPaidShippingFee), v))
	})
}

// BuyerPaidShippingFeeLT applies the LT predicate on the "buyer_paid_shipping_fee" field.
func BuyerPaidShippingFeeLT(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBuyerPaidShippingFee), v))
	})
}

// BuyerPaidShippingFeeLTE applies the LTE predicate on the "buyer_paid_shipping_fee" field.
func BuyerPaidShippingFeeLTE(v float64) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBuyerPaidShippingFee), v))
	})
}

// BuyerPaidShippingFeeIsNil applies the IsNil predicate on the "buyer_paid_shipping_fee" field.
func BuyerPaidShippingFeeIsNil() predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBuyerPaidShippingFee)))
	})
}

// BuyerPaidShippingFeeNotNil applies the NotNil predicate on the "buyer_paid_shipping_fee" field.
func BuyerPaidShippingFeeNotNil() predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBuyerPaidShippingFee)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderMain) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderMain) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderMain) predicate.OrderMain {
	return predicate.OrderMain(func(s *sql.Selector) {
		p(s.Not())
	})
}
